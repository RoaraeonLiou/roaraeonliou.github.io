<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Redis on RLTEA BLOG</title>
    <link>https://roaraeonliou.github.io/tags/redis/</link>
    <description>Recent content in Redis on RLTEA BLOG</description>
    <image>
      <title>RLTEA BLOG</title>
      <url>https://roaraeonliou.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://roaraeonliou.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.134.3</generator>
    <language>en</language>
    <lastBuildDate>Thu, 26 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://roaraeonliou.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis</title>
      <link>https://roaraeonliou.github.io/posts/interviewnotes/redis/redis/</link>
      <pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://roaraeonliou.github.io/posts/interviewnotes/redis/redis/</guid>
      <description>&lt;h1 id=&#34;redis&#34;&gt;Redis&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1cr4y1671t/?spm_id_from=444.64.search-card.all.click&#34;&gt;黑马程序员Redis入门到实战教程&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;1-基本概念&#34;&gt;1 基本概念&lt;/h1&gt;
&lt;h2 id=&#34;11-redisremote-dictionary-server&#34;&gt;1.1 Redis（::Re::mote ::Di::ctionary ::S::erver）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;键值型存储，value支持多种不同数据结构。&lt;/li&gt;
&lt;li&gt;单线程，每个命令具备原子性。（6.0之后的多线程仅是在网络处理部分，核心命令执行还是单线程）&lt;/li&gt;
&lt;li&gt;低延迟，速度快（基于内存、IO多路复用、良好的编码）。&lt;/li&gt;
&lt;li&gt;支持数据持久化。&lt;/li&gt;
&lt;li&gt;支持主从集群和分片集群。&lt;/li&gt;
&lt;li&gt;支持多语言客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12-sql和nosql&#34;&gt;1.2 SQL和NoSQL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SQL（Structured Query Language）：结构化的、关联的、SQL查询（语法固定）、事务（ACID）&lt;/li&gt;
&lt;li&gt;NoSQL（Not only SQL）：非结构的、非关联的、非SQL的（语法不固定，不统一）、不一定满足事务全部要求（BASE）
&lt;ul&gt;
&lt;li&gt;键值对：Redis&lt;/li&gt;
&lt;li&gt;文档：MongoDB&lt;/li&gt;
&lt;li&gt;图：Neo4j&lt;/li&gt;
&lt;li&gt;列：HBase&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;13-redis通用命令&#34;&gt;1.3 Redis通用命令&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-other&#34; data-lang=&#34;other&#34;&gt;// 1. 列出所有符合条件的key : KEYS [pattern]
KEYS *
KEYS a*
// 2. 删除所有指定的key : DEL key [key ...]
// 3. 判断key是否存在 : EXISTS key [key ...]
// 4. 给一个key设置有效期，过期自动删除 : EXPIRE key seconds
// 5. 查看命令具体用法 : help [command]
// 6. 查看一个key的有效期 : TTL key
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;2-底层数据结构&#34;&gt;2 底层数据结构&lt;/h1&gt;
&lt;p&gt;Redis是一个key-value数据库，key一般是String类型，不过value的类型有很多：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis补充</title>
      <link>https://roaraeonliou.github.io/posts/interviewnotes/redis/redis%E8%A1%A5%E5%85%85/</link>
      <pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://roaraeonliou.github.io/posts/interviewnotes/redis/redis%E8%A1%A5%E5%85%85/</guid>
      <description>&lt;h1 id=&#34;redis补充&#34;&gt;Redis补充&lt;/h1&gt;
&lt;h1 id=&#34;1-redis网络模型&#34;&gt;1 Redis网络模型&lt;/h1&gt;
&lt;p&gt;Redis的核心业务部分（命令处理）是单线程，但是整个Redis是多线程的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v4.0：引入多线程异步处理一些耗时较长的任务，例如异步删除命令unlink。&lt;/li&gt;
&lt;li&gt;v6.0：在核心网络模型中引入多线程，进一步提高对于多核CPU的利用率，但是核心部分依然是单线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;为什么选择单线程？&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;性能瓶颈是网络延迟，不是执行速度，多线程并不会带来巨大性能提升。&lt;/li&gt;
&lt;li&gt;多线程会导致过多的上下文切换，带来不必要的开销。&lt;/li&gt;
&lt;li&gt;引入多线程可能会面临线程安全问题，必须引入线程锁这样的安全手段，实现复杂度增高，性能也大打折扣。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1cr4y1671t/?p=171&amp;spm_id_from=pageDriver&amp;vd_source=5e81fa8ad2645ace69cd01959323966a&#34;&gt;原理篇-27.Redis网络模型-Redis单线程及多线程网络模型变更_哔哩哔哩_bilibili&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-redis通信协议&#34;&gt;2 Redis通信协议&lt;/h1&gt;
&lt;p&gt;RESP协议&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1cr4y1671t?p=172&amp;vd_source=5e81fa8ad2645ace69cd01959323966a&#34;&gt;原理篇-28.Redis通信协议-RESP协议_哔哩哔哩_bilibili&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;3-redis事务&#34;&gt;3 Redis事务&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Redis事务的三个阶段&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;MULTI&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;事务开始&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;命令入队&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;EXEC&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;事务执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Redis事务特点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;redis不支持回滚&lt;/strong&gt;，事务失败，继续执行余下的命令&lt;/li&gt;
&lt;li&gt;事物内部命令错误，所有命令都不会执行&lt;/li&gt;
&lt;li&gt;事物内部出现运行错误，正确的命令会被执行&lt;/li&gt;
&lt;li&gt;Redis事务没有&lt;strong&gt;原子性，持久性&lt;/strong&gt;仅在开启AOF的always模式下支持。&lt;/li&gt;
&lt;li&gt;Redis事务总是有&lt;strong&gt;隔离性（单线程）&lt;strong&gt;和&lt;/strong&gt;一致性。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Redis事务相关命令&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WATCH：乐观锁，给事务提供CAS机制，可以监控一个或者多个键，一旦其中有一个被修改，之后的事务就不会执行，监控一直持续到EXEC或者UNWATCH。&lt;/li&gt;
&lt;li&gt;MULTI：用于开启事务，开启后可以继续送入命令，当EXEC被调用时，才被执行。&lt;/li&gt;
&lt;li&gt;EXEC：执行事务块内所有命令，返回所有命令的返回值，按照命令先后排序。&lt;/li&gt;
&lt;li&gt;DISCARD：清空事务队列，放弃执行事务。&lt;/li&gt;
&lt;li&gt;UNWATCH：取消watch对所有key的监控。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-缓存和数据库的一致性&#34;&gt;4 缓存和数据库的一致性&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;设置有效期：给缓存设置有效期，到期自动删除，再次查询时更新
&lt;ul&gt;
&lt;li&gt;优势：简单方便&lt;/li&gt;
&lt;li&gt;缺点：时效性差，缓存过期之前可能不一致&lt;/li&gt;
&lt;li&gt;场景：更新频率较低，时效性要求较低的业务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同步双写：在修改数据库的同时，直接修改缓存
&lt;ul&gt;
&lt;li&gt;优势：时效性强，缓存与数据库强一致&lt;/li&gt;
&lt;li&gt;缺点：有代码侵入，耦合度高&lt;/li&gt;
&lt;li&gt;场景：对一致性，时效性要求较高的缓存数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异步通知：在修改数据库时发送事件通知，相关服务监听到通知后修改缓存数据
&lt;ul&gt;
&lt;li&gt;优势：低耦合，可以同时通知多个缓存服务&lt;/li&gt;
&lt;li&gt;缺点：时效性一般，可能存在中间不一致状态&lt;/li&gt;
&lt;li&gt;场景：时效性要求一般，有多个服务需要同步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/b3b47c9dd44a526e40dd810deb15808a/8abb25a2b116eaf0abcdb0ae98618474.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于MQ的异步通知，对业务代码仍然有一定侵入性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/b3b47c9dd44a526e40dd810deb15808a/dc15605693d4169fc32a3e8e780bb3a0.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于Cannal的异步通知，可以做到几乎0侵入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;41-缓存更新策略&#34;&gt;4.1 缓存更新策略&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;删除缓存而不是更新缓存&lt;/li&gt;
&lt;li&gt;先删数据，后删缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;42-缓存不一致处理&#34;&gt;4.2 缓存不一致处理&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用消息队列，把要删除和删除失败的key放入消息队列，利用重试机制，删除对应的key
&lt;ul&gt;
&lt;li&gt;对代码有侵入性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据库订阅+消息队列保证key被删除
&lt;ul&gt;
&lt;li&gt;利用canal或其他服务监听binlog&lt;/li&gt;
&lt;li&gt;复杂度提升&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;延时双删防止脏数据
&lt;ul&gt;
&lt;li&gt;延迟时间需要具体的考量和测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设置过期时间兜底&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;5-热key重建&#34;&gt;5 热key重建&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;使用互斥锁，保证只有一个线程重建，其他线程等待该线程重建完后，获取缓存数据即可。&lt;/li&gt;
&lt;li&gt;不显示设置过期时间，而是设置逻辑过期字段，发现逻辑过期后，采用单独的线程构建缓存。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;6-大key问题&#34;&gt;6 大key问题&lt;/h1&gt;
&lt;p&gt;单个简单key存储的value过大，hash、set、zset、list中存储过多元素。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
