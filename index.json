[{"content":"","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/new/%E6%95%B0%E6%8D%AE%E5%BA%93/1.basic/","summary":"","title":"1.Basic"},{"content":"1.1 Java程序从源代码到运行的过程 JVM可以理解的代码就是字节码（.class），面向Java虚拟机，Java语言通过字节码的方式，在一定程度上解决传统解释性语言执行效率低的问题，同时又保留了解释性语言可移植的特性。 .class文件到机器码这一步，JVM加载器会首先加载字节码文件，然后通过解释器逐行执行，这种执行速度比较慢，并且有些代码和方法会被经常调用，所以引进了JIT（Just in Time Compilation），属于运行时便意，当JIT完成第一次遍以后，会将对应的机器码保存下来，下次直接使用。所以说Java是编译与解释共存的语言。 1.2 AOT v.s. JIT AOT（Ahead of Time Compilation），在程序执行前就进行编译，属于静态便意，可以提高Java程序启动速度，避免预热时间过长，减少内存占用，增加程序安全性（AOT遍以后的代码不容易被反编译和修改），适合云原生场景。\n但是AOT不支持反射、动态代理、动态加载和JNI（Java Native Interface），所以很多框架和库都无法使用。\n1.3 Java v.s. C++ Java不提供指针直接访问内存 Java类是单继承，C++可以多继承，但是Java的接口可以多继承 Java有自动内存管理垃圾回收机制，不需要程序员手动释放无用内存。 C++同时支持方法重载和操作符重载，但是Java只支持方法重载。 1.4 基本数据类型 byte（8位）、short（16位）、int（32位）、long（64位）：默认值0 float（32位）、double（64位）：默认值0.0 char（16位）：默认值u0000 boolean（1位）：默认值false **包装类型：**包装类型变量不赋值则为null，对于包装类型，==比较的是内存地址，而不是值，所以需要用equals方法比较。占用空间包装类型更大一些，除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量。并且，包装类型可用于泛型，而基本类型不可以。\n包装类型的缓存： 非浮点数缓存范围是[-128, 127]，Character缓存范围位[0, 127]，Boolean则是true和false。\n包装类型的自动拆箱与装箱：\n装箱：将基本类型用对应的引用类型包装起来，本质调用包装类的ValutOf方法； 拆箱：将包装类型转换为基本数据类型，本质调用xxxValue方法； 为什么说是几乎所有对象实例都存在于堆中呢？ 这是因为 HotSpot 虚拟机引入了 JIT 优化之后，会对对象进行逃逸分析，如果发现某一个对象并没有逃逸到方法外部，那么就可能通过标量替换来实现栈上分配，而避免堆上分配内存。\n**浮点数运算精度丢失：**使用BigDecimal进行浮点运算。\n**超过Long整数类型的数据如何表示：**使用BigInteger进行表示，内部使用int[]数组进行存储任意大小的整形数据。\n1.5 深拷贝和浅拷贝 浅拷贝：在堆上创建一个新的对象，但是原对象内部属性如果是引用类型，则浅拷贝会直接复制原对象内部的引用地址。 深拷贝：完全复制整个对象。 引用拷贝：复制一个引用，指向原对象。 1.5 Objects 1.5.1 ==和equals方法 ==：如果是对象，则比较地址是否相同，基本类型则比较值。 object.equals()：没有重写的情况下，效果与==相同，String类型中的equals方法被重写过，会比较内部值是否相同。 1.5.2 hashCode()有什么用 获取int类型哈希码，hashCode相同时，两个对象不一定相等（哈希冲突），如果两个对象hashCode相等，并且equals返回true，才认为两个对象相等，如果两个对象hashCode不相等，则直接认为两个对象不相等。\n**为什么重写equals()时必须重写hashCode()？**因为两个相等的对象的 hashCode 值必须是相等。也就是说如果 equals 方法判断两个对象是相等的，那这两个对象的 hashCode 值也要相等。\n1.6 String 1.6.1 String、StringBuffer、StringBuilder区别 String是不可变的，线程安全，但是效率低。 StringBuffer是线程安全的，内部加了同步锁。 StringBuilder不是线程安全的，内部没有使用同步锁。 String内部使用final关键字修饰数组保存字符串，所以是不可变的，String使用+运算符连接字符串，底层会生成一个StringBuilder进行连接，但是不会进行复用，会导致创建过多的StringBuilder。\n1.6.2 字符串常量池 String s1 = new String(\u0026ldquo;abc\u0026rdquo;); 会创建几个字符串对象？\n2个：字符串常量池不存在这个字符串对象“abc”的引用，那么会在堆上创建两个字符串对象，其中一个字符串对象的引用会被保存在字符串常量池中。 1个：如果字符串常量池存在这个字符串对象的引用，那么只在堆中创建一个字符串对象，并引用到常量池中的字符串对象。 1.6.3 String#intern方法有什么用 String.intern()是一个native方法，用于将指定的字符串对象保存在字符串常量池中：\n如果字符串常量池已经保存了对应的字符串对象的引用，就直接返回该引用； 否则，创建一个指向该字符串对象的引用，并返回。 1.7 异常 Java中所有的异常都来自一个共同的祖先java.lang包中的Throwable类。\n不要在 finally 语句块中使用 return! 当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句会被忽略。这是因为 try 语句中的 return 返回值会先被暂存在一个本地变量中，当执行到 finally 语句中的 return 之后，这个本地变量的值就变为了 finally 语句中的 return 返回值。\n1.7.1 Exception和Error有什么区别？ Excpetion：程序本身可以处理的异常，可以通过catch捕获，又分为Checked Excpetion和Unchecked Exception。 Error：程序无法处理的异常。包括JVM运行错误，OOM，类定义错误等。 1.7.2 Checked Excpetion和Unchecked Exception有什么区别？ Checked Exception，受检异常，Java代码在编译过程中，如果发现该异常没有被catch或者throw，则无法通过编译。\n除了RuntimeException及其子类外，其他Exception都属于受检异常：如IO相关异常，ClassNotFoundException，SQLException等\nUnchecked Exception，不受检异常，Java代码在编译过程中，即使不处理也可以正常通过编译的异常：如NPE，IllegalArgumentException、NumberFormatException、ArrayIndexOutOfBoundsException等。均为RuntimeException的子类。\n1.7.3 finally中的代码一定会被执行吗？ 不一定，线程死亡，JVM终止，电脑宕机都不会执行。\n1.7.4 使用try-with-resources代替try-catch-finally来使用需要关闭的资源类。 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/new/java/1.java%E5%9F%BA%E7%A1%80/","summary":"\u003ch2 id=\"11-java程序从源代码到运行的过程\"\u003e1.1 Java程序从源代码到运行的过程\u003c/h2\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cul\u003e\n\u003cli\u003eJVM可以理解的代码就是字节码（.class），面向Java虚拟机，Java语言通过字节码的方式，在一定程度上解决传统解释性语言执行效率低的问题，同时又保留了解释性语言可移植的特性。\u003c/li\u003e\n\u003cli\u003e.class文件到机器码这一步，JVM加载器会首先加载字节码文件，然后通过解释器逐行执行，这种执行速度比较慢，并且有些代码和方法会被经常调用，所以引进了JIT（Just in Time Compilation），属于运行时便意，当JIT完成第一次遍以后，会将对应的机器码保存下来，下次直接使用。所以说Java是编译与解释共存的语言。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003ch2 id=\"12-aot-vs-jit\"\u003e1.2 AOT v.s. JIT\u003c/h2\u003e\n\u003cp\u003eAOT（Ahead of Time Compilation），在程序执行前就进行编译，属于静态便意，可以提高Java程序启动速度，避免预热时间过长，减少内存占用，增加程序安全性（AOT遍以后的代码不容易被反编译和修改），适合云原生场景。\u003c/p\u003e\n\u003cp\u003e但是AOT不支持反射、动态代理、动态加载和JNI（Java Native Interface），所以很多框架和库都无法使用。\u003c/p\u003e\n\u003ch2 id=\"13-java-vs-c\"\u003e1.3 Java v.s. C++\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eJava不提供指针直接访问内存\u003c/li\u003e\n\u003cli\u003eJava类是单继承，C++可以多继承，但是Java的接口可以多继承\u003c/li\u003e\n\u003cli\u003eJava有自动内存管理垃圾回收机制，不需要程序员手动释放无用内存。\u003c/li\u003e\n\u003cli\u003eC++同时支持方法重载和操作符重载，但是Java只支持方法重载。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"14-基本数据类型\"\u003e1.4 基本数据类型\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ebyte（8位）、short（16位）、int（32位）、long（64位）：默认值0\u003c/li\u003e\n\u003cli\u003efloat（32位）、double（64位）：默认值0.0\u003c/li\u003e\n\u003cli\u003echar（16位）：默认值u0000\u003c/li\u003e\n\u003cli\u003eboolean（1位）：默认值false\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e**包装类型：**包装类型变量不赋值则为null，对于包装类型，==比较的是内存地址，而不是值，所以需要用equals方法比较。占用空间包装类型更大一些，除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量。并且，包装类型可用于泛型，而基本类型不可以。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e包装类型的缓存：\u003c/strong\u003e 非浮点数缓存范围是[-128, 127]，Character缓存范围位[0, 127]，Boolean则是true和false。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e包装类型的自动拆箱与装箱：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e装箱：将基本类型用对应的引用类型包装起来，本质调用包装类的ValutOf方法；\u003c/li\u003e\n\u003cli\u003e拆箱：将包装类型转换为基本数据类型，本质调用xxxValue方法；\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e为什么说是几乎所有对象实例都存在于堆中呢？\u003c/strong\u003e 这是因为 HotSpot 虚拟机引入了 JIT 优化之后，会对对象进行逃逸分析，如果发现某一个对象并没有逃逸到方法外部，那么就可能通过标量替换来实现栈上分配，而避免堆上分配内存。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e**浮点数运算精度丢失：**使用BigDecimal进行浮点运算。\u003c/p\u003e\n\u003cp\u003e**超过Long整数类型的数据如何表示：**使用BigInteger进行表示，内部使用int[]数组进行存储任意大小的整形数据。\u003c/p\u003e\n\u003ch2 id=\"15-深拷贝和浅拷贝\"\u003e1.5 深拷贝和浅拷贝\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e浅拷贝：在堆上创建一个新的对象，但是原对象内部属性如果是引用类型，则浅拷贝会直接复制原对象内部的引用地址。\u003c/li\u003e\n\u003cli\u003e深拷贝：完全复制整个对象。\u003c/li\u003e\n\u003cli\u003e引用拷贝：复制一个引用，指向原对象。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003ch2 id=\"15-objects\"\u003e1.5 Objects\u003c/h2\u003e\n\u003ch4 id=\"151-和equals方法\"\u003e1.5.1 ==和equals方法\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e==：如果是对象，则比较地址是否相同，基本类型则比较值。\u003c/li\u003e\n\u003cli\u003eobject.equals()：没有重写的情况下，效果与==相同，String类型中的equals方法被重写过，会比较内部值是否相同。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"152-hashcode有什么用\"\u003e1.5.2 hashCode()有什么用\u003c/h4\u003e\n\u003cp\u003e获取int类型哈希码，hashCode相同时，两个对象不一定相等（哈希冲突），如果两个对象hashCode相等，并且equals返回true，才认为两个对象相等，如果两个对象hashCode不相等，则直接认为两个对象不相等。\u003c/p\u003e","title":"1.Java基础"},{"content":"1 索引基础 1.1 索引的分类 1.1.1 按数据结构分：B+Tree索引、Hash索引、Full-text索引 InnoDB支持B+Tree索引和Full-Text索引，不支持Hash索引但是内存结构中有一个自适应hash索引；\nMyISAM支持B+Tree索引和Full-Text索引，但是不支持Hash索引；\nMemory支持B+Tree索引和Hash索引，但是不支持Full-Text索引。\nInnoDB存储引擎在创建表时：如果有主键，会默认使用主键作为聚簇索引的索引键；如果没有主键，就会选择第一个不包含NULL值的唯一列所谓聚簇索引的索引键；如果都没有则会自动生成一个隐式自增ID作为聚簇索引键。\n其他索引都属于辅助索引，也称为二级索引或非聚簇索引。创建的主键索引和二级索引默认使用的都是B+Tree索引。B+Tree 相比于 B 树和二叉树来说，最大的优势在于查询效率很高，因为即使在数据量很大的情况，查询一个数据的磁盘 I/O 依然维持在 3-4次。\nB+Tree 是一种多叉树，叶子节点才存放数据，非叶子节点只存放索引，而且每个节点里的数据是按主键顺序存放的。每一层父节点的索引值都会出现在下层子节点的索引值中，因此在叶子节点中，包括了所有的索引值信息，并且每一个叶子节点都有两个指针，分别指向下一个叶子节点和上一个叶子节点，形成一个双向链表。\n主键索引的 B+Tree 和二级索引的 B+Tree 区别如下：\n主键索引的 B+Tree 的叶子节点存放的是实际数据，所有完整的用户记录都存放在主键索引的 B+Tree 的叶子节点里； 二级索引的 B+Tree 的叶子节点存放的是主键值，而不是实际数据。 通过二级索引查询会先检二级索引中的 B+Tree 的索引值，找到对应的叶子节点，然后获取主键值，然后再通过主键索引中的 B+Tree 树查询到对应的叶子节点，然后获取整行数据。这个过程叫「回表」，也就是说要查两个 B+Tree 才能查到数据。当查询的数据是能在二级索引的 B+Tree 的叶子节点里查询到，这时就不用再查主键索引查。这种在二级索引的 B+Tree 就能查询到结果的过程就叫作「覆盖索引」，也就是只需要查一个 B+Tree 就能找到数据。\n为什么InnoDB选择B+Tree作为索引的数据结构？\nB+Tree vs B Tree\nB+Tree 只在叶子节点存储数据，而 B 树 的非叶子节点也要存储数据，所以 B+Tree 的单个节点的数据量更小，在相同的磁盘 I/O 次数下，就能查询更多的节点。另外，B+Tree 叶子节点采用的是双链表连接，适合 MySQL 中常见的基于范围的顺序查找，而 B 树无法做到这一点。\nB+Tree vs 二叉树\n对于有 N 个叶子节点的 B+Tree，其搜索复杂度为O(logdN)，其中 d 表示节点允许的最大子节点个数为 d 个。\n在实际的应用当中， d 值是大于100的，这样就保证了，即使数据达到千万级别时，B+Tree 的高度依然维持在 34 层左右，也就是说一次数据查询操作只需要做 34 次的磁盘 I/O 操作就能查询到目标数据。\n而二叉树的每个父节点的儿子节点个数只能是 2 个，意味着其搜索复杂度为 O(logN)，这已经比 B+Tree 高出不少，因此二叉树检索到目标数据所经历的磁盘 I/O 次数要更多。\nB+Tree vs Hash\nHash 在做等值查询的时候效率贼快，搜索复杂度为 O(1)。\n但是 Hash 表不适合做范围查询，它更适合做等值的查询，这也是 B+Tree 索引要比 Hash 表索引有着更广泛的适用场景的原因。\n1.1.2 **按物理存储分：**聚簇索引、二级索引 从物理存储的角度来看，索引分为聚簇索引（主键索引）、二级索引（辅助索引）。\n这两个区别在前面也提到了：\n主键索引的 B+Tree 的叶子节点存放的是实际数据，所有完整的用户记录都存放在主键索引的 B+Tree 的叶子节点里； 二级索引的 B+Tree 的叶子节点存放的是主键值，而不是实际数据。 所以，在查询时使用了二级索引，如果查询的数据能在二级索引里查询的到，那么就不需要回表，这个过程就是覆盖索引。如果查询的数据不在二级索引里，就会先检索二级索引，找到对应的叶子节点，获取到主键值后，然后再检索主键索引，就能查询到数据了，这个过程就是回表。\n1.1.3 **按字段特性分：**主键索引、唯一索引、普通索引 主键索引就是建立在主键字段上的索引，通常在创建表的时候一起创建，一张表最多只有一个主键索引，索引列的值不允许有空值。\n唯一索引建立在 UNIQUE 字段上的索引，一张表可以有多个唯一索引，索引列的值必须唯一，但是允许有空值。\n普通索引就是建立在普通字段上的索引，既不要求字段为主键，也不要求字段为 UNIQUE。\n前缀索引是指对字符类型字段的前几个字符建立的索引，而不是在整个字段上建立的索引，前缀索引可以建立在字段类型为 char、 varchar、binary、varbinary 的列上。使用前缀索引的目的是为了减少索引占用的存储空间，提升查询效率。\n1.1.4 **按字段个数分：**单列索引、联合索引 从字段个数的角度来看，索引分为单列索引、联合索引（复合索引）。\n建立在单列上的索引称为单列索引，比如主键索引； 建立在多列上的索引称为联合索引； 使用联合索引时，存在最左匹配原则，也就是按照最左优先的方式进行索引的匹配。在使用联合索引进行查询的时候，如果不遵循「最左匹配原则」，联合索引会失效，这样就无法利用到索引快速查询的特性了。\n联合索引的最左匹配原则会一直向右匹配直到遇到「范围查询」就会停止匹配。\nQ1: select * from t_table where a \u0026gt; 1 and b = 2，联合索引（a, b）哪一个字段用到了联合索引的 B+Tree？a\nQ2: select * from t_table where a \u0026gt;= 1 and b = 2，联合索引（a, b）哪一个字段用到了联合索引的 B+Tree？a和b\nQ3: SELECT * FROM t_table WHERE a BETWEEN 2 AND 8 AND b = 2，联合索引（a, b）哪一个字段用到了联合索引的 B+Tree？a和b\nQ4: SELECT * FROM t_user WHERE name like 'j%' and age = 22，联合索引（name, age）哪一个字段用到了联合索引的 B+Tree？name和age\n联合索引的最左匹配原则，在遇到范围查询（如 \u0026gt;、\u0026lt;）的时候，就会停止匹配，也就是范围查询的字段可以用到联合索引，但是在范围查询字段的后面的字段无法用到联合索引。注意，对于 \u0026gt;=、\u0026lt;=、BETWEEN、like 前缀匹配的范围查询，并不会停止匹配。\n1.2 索引下堆 对于联合索引（a, b），在执行 select * from table where a \u0026gt; 1 and b = 2 语句的时候，只有 a 字段能用到索引，那在联合索引的 B+Tree 找到第一个满足条件的主键值（ID 为 2）后，还需要判断其他条件是否满足（看 b 是否等于 2），那是在联合索引里判断？还是回主键索引去判断呢？\n在 MySQL 5.6 之前，只能从 ID2 （主键值）开始一个个回表，到「主键索引」上找出数据行，再对比 b 字段值。 而 MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在联合索引遍历过程中，对联合索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。 当你的查询语句的执行计划里，出现了 Extra 为 Using index condition，那么说明使用了索引下推的优化。\n1.3 索引区分度 建立联合索引时的字段顺序，对索引效率也有很大影响。越靠前的字段被用于索引过滤的概率越高，实际开发工作中建立联合索引时，要把区分度大的字段排在前面，这样区分度大的字段越有可能被更多的 SQL 使用到。\n区分度就是某个字段 column 不同值的个数「除以」表的总行数\n1.4 联合索引进行排序 针对select * from order where status = 1 order by create_time asc这条SQL，\n给 status 和 create_time 列建立一个联合索引，因为这样可以避免 MySQL 数据库发生文件排序。因为在查询时，如果只用到 status 的索引，但是这条语句还要对 create_time 排序，这时就要用文件排序 filesort，也就是在 SQL 执行计划中，Extra 列会出现 Using filesort。\n1.5 什么时候需要建索引，什么时候不需要？ 索引需要占用物理空间，创建索引和维护索引要耗费时间，会降低表的增删改的效率。\n什么时候适用索引？\n字段有唯一性限制的，比如商品编码； 经常用于 WHERE 查询条件的字段，这样能够提高整个表的查询速度，如果查询条件不是一个字段，可以建立联合索引。 经常用于 GROUP BY 和 ORDER BY 的字段，这样在查询的时候就不需要再去做一次排序了，因为我们都已经知道了建立索引之后在 B+Tree 中的记录都是排序好的。 什么时候不需要创建索引？\nWHERE 条件，GROUP BY，ORDER BY 里用不到的字段，索引的价值是快速定位，如果起不到定位的字段通常是不需要创建索引的，因为索引是会占用物理空间的。 字段中存在大量重复数据，不需要创建索引，比如性别字段，只有男女，如果数据库表中，男女的记录分布均匀，那么无论搜索哪个值都可能得到一半的数据。在这些情况下，还不如不要索引，因为 MySQL 还有一个查询优化器，查询优化器发现某个值出现在表的数据行中的百分比很高的时候，它一般会忽略索引，进行全表扫描。 表数据太少的时候，不需要创建索引； 经常更新的字段不用创建索引，比如不要对电商项目的用户余额建立索引，因为索引字段频繁修改，由于要维护 B+Tree的有序性，那么就需要频繁的重建索引，这个过程是会影响数据库性能的。 2 索引优化 2.1 前缀索引优化 前缀索引顾名思义就是使用某个字段中字符串的前几个字符建立索引，那我们为什么需要使用前缀来建立索引呢？\n使用前缀索引是为了减小索引字段大小，可以增加一个索引页中存储的索引值，有效提高索引的查询速度。在一些大字符串的字段作为索引时，使用前缀索引可以帮助我们减小索引项的大小。\n不过，前缀索引有一定的局限性，例如：\norder by 就无法使用前缀索引； 无法把前缀索引用作覆盖索引； 2.2 覆盖索引优化 覆盖索引是指 SQL 中 query 的所有字段，在索引 B+Tree 的叶子节点上都能找得到的那些索引，从二级索引中查询得到记录，而不需要通过聚簇索引查询获得，可以避免回表的操作。\n假设我们只需要查询商品的名称、价格，有什么方式可以避免回表呢？\n我们可以建立一个联合索引，即「商品ID、名称、价格」作为一个联合索引。如果索引中存在这些数据，查询将不会再次检索主键索引，从而避免回表。\n所以，使用覆盖索引的好处就是，不需要查询出包含整行记录的所有信息，也就减少了大量的 I/O 操作。\n2.3 主键索引最好是递增的 如果我们使用自增主键，那么每次插入的新数据就会按顺序添加到当前索引节点的位置，不需要移动已有的数据，当页面写满，就会自动开辟一个新页面。因为每次插入一条新记录，都是追加操作，不需要重新移动数据，因此这种插入数据的方法效率非常高。\n如果我们使用非自增主键，由于每次插入主键的索引值都是随机的，因此每次插入新的数据时，就可能会插入到现有数据页中间的某个位置，这将不得不移动其它数据来满足新数据的插入，甚至需要从一个页面复制数据到另外一个页面，我们通常将这种情况称为页分裂。页分裂还有可能会造成大量的内存碎片，导致索引结构不紧凑，从而影响查询效率。\n另外，主键字段的长度不要太大，因为主键字段长度越小，意味着二级索引的叶子节点越小（二级索引的叶子节点存放的数据是主键值），这样二级索引占用的空间也就越小。\n2.4 索引最好设置为NOT NULL 为了更好的利用索引，索引列要设置为 NOT NULL 约束。有两个原因：\n第一原因：索引列存在 NULL 就会导致优化器在做索引选择的时候更加复杂，更加难以优化，因为可为 NULL 的列会使索引、索引统计和值比较都更复杂，比如进行索引统计时，count 会省略值为NULL 的行。 第二个原因：NULL 值是一个没意义的值，但是它会占用物理空间，所以会带来的存储空间的问题，因为 InnoDB 存储记录的时候，如果表中存在允许为 NULL 的字段，那么行格式中至少会用 1 字节空间存储 NULL 值列表，如下图的紫色部分： 2.5 防止索引失效 失效的情况：\n当我们使用左或者左右模糊匹配的时候，也就是 like %xx 或者 like %xx%这两种方式都会造成索引失效； 当我们在查询条件中对索引列做了计算、函数、类型转换操作，这些情况下都会造成索引失效； 联合索引要能正确使用需要遵循最左匹配原则，也就是按照最左优先的方式进行索引的匹配，否则就会导致索引失效。 在 WHERE 子句中，如果在 OR 前的条件列是索引列，而在 OR 后的条件列不是索引列，那么索引会失效。 执行计划：\npossible_keys 字段表示可能用到的索引； key 字段表示实际用的索引，如果这一项为 NULL，说明没有使用索引； key_len 表示索引的长度； rows 表示扫描的数据行数。 type 表示数据扫描类型，我们需要重点看这个。 Type：\nAll（全表扫描） index（全索引扫描）：和All差不多，但是不需要排序 range（索引范围扫描）：只检索给定范围的行 ref（非唯一索引扫描）：采用了非唯一索引，或者是唯一索引的非唯一性前缀。因为虽然使用了索引，但该索引列的值并不唯一，有重复。这样即使使用索引快速查找到了第一条数据，仍然不能停止，要进行目标值附近的小范围扫描。但它的好处是它并不需要扫全表，因为索引是有序的，即便有重复值，也是在一个非常小的范围内扫描。 eq_ref（唯一索引扫描）：使用主键或唯一索引时产生的访问方式，通常使用在多表联查中。比如，对两张表进行联查，关联条件是两张表的 user_id 相等，且 user_id 是唯一索引，那么使用 EXPLAIN 进行执行计划查看的时候，type 就会显示 eq_ref。 const（结果只有一条的主键或唯一索引扫描）：表示使用了主键或者唯一索引与常量值进行比较。 需要说明的是 const 类型和 eq_ref 都使用了主键或唯一索引，不过这两个类型有所区别，const 是与常量进行比较，查询效率会更快，而 eq_ref 通常用于多表联查中。\nExtra：\nUsing filesort ：当查询语句中包含 group by 操作，而且无法利用索引完成排序操作的时候， 这时不得不选择相应的排序算法进行，甚至可能会通过文件排序，效率是很低的，所以要避免这种问题的出现。 Using temporary：使了用临时表保存中间结果，MySQL 在对查询结果排序时使用临时表，常见于排序 order by 和分组查询 group by。效率低，要避免这种问题的出现。 Using index：所需数据只需在索引即可全部获得，不须要再到表中取数据，也就是使用了覆盖索引，避免了回表操作，效率不错。 3 从数据页的角度看B+树 3.1 InnoDB如何存储数据 InnoDB按数据页为单位进行读写，数据页的默认大小是16KB。\n文件头：表示页的信息 页头：表示页的状态 最小和最大记录：两个虚拟的伪记录，分别记录页中最小和最大记录 用户记录：存储行记录内容 空闲空间：页中还未使用的空间 页目录：存储用户记录的相对位置，对记录起到索引作用 文件尾：校验页是否完整 在 File Header 中有两个指针，分别指向上一个数据页和下一个数据页，连接起来的页相当于一个双向的链表。\n数据页中的记录按照「主键」顺序组成单向链表，单向链表的特点就是插入、删除非常方便，但是检索效率不高，最差的情况下需要遍历链表上的所有节点才能完成检索。\n页目录与记录的关系如下\n将所有的记录划分成几个组，这些记录包括最小记录和最大记录，但不包括标记为“已删除”的记录； 每个记录组的最后一条记录就是组内最大的那条记录，并且最后一条记录的头信息中会存储该组一共有多少条记录，作为 n_owned 字段 页目录用来存储每组最后一条记录的地址偏移量，这些地址偏移量会按照先后顺序存储起来，每组的地址偏移量也被称之为槽（slot），每个槽相当于指针指向了不同组的最后一个记录。 从图可以看到，页目录就是由多个槽组成的，槽相当于分组记录的索引。然后，因为记录是按照「主键值」从小到大排序的，所以我们通过槽查找记录时，可以使用二分法快速定位要查询的记录在哪个槽（哪个记录分组），定位到槽后，再遍历槽内的所有记录，找到对应的记录，无需从最小记录开始遍历整个页中的记录链表。\nInnoDB 对每个分组中的记录条数都是有规定的，槽内的记录就只有几条：\n第一个分组中的记录只能有 1 条记录； 最后一个分组中的记录条数范围只能在 1-8 条之间； 剩下的分组中记录条数范围只能在 4-8 条之间。 3.2 B+树是如何进行查询的 InnoDB 采用了 B+ 树作为索引。磁盘的 I/O 操作次数对索引的使用效率至关重要，因此在构造索引的时候，我们更倾向于采用“矮胖”的 B+ 树数据结构，这样所需要进行的磁盘 I/O 次数更少，而且 B+ 树 更适合进行关键字的范围查询。\nInnoDB 里的 B+ 树中的每个节点都是一个数据页\n只有叶子节点（最底层的节点）才存放了数据，非叶子节点（其他上层节）仅用来存放目录项作为索引。 非叶子节点分为不同层次，通过分层来降低每一层的搜索量； 所有节点按照索引键大小排序，构成一个双向链表，便于范围查询； B+ 树如何实现快速查找主键为 6 的记录，以上图为例子：\n从根节点开始，通过二分法快速定位到符合页内范围包含查询值的页，因为查询的主键值为 6，在[1, 7)范围之间，所以到页 30 中查找更详细的目录项； 在非叶子节点（页30）中，继续通过二分法快速定位到符合页内范围包含查询值的页，主键值大于 5，所以就到叶子节点（页16）查找记录； 接着，在叶子节点（页16）中，通过槽查找记录时，使用二分法快速定位要查询的记录在哪个槽（哪个记录分组），定位到槽后，再遍历槽内的所有记录，找到主键为 6 的记录。 可以看到，在定位记录所在哪一个页时，也是通过二分法快速定位到包含该记录的页。定位到该页后，又会在该页内进行二分法快速定位记录所在的分组（槽号），最后在分组内进行遍历查找。\n3.3 聚簇索引和二级索引 聚簇索引的叶子节点存放的是实际数据，所有完整的用户记录都存放在聚簇索引的叶子节点； 二级索引的叶子节点存放的是主键值，而不是实际数据。 因为表的数据都是存放在聚簇索引的叶子节点里，所以 InnoDB 存储引擎一定会为表创建一个聚簇索引，且由于数据在物理上只会保存一份，所以聚簇索引只能有一个。\nInnoDB 在创建聚簇索引时，会根据不同的场景选择不同的列作为索引：\n如果有主键，默认会使用主键作为聚簇索引的索引键； 如果没有主键，就选择第一个不包含 NULL 值的唯一列作为聚簇索引的索引键； 在上面两个都没有的情况下，InnoDB 将自动生成一个隐式自增 id 列作为聚簇索引的索引键。 一张表只能有一个聚簇索引，那为了实现非主键字段的快速搜索，就引出了二级索引（非聚簇索引/辅助索引），它也是利用了 B+ 树的数据结构，但是二级索引的叶子节点存放的是主键值，不是实际数据。\n如果某个查询语句使用了二级索引，但是查询的数据不是主键值，这时在二级索引找到主键值后，需要去聚簇索引中获得数据行，这个过程就叫作「回表」，也就是说要查两个 B+ 树才能查到数据。不过，当查询的数据是主键值时，因为只在二级索引就能查询到，不用再去聚簇索引查，这个过程就叫作「索引覆盖」，也就是只需要查一个 B+ 树就能找到数据。\n4 为什么MySQL采用B+树作为索引 磁盘读写的最小单位是扇区，扇区的大小只有 512B 大小，操作系统一次会读写多个扇区，所以操作系统的最小读写单位是块（Block）。Linux 中的块大小为 4KB，也就是一次磁盘 I/O 操作会直接读写 8 个扇区。\n由于数据库的索引是保存到磁盘上的，因此当我们通过索引查找某行数据的时候，就需要先从磁盘读取索引到内存，再通过索引从磁盘中找到某行数据，然后读入到内存，也就是说查询过程中会发生多次磁盘 I/O，而磁盘 I/O 次数越多，所消耗的时间也就越大。\n所以，我们希望索引的数据结构能在尽可能少的磁盘的 I/O 操作中完成查询工作，因为磁盘 I/O 操作越少，所消耗的时间也就越小。\n另外，MySQL 是支持范围查找的，所以索引的数据结构不仅要能高效地查询某一个记录，而且也要能高效地执行范围查找。\n二分查找树：二叉查找树的特点是一个节点的左子树的所有节点都小于这个节点，右子树的所有节点都大于这个节点，当每次插入的元素都是二叉查找树中最大的元素，二叉查找树就会退化成了一条链表，查找数据的时间复杂度变成了 O(n)，树的高度就等于每次查询数据时磁盘 IO 操作的次数。\n自平衡二叉树：每个节点的左子树和右子树的高度差不能超过 1，会自动进行调整，不管平衡二叉查找树还是红黑树，都会随着插入的元素增多，而导致树的高度变高，这就意味着磁盘 I/O 操作次数多，会影响整体数据查询的效率。\n红黑树：\nB树：不再限制一个节点就只能有 2 个子节点，而是允许 M 个子节点 (M\u0026gt;2)，从而降低树的高度。B 树的每一个节点最多可以包括 M 个子节点，M 称为 B 树的阶，所以 B 树就是一个多叉树。\nB 树的每个节点都包含数据（索引+记录），而用户的记录数据的大小很有可能远远超过了索引数据，这就需要花费更多的磁盘 I/O 操作次数来读到「有用的索引数据」。 查询位于底层的某个节点（比如 A 记录）过程中，「非 A 记录节点」里的记录数据会从磁盘加载到内存，但是这些记录数据是没用的，我们只是想读取这些节点的索引数据来做比较查询，而「非 A 记录节点」里的记录数据对我们是没用的，这样不仅增多磁盘 I/O 操作次数，也占用内存资源。 如果使用 B 树来做范围查询的话，需要使用中序遍历，这会涉及多个节点的磁盘 I/O 问题，从而导致整体速度下降。 B+树：\n叶子节点（最底部的节点）才会存放实际数据（索引+记录），非叶子节点只会存放索引； 所有索引都会在叶子节点出现，叶子节点之间构成一个有序链表； 非叶子节点的索引也会同时存在在子节点中，并且是在子节点中所有索引的最大（或最小）。 非叶子节点中有多少个子节点，就有多少个索引； 1）单点查询效率：B+ 树的非叶子节点不存放实际的记录数据，仅存放索引，因此数据量相同的情况下，相比存储即存索引又存记录的 B 树，B+树的非叶子节点可以存放更多的索引，因此 B+ 树可以比 B 树更「矮胖」，查询底层节点的磁盘 I/O次数会更少。\n2）插入和删除效率：B+ 树有大量的冗余节点，这样使得删除一个节点的时候，可以直接从叶子节点中删除，甚至可以不动非叶子节点，这样删除非常快。B+ 树的插入也是一样，有冗余节点，插入可能存在节点的分裂（如果节点饱和），但是最多只涉及树的一条路径。而且 B+ 树会自动平衡，不需要像更多复杂的算法，类似红黑树的旋转操作等。\n3）范围查询：因为 B+ 树所有叶子节点间还有一个链表进行连接，这种设计对范围查找非常有帮助。因此，存在大量范围检索的场景，适合使用 B+树，比如数据库。而对于大量的单个索引查询的场景，可以考虑 B 树，比如 nosql 的MongoDB。\n5 索引失效 对索引使用左或左右模糊匹配： like %xx 或者 like %xx% 这两种方式，因为索引 B+ 树是按照「索引值」有序排列存储的，只能根据前缀进行比较。\nMySQL 使用 like “%x“，索引一定会失效吗？ | 小林coding (xiaolincoding.com)\n如果表中只有两个字段，并且都是索引列，一个为主键字段，一个为要模糊匹配的字段，那么如果使用模糊匹配，会走覆盖索引，type=index，也就是扫描了整个索引树。\n扫描的索引树是二级索引树，不扫描聚簇索引是因为聚簇索引记录的东西会更多，比如聚簇索引中的叶子节点则记录了主键值、事务 id、用于事务和 MVCC 的回滚指针以及所有的剩余列。\n对索引使用函数：因为索引保存的是索引字段的原始值，而不是经过函数计算后的值，自然就没办法走索引了。\n不过，从 MySQL 8.0 开始，索引特性增加了函数索引，即可以针对函数计算后的值建立一个索引，也就是说该索引的值是函数计算后的值，所以就可以通过扫描索引来查询数据。\n对索引进行表达式计算：select * from t_user where id + 1 = 10;会导致索引失效，但是改成 where id = 10 - 1就可以走索引进行查询了。\n对索引进行隐式类型转换：例如1）varchar类型的字段，但是在where子句中使用整形输入作为匹配条件，结果会导致走全表进行扫描。但是2）如果索引字段是整型类型，查询条件中的输入参数即使字符串，是不会导致索引失效，还是可以走索引扫描。\nMySQL 在遇到字符串和数字比较的时候，会自动把字符串转为数字，然后再进行比较。所以1）中相当于对索引使用了函数，而2）中将入参做了转换，所以会走索引。\n联合索引非最左匹配：在联合索引的情况下，数据是按照索引第一列排序，第一列数据相同时才会按照第二列排序。\n也就是说，如果我们想使用联合索引中尽可能多的列，查询条件中的各个列必须是联合索引中从最左边开始连续的列。如果我们仅仅按照第二列搜索，肯定无法走索引。\nWhere子句中的OR：在 WHERE 子句中，如果在 OR 前的条件列是索引列，而在 OR 后的条件列不是索引列，那么索引会失效。\n其他 MySQL单表存储数据最好不要超过2000W行;\ncount性能排序：count(*) \u0026gt; count(1) \u0026gt; count(主键字段) \u0026gt; count(字段)\ncount()统计符合查询条件的记录中，函数指定的参数不为 NULL 的记录有多少个，count(1)由于1是单纯的数字，永远不为NULL，所以count(1)作用是统计有多少条记录。\ncount(*)等于count(0)，MySQL会将 * 参数转化为参数 0 来处理。所以，count(*) 执行过程跟 count(1) 执行过程基本一样的，性能没有什么差异。而且 MySQL 会对 count(*) 和 count(1) 有个优化，如果有多个二级索引的时候，优化器会使用key_len 最小的二级索引进行扫描。\n","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/new/%E6%95%B0%E6%8D%AE%E5%BA%93/2.index/","summary":"\u003ch2 id=\"1-索引基础\"\u003e1 索引基础\u003c/h2\u003e\n\u003ch4 id=\"11-索引的分类\"\u003e1.1 索引的分类\u003c/h4\u003e\n\u003ch5 id=\"111-按数据结构分btree索引hash索引full-text索引\"\u003e1.1.1 按数据结构分：B+Tree索引、Hash索引、Full-text索引\u003c/h5\u003e\n\u003cp\u003eInnoDB支持B+Tree索引和Full-Text索引，不支持Hash索引但是内存结构中有一个自适应hash索引；\u003c/p\u003e\n\u003cp\u003eMyISAM支持B+Tree索引和Full-Text索引，但是不支持Hash索引；\u003c/p\u003e\n\u003cp\u003eMemory支持B+Tree索引和Hash索引，但是不支持Full-Text索引。\u003c/p\u003e\n\u003cp\u003eInnoDB存储引擎在创建表时：如果有主键，会默认使用主键作为聚簇索引的索引键；如果没有主键，就会选择第一个不包含NULL值的唯一列所谓聚簇索引的索引键；如果都没有则会自动生成一个隐式自增ID作为聚簇索引键。\u003c/p\u003e\n\u003cp\u003e其他索引都属于辅助索引，也称为二级索引或非聚簇索引。创建的主键索引和二级索引默认使用的都是B+Tree索引。\u003cstrong\u003eB+Tree 相比于 B 树和二叉树来说，最大的优势在于查询效率很高，因为即使在数据量很大的情况，查询一个数据的磁盘 I/O 依然维持在 3-4次。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eB+Tree 是一种多叉树，叶子节点才存放数据，非叶子节点只存放索引，而且每个节点里的数据是\u003cstrong\u003e按主键顺序存放\u003c/strong\u003e的。每一层父节点的索引值都会出现在下层子节点的索引值中，因此在叶子节点中，包括了所有的索引值信息，并且每一个叶子节点都有两个指针，分别指向下一个叶子节点和上一个叶子节点，形成一个双向链表。\u003c/p\u003e\n\u003cp\u003e主键索引的 B+Tree 和二级索引的 B+Tree 区别如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e主键索引的 B+Tree 的叶子节点存放的是实际数据，所有完整的用户记录都存放在主键索引的 B+Tree 的叶子节点里；\u003c/li\u003e\n\u003cli\u003e二级索引的 B+Tree 的叶子节点存放的是主键值，而不是实际数据。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e通过二级索引查询会先检二级索引中的 B+Tree 的索引值，找到对应的叶子节点，然后获取主键值，然后再通过主键索引中的 B+Tree 树查询到对应的叶子节点，然后获取整行数据。\u003cstrong\u003e这个过程叫「回表」，也就是说要查两个 B+Tree 才能查到数据\u003c/strong\u003e。当查询的数据是能在二级索引的 B+Tree 的叶子节点里查询到，这时就不用再查主键索引查。\u003cstrong\u003e这种在二级索引的 B+Tree 就能查询到结果的过程就叫作「覆盖索引」，也就是只需要查一个 B+Tree 就能找到数据\u003c/strong\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e为什么InnoDB选择B+Tree作为索引的数据结构？\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eB+Tree vs B Tree\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eB+Tree 只在叶子节点存储数据，而 B 树 的非叶子节点也要存储数据，所以 B+Tree 的单个节点的数据量更小，在相同的磁盘 I/O 次数下，就能查询更多的节点。另外，B+Tree 叶子节点采用的是双链表连接，适合 MySQL 中常见的基于范围的顺序查找，而 B 树无法做到这一点。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eB+Tree vs 二叉树\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e对于有 N 个叶子节点的 B+Tree，其搜索复杂度为\u003ccode\u003eO(logdN)\u003c/code\u003e，其中 d 表示节点允许的最大子节点个数为 d 个。\u003c/p\u003e","title":"2.Index"},{"content":" 2.1 集合（容器） 主要由两大借口派生而来：一个是Collection、一个是Map，而Collection下还有List、Set、Queue。\nList：存储的元素是有序的，可重复的 Set：存储的元素是不可重复的 Queue：存储元素有序、可重复，按照特定排队规则确定先后顺序 Map：使用键值对存储，key无序、不可重复，value无序、可重复。 2.2 集合框架底层数据结构 List ArrayList：Objects数组 Vector：Objects数组 LinkedList：双向链表 Set HashSet：基于HashMap实现 LinkedHashSet：基于LinkedHashMap实现 TreeSet：基于红黑树实现 Queue PriorityQueue：Object数组实现的小顶堆 DelayQueue：基于Priority实现 ArrayDeque：可扩容双向数组 Map HashMap：JDK1.8之前由数组+链表组成，JDK1.8后，链表长度大于8时，转换为红黑树。 LinkedHashMap：继承自HashMap，底层与HashMap相同，不同的是增加了双向链表，使得上面的接口可以保持键值对插入的顺序。 HashTable：数组+链表组成，链表主要为了解决Hash冲突 TreeMap：红黑树 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/new/java/2.java%E9%9B%86%E5%90%88/","summary":"\u003c!-- raw HTML omitted --\u003e\n\u003ch2 id=\"21-集合容器\"\u003e2.1 集合（容器）\u003c/h2\u003e\n\u003cp\u003e主要由两大借口派生而来：一个是Collection、一个是Map，而Collection下还有List、Set、Queue。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eList：存储的元素是有序的，可重复的\u003c/li\u003e\n\u003cli\u003eSet：存储的元素是不可重复的\u003c/li\u003e\n\u003cli\u003eQueue：存储元素有序、可重复，按照特定排队规则确定先后顺序\u003c/li\u003e\n\u003cli\u003eMap：使用键值对存储，key无序、不可重复，value无序、可重复。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"22-集合框架底层数据结构\"\u003e2.2 集合框架底层数据结构\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eList\n\u003cul\u003e\n\u003cli\u003eArrayList：Objects数组\u003c/li\u003e\n\u003cli\u003eVector：Objects数组\u003c/li\u003e\n\u003cli\u003eLinkedList：双向链表\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSet\n\u003cul\u003e\n\u003cli\u003eHashSet：基于HashMap实现\u003c/li\u003e\n\u003cli\u003eLinkedHashSet：基于LinkedHashMap实现\u003c/li\u003e\n\u003cli\u003eTreeSet：基于红黑树实现\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eQueue\n\u003cul\u003e\n\u003cli\u003ePriorityQueue：Object数组实现的小顶堆\u003c/li\u003e\n\u003cli\u003eDelayQueue：基于Priority实现\u003c/li\u003e\n\u003cli\u003eArrayDeque：可扩容双向数组\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eMap\n\u003cul\u003e\n\u003cli\u003eHashMap：JDK1.8之前由数组+链表组成，JDK1.8后，链表长度大于8时，转换为红黑树。\u003c/li\u003e\n\u003cli\u003eLinkedHashMap：继承自HashMap，底层与HashMap相同，不同的是增加了双向链表，使得上面的接口可以保持键值对插入的顺序。\u003c/li\u003e\n\u003cli\u003eHashTable：数组+链表组成，链表主要为了解决Hash冲突\u003c/li\u003e\n\u003cli\u003eTreeMap：红黑树\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"2.Java集合"},{"content":"3.1 线程 3.1.1 生命周期和状态 线程的上下文切换： 主动让出CPU：调用sleep、wait函数 时间片用完 调用了阻塞类型的系统中断 被终止或者结束运行 Thread#sleep()方法和Object#wait()方法对比： 两者都可以暂停线程的运行 sleep方法没有释放锁，而wait方法释放了锁 wait用于线程之间交互通信，而sleep主要用于暂停执行 wait方法执行后，线程不会主动苏醒，需要别的线程调用同一个对象上的notify或者notifyAll方法。sleep方法会主动苏醒，或者使用wait(long timeout)超时后也会主动苏醒。 sleep()是Thread类的静态本地方法，而wait是Object类的本地方法。 为什么wait方法不定义在Thread中？ wait方法是为了让获得对象锁的线程实现等待，会自动释放当前线程占有的对象锁，每个对象都拥有对象锁，既然要释放当前线程占有的对象锁并让其进入等待状态，自然应该操作对应的对象，而不是当前线程。\n3.2 Volatile和Synchronized关键字 3.2.1 volatile关键字 volatile关键字可以保证变量的可见性，指示JVM这个共享变量是不稳定的，每次使用时都需要去主存中进行读取，但是volatile关键字不保证数据的原子性。\nvolatile关键字还可以防止JVM 的指令重拍，对修饰的变量进行读写时，会插入特定的内存屏障禁止指令重排序。\n3.2.2 synchronized关键字 synchronized关键字早期属于重量级锁，因为其底层monitor（监视器锁）基于操作系统的Mutex Lock实现，需要进行用户态和内核态的切换，Java 6之后对synchronized引入了大量的优化来减少锁操作的开销。\nsynchronized可以对对象加锁，修饰静态方法，修饰代码块。构造方法不能使用synchronized关键字，因为构造方法本身是线程安全的，但是如果构造方法中使用了共享资源，可以在构造方法内使用synchronized关键字修饰代码块。\n3.2.3 synchronized和violatile的区别 volatile关键字是线程同步的轻量级实现，volatile关键字只能用于变量，而synchronized关键字可以修饰方法和代码块。 volatile关键字能保证数据的可见性，但是无法保证数据的原子性，synchronized两者都可以保证。 【可见性】避免读取变量在缓存中的旧值，而是强制读取主存中的新值。 3.3 乐观锁和悲观锁 3.3.1 悲观锁 假设最坏情况，访问共享资源时，先获取锁。\nsynchronized和ReentrantLock等独占锁都是悲观锁思想的实现。\n3.3.2 乐观锁 假设最好情况，访问访问共享资源时不需要获取锁，提交修改时验证资源是否发生了冲突。\n可以通过CAS机制或版本号机制实现乐观锁。\nCAS机制依赖于CPU的原子指令，但是无法避免ABA问题。\n3.3.3 ReentrantLock ReentrantLock实现了Lock接口，有一个内部类Sync，Sync继承AQS（AbstractQueuedSynchronizer），而Sync有公平锁和非公平锁两个子类。ReentrantLock默认使用非公平锁。\n公平锁保证按照申请顺序获取锁。 非公平锁不保证按照申请顺序获取锁，可能会出现饿死的情况。 3.3.4 synchronized和ReentrantLock有什么区别？ 两者都是可重入锁 synchronized依赖于JVM，而ReentrantLock依赖于API ReentrantLock比synchronized增加了一些高级功能：等待可中断、可实现公平锁，可实现选择性通知。 写锁可以降级为读锁，但是读锁不能升级为写锁，为了避免死锁的情况。\n3.4 TreadLocal 3.5 线程池 3.6 Future 3.7 AQS ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/new/java/3.juc/","summary":"\u003ch2 id=\"31-线程\"\u003e3.1 线程\u003c/h2\u003e\n\u003ch4 id=\"311-生命周期和状态\"\u003e3.1.1 生命周期和状态\u003c/h4\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003ch5 id=\"线程的上下文切换\"\u003e线程的上下文切换：\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e主动让出CPU：调用sleep、wait函数\u003c/li\u003e\n\u003cli\u003e时间片用完\u003c/li\u003e\n\u003cli\u003e调用了阻塞类型的系统中断\u003c/li\u003e\n\u003cli\u003e被终止或者结束运行\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"threadsleep方法和objectwait方法对比\"\u003eThread#sleep()方法和Object#wait()方法对比：\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e两者都可以暂停线程的运行\u003c/li\u003e\n\u003cli\u003esleep方法没有释放锁，而wait方法释放了锁\u003c/li\u003e\n\u003cli\u003ewait用于线程之间交互通信，而sleep主要用于暂停执行\u003c/li\u003e\n\u003cli\u003ewait方法执行后，线程不会主动苏醒，需要别的线程调用同一个对象上的notify或者notifyAll方法。sleep方法会主动苏醒，或者使用wait(long timeout)超时后也会主动苏醒。\u003c/li\u003e\n\u003cli\u003esleep()是Thread类的静态本地方法，而wait是Object类的本地方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"为什么wait方法不定义在thread中\"\u003e为什么wait方法不定义在Thread中？\u003c/h5\u003e\n\u003cp\u003ewait方法是为了让获得对象锁的线程实现等待，会自动释放当前线程占有的对象锁，每个对象都拥有对象锁，既然要释放当前线程占有的对象锁并让其进入等待状态，自然应该操作对应的对象，而不是当前线程。\u003c/p\u003e\n\u003ch2 id=\"32-volatile和synchronized关键字\"\u003e3.2 Volatile和Synchronized关键字\u003c/h2\u003e\n\u003ch4 id=\"321-volatile关键字\"\u003e3.2.1 volatile关键字\u003c/h4\u003e\n\u003cp\u003evolatile关键字可以保证变量的可见性，指示JVM这个共享变量是不稳定的，每次使用时都需要去主存中进行读取，但是volatile关键字不保证数据的原子性。\u003c/p\u003e\n\u003cp\u003evolatile关键字还可以防止JVM 的指令重拍，对修饰的变量进行读写时，会插入特定的内存屏障禁止指令重排序。\u003c/p\u003e\n\u003ch4 id=\"322-synchronized关键字\"\u003e3.2.2 synchronized关键字\u003c/h4\u003e\n\u003cp\u003esynchronized关键字早期属于重量级锁，因为其底层monitor（监视器锁）基于操作系统的Mutex Lock实现，需要进行用户态和内核态的切换，Java 6之后对synchronized引入了大量的优化来减少锁操作的开销。\u003c/p\u003e\n\u003cp\u003esynchronized可以对对象加锁，修饰静态方法，修饰代码块。构造方法不能使用synchronized关键字，因为构造方法本身是线程安全的，但是如果构造方法中使用了共享资源，可以在构造方法内使用synchronized关键字修饰代码块。\u003c/p\u003e\n\u003ch4 id=\"323-synchronized和violatile的区别\"\u003e3.2.3 synchronized和violatile的区别\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003evolatile关键字是线程同步的轻量级实现，volatile关键字只能用于变量，而synchronized关键字可以修饰方法和代码块。\u003c/li\u003e\n\u003cli\u003evolatile关键字能保证数据的可见性，但是无法保证数据的原子性，synchronized两者都可以保证。\u003c/li\u003e\n\u003cli\u003e【可见性】避免读取变量在缓存中的旧值，而是强制读取主存中的新值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"33-乐观锁和悲观锁\"\u003e3.3 乐观锁和悲观锁\u003c/h2\u003e\n\u003ch4 id=\"331-悲观锁\"\u003e3.3.1 悲观锁\u003c/h4\u003e\n\u003cp\u003e假设最坏情况，访问共享资源时，先获取锁。\u003c/p\u003e\n\u003cp\u003esynchronized和ReentrantLock等独占锁都是悲观锁思想的实现。\u003c/p\u003e\n\u003ch4 id=\"332-乐观锁\"\u003e3.3.2 乐观锁\u003c/h4\u003e\n\u003cp\u003e假设最好情况，访问访问共享资源时不需要获取锁，提交修改时验证资源是否发生了冲突。\u003c/p\u003e\n\u003cp\u003e可以通过CAS机制或版本号机制实现乐观锁。\u003c/p\u003e\n\u003cp\u003eCAS机制依赖于CPU的原子指令，但是无法避免ABA问题。\u003c/p\u003e\n\u003ch4 id=\"333-reentrantlock\"\u003e3.3.3 ReentrantLock\u003c/h4\u003e\n\u003cp\u003eReentrantLock实现了Lock接口，有一个内部类Sync，Sync继承AQS（AbstractQueuedSynchronizer），而Sync有公平锁和非公平锁两个子类。ReentrantLock默认使用非公平锁。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e公平锁保证按照申请顺序获取锁。\u003c/li\u003e\n\u003cli\u003e非公平锁不保证按照申请顺序获取锁，可能会出现饿死的情况。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"334-synchronized和reentrantlock有什么区别\"\u003e3.3.4 synchronized和ReentrantLock有什么区别？\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e两者都是可重入锁\u003c/li\u003e\n\u003cli\u003esynchronized依赖于JVM，而ReentrantLock依赖于API\u003c/li\u003e\n\u003cli\u003eReentrantLock比synchronized增加了一些高级功能：等待可中断、可实现公平锁，可实现选择性通知。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e写锁可以降级为读锁，但是读锁不能升级为写锁，为了避免死锁的情况。\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"34-treadlocal\"\u003e3.4 TreadLocal\u003c/h2\u003e\n\u003ch2 id=\"35-线程池\"\u003e3.5 线程池\u003c/h2\u003e\n\u003ch2 id=\"36-future\"\u003e3.6 Future\u003c/h2\u003e\n\u003ch2 id=\"37-aqs\"\u003e3.7 AQS\u003c/h2\u003e","title":"3.JUC"},{"content":"3.1 事务的特性 原子性：一个事务中的操作要么全部完成，要么全部不完成。 一致性：事务操作前和操作后，数据满足完整性约束，数据库保持一致性状态。 隔离性：数据库允许多个并发事务的同时，防止多个事务并发时由于交叉执行而导致数据不一致。 持久性：事务处理结束后，对数据的修改是永久的。 InnoDB通过redo log保证持久性，通过undo log保证原子性，隔离性通过MVCC机制或锁机制保证，一致性则通过持久性+原子性+隔离性来保证。\n3.2 并发事务会引发什么问题 脏读 如果一个事务读到了另一个事务还没有提交的修改数据，就意味着发生了脏读。\n不可重复度 在一次事务内多次读取同一个数据，如果出现两次读到的数据不一致的情况，就意味着发生了不可重复读现象。\n幻读 在一个事务内多次查询某个符合查询条件的记录数量，如果出现前后两次查询到的记录数量不一致的情况，就意味着发生了幻读现象。\n3.3 事务的隔离级别 读未提交（*read uncommitted*），指一个事务还没提交时，它做的变更就能被其他事务看到； 读提交（*read committed*），指一个事务提交之后，它做的变更才能被其他事务看到； 可重复读（*repeatable read*），指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，MySQL InnoDB 引擎的默认隔离级别； 串行化（*serializable* ）；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行； MySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象（并不是完全解决了：\n针对快照读（普通 select 语句），是通过 MVCC 方式解决了幻读，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。 针对当前读（select \u0026hellip; for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读，因为当执行 select \u0026hellip; for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。 3.4 Read View在MVCC中如何工作？ Read View中的四个字段 m_ids ：指的是在创建 Read View 时，当前数据库中「活跃事务」的事务 id 列表，注意是一个列表，“活跃事务”指的就是，启动了但还没提交的事务。 min_trx_id ：指的是在创建 Read View 时，当前数据库中「活跃事务」中事务 id 最小的事务，也就是 m_ids 的最小值。 max_trx_id ：这个并不是 m_ids 的最大值，而是创建 Read View 时当前数据库中应该给下一个事务的 id 值，也就是全局事务中最大的事务 id 值 + 1； creator_trx_id ：指的是创建该 Read View 的事务的事务 id。 聚簇索引记录的两个隐藏列 trx_id，当一个事务对某条聚簇索引记录进行改动时，就会把该事务的事务 id 记录在 trx_id 隐藏列里； roll_pointer，每次对某条聚簇索引记录进行改动时，都会把旧版本的记录写入到 undo 日志中，然后这个隐藏列是个指针，指向每一个旧版本记录，于是就可以通过它找到修改前的记录。 一个事务去访问记录时，除了自己更新的记录总是可见的之外：\n如果记录的trx_id值小于Read View中的min_trx_id值，则表示这个版本的记录是在创建Read View之前就已经提交的事务生成的，所以可见; 如果记录的trx_id值大于等于Read View中的min_trx_id值，则表示这个版本记录是在创建Read View之后才启动的事务生成的，所以该版本记录对当前事务不可见; 如果记录的trx_id值在Read View的min_trx_id和max_trx_id之间，需要判断trx_id是否在m_ids中： 如果trx_id在m_ids中，表示生成该版本记录的活跃事务依然活跃，所以该版本记录不可见 如果不在m_ids中，表示该版本记录的活跃事务已经被提交，所以该版本记录对当前事务可见. 这种通过「版本链」来控制并发事务访问同一个记录时的行为就叫 MVCC（多版本并发控制）。\n3.5 可重复读是如何工作的 可重复读隔离级别是启动事务时生成一个 Read View，然后整个事务期间都在用这个 Read View。\n3.6 读已提交是如何工作的 读提交隔离级别是在每次读取数据时，都会生成一个新的 Read View。\n3.7 幻读现象 案例1 在可重复读隔离级别下，事务 A 第一次执行普通的 select 语句时生成了一个 ReadView，之后事务 B 向表中新插入了一条 id = 5 的记录并提交。接着，事务 A 对 id = 5 这条记录进行了更新操作，在这个时刻，这条新记录的 trx_id 隐藏列的值就变成了事务 A 的事务 id，之后事务 A 再使用普通 select 语句去查询这条记录时就可以看到这条记录了，于是就发生了幻读。\n因为这种特殊现象的存在，所以我们认为 MySQL Innodb 中的 MVCC 并不能完全避免幻读现象。\n案例2 T1 时刻：事务 A 先执行「快照读语句」：select * from t_test where id \u0026gt; 100 得到了 3 条记录。 T2 时刻：事务 B 往插入一个 id= 200 的记录并提交； T3 时刻：事务 A 再执行「当前读语句」 select * from t_test where id \u0026gt; 100 for update 就会得到 4 条记录，此时也发生了幻读现象。 要避免这类特殊场景下发生幻读的现象的话，就是尽量在开启事务之后，马上执行 select \u0026hellip; for update 这类当前读的语句，因为它会对记录加 next-key lock，从而避免其他事务插入一条新记录。\nMySQL 可重复读隔离级别并没有彻底解决幻读，只是很大程度上避免了幻读现象的发生。\n","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/new/%E6%95%B0%E6%8D%AE%E5%BA%93/3.transaction/","summary":"\u003ch2 id=\"31-事务的特性\"\u003e3.1 事务的特性\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e原子性：一个事务中的操作要么全部完成，要么全部不完成。\u003c/li\u003e\n\u003cli\u003e一致性：事务操作前和操作后，数据满足完整性约束，数据库保持一致性状态。\u003c/li\u003e\n\u003cli\u003e隔离性：数据库允许多个并发事务的同时，防止多个事务并发时由于交叉执行而导致数据不一致。\u003c/li\u003e\n\u003cli\u003e持久性：事务处理结束后，对数据的修改是永久的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eInnoDB通过redo log保证持久性，通过undo log保证原子性，隔离性通过MVCC机制或锁机制保证，一致性则通过持久性+原子性+隔离性来保证。\u003c/p\u003e\n\u003ch2 id=\"32-并发事务会引发什么问题\"\u003e3.2 并发事务会引发什么问题\u003c/h2\u003e\n\u003ch4 id=\"脏读\"\u003e脏读\u003c/h4\u003e\n\u003cp\u003e如果一个事务读到了另一个事务还没有提交的修改数据，就意味着发生了脏读。\u003c/p\u003e\n\u003ch4 id=\"不可重复度\"\u003e不可重复度\u003c/h4\u003e\n\u003cp\u003e在一次事务内多次读取同一个数据，如果出现两次读到的数据不一致的情况，就意味着发生了不可重复读现象。\u003c/p\u003e\n\u003ch4 id=\"幻读\"\u003e幻读\u003c/h4\u003e\n\u003cp\u003e在一个事务内多次查询某个符合查询条件的\u003cstrong\u003e记录数量\u003c/strong\u003e，如果出现前后两次查询到的记录数量不一致的情况，就意味着发生了幻读现象。\u003c/p\u003e\n\u003ch2 id=\"33-事务的隔离级别\"\u003e3.3 事务的隔离级别\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e读未提交（*read uncommitted*）\u003c/strong\u003e，指一个事务还没提交时，它做的变更就能被其他事务看到；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e读提交（*read committed*）\u003c/strong\u003e，指一个事务提交之后，它做的变更才能被其他事务看到；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e可重复读（*repeatable read*）\u003c/strong\u003e，指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，\u003cstrong\u003eMySQL InnoDB 引擎的默认隔离级别\u003c/strong\u003e；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e串行化（*serializable* ）\u003c/strong\u003e；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eMySQL InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象（并不是完全解决了\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e针对\u003cstrong\u003e快照读\u003c/strong\u003e（普通 select 语句），是\u003cstrong\u003e通过 MVCC 方式解决了幻读\u003c/strong\u003e，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。\u003c/li\u003e\n\u003cli\u003e针对\u003cstrong\u003e当前读\u003c/strong\u003e（select \u0026hellip; for update 等语句），是\u003cstrong\u003e通过 next-key lock（记录锁+间隙锁）方式解决了幻读\u003c/strong\u003e，因为当执行 select \u0026hellip; for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"34-read-view在mvcc中如何工作\"\u003e3.4 Read View在MVCC中如何工作？\u003c/h2\u003e\n\u003ch4 id=\"read-view中的四个字段\"\u003eRead View中的四个字段\u003c/h4\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cul\u003e\n\u003cli\u003em_ids ：指的是在创建 Read View 时，当前数据库中「活跃事务」的\u003cstrong\u003e事务 id 列表\u003c/strong\u003e，注意是一个列表，\u003cstrong\u003e“活跃事务”指的就是，启动了但还没提交的事务\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003emin_trx_id ：指的是在创建 Read View 时，当前数据库中「活跃事务」中事务 \u003cstrong\u003eid 最小的事务\u003c/strong\u003e，也就是 m_ids 的最小值。\u003c/li\u003e\n\u003cli\u003emax_trx_id ：这个并不是 m_ids 的最大值，而是\u003cstrong\u003e创建 Read View 时当前数据库中应该给下一个事务的 id 值\u003c/strong\u003e，也就是全局事务中最大的事务 id 值 + 1；\u003c/li\u003e\n\u003cli\u003ecreator_trx_id ：指的是\u003cstrong\u003e创建该 Read View 的事务的事务 id\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"聚簇索引记录的两个隐藏列\"\u003e聚簇索引记录的两个隐藏列\u003c/h4\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cul\u003e\n\u003cli\u003etrx_id，当一个事务对某条聚簇索引记录进行改动时，就会\u003cstrong\u003e把该事务的事务 id 记录在 trx_id 隐藏列里\u003c/strong\u003e；\u003c/li\u003e\n\u003cli\u003eroll_pointer，每次对某条聚簇索引记录进行改动时，都会把旧版本的记录写入到 undo 日志中，然后\u003cstrong\u003e这个隐藏列是个指针，指向每一个旧版本记录\u003c/strong\u003e，于是就可以通过它找到修改前的记录。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e一个事务去访问记录时，除了自己更新的记录总是可见的之外：\u003c/p\u003e","title":"3.Transaction"},{"content":"4.1 内存区域 线程私有 程序计数器：可以看做当前线程所执行的字节码的行号指示器，每个线程都有一个独立的程序计数器。JVM通过改变程序计数器依次读取指令，在多线程情况下，程序计数器用于记录当前线程执行的位置。 虚拟机栈：线程私有，生命周期和线程相同，除了Native方法外，其他所有Java方法的调用都是通过栈实现的。方法嗲用的数据需要通过栈进行传递，每次方法调用会有一个对应的栈帧被压入栈中，结束调用则弹出。 栈帧内部有：局部变量表、操作数栈、动态链接、方法返回地址。 局部变量表：存放编译期间可知的各种数据类型、对象引用。 操作数栈：主要作为方法调用的中转站，存放方法执行过程中的中间计算结果。 动态链接：主要服务一个方法需要调用其他方法的场景。 本地方法栈：为虚拟机使用到的Native方法服务，在HotSpot虚拟机中，和Java虚拟机栈合二为一。 StackOverFlowError：如果栈的内存不允许动态扩张，那么当线程请求栈的深度超过虚拟机栈的最大深度，则会报出此错误。 OutOfMemoryError：如果栈的内存可以动态扩张，如果虚拟机在动态扩张栈时无法申请到足够的内存空间，则报出此错误。 线程共享 堆：存放对象实例，几乎所有的对象实例都在此分配内存。垃圾收集器管理的主要区域，也被称为GC堆。 字符串常量池：是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。 方法区：方法区会存储已经被JVM加载的类信息、字段信息、方法信息、常量、静态变量、即时编译器编译后的代码缓存等数据。（永久代和元空间实际上是方法区的具体实现，JDK1.8之前是永久代，而之后是元空间，永久代受到JVM内存的上限，而元空间受到本机可用内存限制，相对来说溢出可能性变小，并且永久代会给GC带来不必要的复杂度） 运行时常量池：Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有存放编译期生成的各种字面量和符号引用的常量池表。常量池表户会在类加载后放到方法区的运行时常量池中。 直接内存（非运行时数据区的一部分）：直接内存是一种特殊的内存缓冲区，并不在 Java 堆或方法区中分配的，而是通过 JNI 的方式在本地内存上分配的。 4.2 垃圾回收 新生代内存（Eden， S0， S1） 老生代内存（Tenured） 永久代内存（PermGen[JDK1.7]，MetaSpace[JDK1.8]） 4.2.1 内存分配和回收原则 内存分配\n对象优先在Eden区分配内存 大对象直接进入老年代 长期存活对象进入老年代（经历过一次GC后仍然存活，如果能被Survivor空间收纳，则进入s0或s1，并将对象年龄设置为1，之后每经历一次GC，年龄+1，默认到达15岁后进入老年代）【HotSpot虚拟机对对象按照年龄从小到大累计内存，当内存大小超过Survivor区一半时，重新设置晋升老年代年龄阈值为当前年龄和阈值年龄中的较小值】 回收原则\n部分收集： 新生代收集：只对新生代进行收集 老年代收集：只对老年代收集 混合收集：对整个新生代和部分老年代进行收集 整堆收集：收集整个Java堆和方法区 4.2.2 空间分配担保 为了确保Minor GC之前老年代本身还有容纳新生代所有对象的剩余空间。\n发生Minor GC之前，JVM判断老年代最大可用的连续空间是否大于新生代所有对象的总空间，如果成立则证明Minor GC是安全的，否则查看是否允许担保失败的参数，如果允许，则检查老年代连续空间是否大于历次晋升到老年代的平均大小，如果大于则进行Minor GC，否则改为Full GC。\n4.2.3 死亡对象判断方法 引用计数法（难以解决循环引用问题） 可达性分析算法： GC ROOT：JVM虚拟机栈（局部变量表）中引用的对象、本地方法栈中引用的对象、方法区中静态属性引用的对象、方法区中常量引用的对象，所有被同步锁持有的对象，被JNI引用的对象。 对象可回收不一定会被回收，第一次会被标记，被标记的对象会被放在一个队列中进行第二次标记，除非这个对象与引用链上任何一个对象建立链接，否则就会被回收。 引用类型： 强引用：具有强引用的对象不会被回收 软引用：只具有软引用的对象如果内存空间不足，则会被回收 弱引用：只有弱引用的对象，一旦被发现，则会回收 虚引用：不会决定是否被回收，主要用于跟踪对象被垃圾回收的活动 4.2.4 垃圾收集算法 标记-清楚算法：效率不高，会有内存碎片 标记-复制算法：内存缩小为一般，如果存活对象过大，复制性能会变差，不适合老年代 标记-整理算法：标记后，让所有对象移动到一端。 分带收集算法：新生代采用“标记-复制算法”，老年代采用“标记-清楚算法”或“标记-整理算法” 4.2.5 垃圾收集器 Serial收集器 ParNew收集器 Parallel Scavenge收集器 Serial Old收集器 Parallel Old收集器 CMS收集器 G1收集器 ZGC收集器 4.3 类加载 加载（通过类名获取此类的二进制字节流，将字节流所代表的静态存储结构转换为方法区的运行时数据，内存中生成一个代表该类的Class对象，作为方法区数据的访问入口）【由类加载器完成】 验证（确保Class文件的字节流包含的信息符合约束） 准备（为类变量分配内存并设置变量初始值） 解析（将常量池内的符号引用替换为直接引用） 初始化（执行clinit） 卸载（所有实例对象被GC，没有任何地方被引用，该类的类加载器已被GC后，类会才可能被卸载） 4.3.1 类加载器 用于加载Java类的字节码\nJVM内置BootstrapClassLoader（启动类加载器，没有父级，由C++实现）、ExtensionClassLoader（扩展类加载器）和AppClassLoader（应用程序类及载器，面向用户的加载器）\n双亲委派机制，打破双亲委派机制可以通过重写loadClass实现。\n4.4 对象创建 类加载检查：在常量池中检查能否找到该类的符号引用，并且检查该符号引用代表的类是否被加载过、解析和初始化过。如果没有则进行类加载过程。 分配内存： 指针碰撞：堆内存规整的情况下，移动分解指针，分配对象内存 空闲列表：堆内存不规整的情况下，JVM维护一个列表，记录哪些内存块是可用的，分配时找一块足够大的内存进行分配。 初始化零值，保证对象的实例字段在Java代码中不赋初始值就可以直接使用（不包括对象头）。 初始化对象头：JVM对对象机械能必要设置，比如对象是哪个类的实例，如何找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。 执行init方法。 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/new/java/4.jvm/","summary":"\u003ch2 id=\"41-内存区域\"\u003e4.1 内存区域\u003c/h2\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003ch4 id=\"线程私有\"\u003e线程私有\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e程序计数器：可以看做当前线程所执行的字节码的行号指示器，每个线程都有一个独立的程序计数器。JVM通过改变程序计数器依次读取指令，在多线程情况下，程序计数器用于记录当前线程执行的位置。\u003c/li\u003e\n\u003cli\u003e虚拟机栈：线程私有，生命周期和线程相同，除了Native方法外，其他所有Java方法的调用都是通过栈实现的。方法嗲用的数据需要通过栈进行传递，每次方法调用会有一个对应的栈帧被压入栈中，结束调用则弹出。\n\u003cul\u003e\n\u003cli\u003e栈帧内部有：局部变量表、操作数栈、动态链接、方法返回地址。\u003c/li\u003e\n\u003cli\u003e局部变量表：存放编译期间可知的各种数据类型、对象引用。\u003c/li\u003e\n\u003cli\u003e操作数栈：主要作为方法调用的中转站，存放方法执行过程中的中间计算结果。\u003c/li\u003e\n\u003cli\u003e动态链接：主要服务一个方法需要调用其他方法的场景。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e本地方法栈：为虚拟机使用到的Native方法服务，在HotSpot虚拟机中，和Java虚拟机栈合二为一。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003eStackOverFlowError：如果栈的内存不允许动态扩张，那么当线程请求栈的深度超过虚拟机栈的最大深度，则会报出此错误。\u003c/li\u003e\n\u003cli\u003eOutOfMemoryError：如果栈的内存可以动态扩张，如果虚拟机在动态扩张栈时无法申请到足够的内存空间，则报出此错误。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"线程共享\"\u003e线程共享\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e堆：存放对象实例，几乎所有的对象实例都在此分配内存。垃圾收集器管理的主要区域，也被称为GC堆。\n\u003cul\u003e\n\u003cli\u003e字符串常量池：是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e方法区：方法区会存储已经被JVM加载的\u003cstrong\u003e类信息、字段信息、方法信息、常量、静态变量、即时编译器编译后的代码缓存\u003c/strong\u003e等数据。（永久代和元空间实际上是方法区的具体实现，JDK1.8之前是永久代，而之后是元空间，永久代受到JVM内存的上限，而元空间受到本机可用内存限制，相对来说溢出可能性变小，并且永久代会给GC带来不必要的复杂度）\n\u003cul\u003e\n\u003cli\u003e运行时常量池：Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有存放编译期生成的各种字面量和符号引用的\u003cstrong\u003e常量池表\u003c/strong\u003e。常量池表户会在类加载后放到方法区的运行时常量池中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e直接内存（非运行时数据区的一部分）：直接内存是一种特殊的内存缓冲区，并不在 Java 堆或方法区中分配的，而是通过 JNI 的方式在本地内存上分配的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"42-垃圾回收\"\u003e4.2 垃圾回收\u003c/h2\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cul\u003e\n\u003cli\u003e新生代内存（Eden， S0， S1）\u003c/li\u003e\n\u003cli\u003e老生代内存（Tenured）\u003c/li\u003e\n\u003cli\u003e永久代内存（PermGen[JDK1.7]，MetaSpace[JDK1.8]）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"421-内存分配和回收原则\"\u003e4.2.1 内存分配和回收原则\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e内存分配\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e对象优先在Eden区分配内存\u003c/li\u003e\n\u003cli\u003e大对象直接进入老年代\u003c/li\u003e\n\u003cli\u003e长期存活对象进入老年代（经历过一次GC后仍然存活，如果能被Survivor空间收纳，则进入s0或s1，并将对象年龄设置为1，之后每经历一次GC，年龄+1，默认到达15岁后进入老年代）【HotSpot虚拟机对对象按照年龄从小到大累计内存，当内存大小超过Survivor区一半时，重新设置晋升老年代年龄阈值为当前年龄和阈值年龄中的较小值】\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e回收原则\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e部分收集：\n\u003cul\u003e\n\u003cli\u003e新生代收集：只对新生代进行收集\u003c/li\u003e\n\u003cli\u003e老年代收集：只对老年代收集\u003c/li\u003e\n\u003cli\u003e混合收集：对整个新生代和部分老年代进行收集\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e整堆收集：收集整个Java堆和方法区\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"422-空间分配担保\"\u003e4.2.2 空间分配担保\u003c/h4\u003e\n\u003cp\u003e为了确保Minor GC之前老年代本身还有容纳新生代所有对象的剩余空间。\u003c/p\u003e\n\u003cp\u003e发生Minor GC之前，JVM判断老年代最大可用的连续空间是否大于新生代所有对象的总空间，如果成立则证明Minor GC是安全的，否则查看是否允许担保失败的参数，如果允许，则检查老年代连续空间是否大于历次晋升到老年代的平均大小，如果大于则进行Minor GC，否则改为Full GC。\u003c/p\u003e\n\u003ch4 id=\"423-死亡对象判断方法\"\u003e4.2.3 死亡对象判断方法\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e引用计数法（难以解决循环引用问题）\u003c/li\u003e\n\u003cli\u003e可达性分析算法：\n\u003cul\u003e\n\u003cli\u003eGC ROOT：JVM虚拟机栈（局部变量表）中引用的对象、本地方法栈中引用的对象、方法区中静态属性引用的对象、方法区中常量引用的对象，所有被同步锁持有的对象，被JNI引用的对象。\u003c/li\u003e\n\u003cli\u003e对象可回收不一定会被回收，第一次会被标记，被标记的对象会被放在一个队列中进行第二次标记，除非这个对象与引用链上任何一个对象建立链接，否则就会被回收。\u003c/li\u003e\n\u003cli\u003e引用类型：\n\u003cul\u003e\n\u003cli\u003e强引用：具有强引用的对象不会被回收\u003c/li\u003e\n\u003cli\u003e软引用：只具有软引用的对象如果内存空间不足，则会被回收\u003c/li\u003e\n\u003cli\u003e弱引用：只有弱引用的对象，一旦被发现，则会回收\u003c/li\u003e\n\u003cli\u003e虚引用：不会决定是否被回收，主要用于跟踪对象被垃圾回收的活动\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"424-垃圾收集算法\"\u003e4.2.4 垃圾收集算法\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e标记-清楚算法：效率不高，会有内存碎片\u003c/li\u003e\n\u003cli\u003e标记-复制算法：内存缩小为一般，如果存活对象过大，复制性能会变差，不适合老年代\u003c/li\u003e\n\u003cli\u003e标记-整理算法：标记后，让所有对象移动到一端。\u003c/li\u003e\n\u003cli\u003e分带收集算法：新生代采用“标记-复制算法”，老年代采用“标记-清楚算法”或“标记-整理算法”\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"425-垃圾收集器\"\u003e4.2.5 垃圾收集器\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eSerial收集器\u003c/li\u003e\n\u003cli\u003eParNew收集器\u003c/li\u003e\n\u003cli\u003eParallel Scavenge收集器\u003c/li\u003e\n\u003cli\u003eSerial Old收集器\u003c/li\u003e\n\u003cli\u003eParallel Old收集器\u003c/li\u003e\n\u003cli\u003eCMS收集器\u003c/li\u003e\n\u003cli\u003eG1收集器\u003c/li\u003e\n\u003cli\u003eZGC收集器\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"43-类加载\"\u003e4.3 类加载\u003c/h2\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e加载\u003c/strong\u003e（通过类名获取此类的二进制字节流，将字节流所代表的静态存储结构转换为方法区的运行时数据，内存中生成一个代表该类的Class对象，作为方法区数据的访问入口）【由类加载器完成】\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e验证\u003c/strong\u003e（确保Class文件的字节流包含的信息符合约束）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e准备\u003c/strong\u003e（为类变量分配内存并设置变量初始值）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e解析\u003c/strong\u003e（将常量池内的符号引用替换为直接引用）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e初始化\u003c/strong\u003e（执行clinit）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e卸载\u003c/strong\u003e（所有实例对象被GC，没有任何地方被引用，该类的类加载器已被GC后，类会才可能被卸载）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"431-类加载器\"\u003e4.3.1 类加载器\u003c/h4\u003e\n\u003cp\u003e用于加载Java类的字节码\u003c/p\u003e","title":"4.JVM"},{"content":"【！MyISAM不支持行级锁】\n4.1 锁的分类 全局锁 表级锁 表锁 元数据锁 意向锁 AUTO-INC锁 行级锁 Record Lock Gap Lock Next-Key Lock 插入意向锁 4.2 MySQL是怎么加锁的？ 4.2.1 什么SQL语句会加行级锁 普通的select语句是不会对记录加锁的（除了串行化隔离级别），因为都属于快照读，是通过MVCC实现的。\n如果要在查询记录时加行级锁，可以使用：\n# S型锁 SELECT ... LOCK IN SHARE MODE; # X型锁 SELECT ... FOR UPDATE; 上面这两句必须在一个事务中，因为当事务提交了，锁就会释放，所以使用这两条语句时，要加上begin或者start transaction。\n除上面这两句锁定读语句会加行级锁之外，update和delete操作都会加行级锁，并且所得类型都是独占锁（X型）。\nUPDATE TABLE ... WHERE ...; DELETE FROM TABLE WHERE ... 共享锁之间读读共享，读写互斥。独占锁满足写写互斥，读写互斥。\n4.2.2 行级锁有哪些种类 在读已提交隔离级别下，行级锁的种类只有记录锁。\n在可重复读隔离级别下，行级锁除了有记录锁，还有间隙锁（避免幻读）、临键锁。\nRecord Lock，记录锁，仅对一条记录上锁； Gap Lock，间隙锁，锁定一个范围，但是不包括记录本身； Next-Key Lock，Record Lock + Gap Lock，锁定一恶搞范围，并且锁定记录本身。 4.2.2.1 Record Lock 记录锁有X锁和S锁之分。\n4.2.2.2 Gap Lock 只存在于可重复度隔离级别，目的是为了解决可重复度隔离级别下幻读的现象。\n间隙锁存在X锁和S锁之分，但是没有什么区别，间隙锁之间是兼容的，即两个事务可以同时包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的。\n4.2.2.3 Next-Key Lock 临键锁，锁定一个范围，并且锁定记录本身。\n临键锁也有X锁和S锁之分，由于记录锁之间的X和S锁互不兼容，所以当一个事务获取了X型的临键锁时，另一个事务在获取相同范围的X型临键锁时就会被阻塞。\n4.2.3 MySQL时怎么加行级锁的 加锁的对象是索引，加锁的基本单位是next-key lock，是一个前开后闭的开区间。\n但是临键锁在一定场景下会退化为记录锁或者间隙锁。（在仅使用记录锁或者间隙锁就可以避免幻读的场景下，就会退化）。\n使用唯一索引进行等值查询时，「存在」退化为记录锁，「不存在」找到第一条大于该记录的记录后，退化为间隙锁。\n使用唯一索引进行范围查询时，会对每一个扫描到的索引加next-key锁，\n当「大于等于」范围查询时，如果等值查询的记录存在表中，那么该记录的索引中的next-key锁会退化为记录锁。 当「小于或小于等于」时，如果条件值的记录不存在表中，扫描到终止范围查询的记录时，该记录的临键锁退化为间隙锁，其他记录都是加临键锁。如果条件值的记录在表中，针对「小于」终止范围的记录的临键锁会退化为间隙锁，而「小于等于」不会退化。 使用非唯一索引等值查询\n因为存在两个索引，一个是主键索引，一个是非唯一索引（二级索引），所以在加锁时，同时会对这两个索引都加锁，但是对主键索引加锁的时候，只有满足查询条件的记录才会对它们的主键索引加锁。\n当查询记录「存在」时，由于不是唯一索引，所以肯定存在索引值相同的记录，于是非唯一索引等值查询的过程是一个扫描的过程，直到扫描到第一个不符合二级索引记录就停止扫描，然后在扫描过程中，对扫描到的二级索引加的是临键锁，对于第一个不符合条件的二级索引记录，会退化为间隙锁，同时在符合查询条件的记录的主键索引上加上记录锁。 当查询记录「不存在」时，扫描到第一条不符合条件的二级索引记录时，该二级索引的临键锁会退化为间隙锁，引文i不存在满足查询条件的记录，所以不会对主键索引加锁。 MySQL 是怎么加锁的？ | 小林coding (xiaolincoding.com)\n使用非唯一索引范围查询：非唯一索引范围查询，索引的 next-key lock 不会有退化为间隙锁和记录锁的情况。\n没有加索引的查询：\n如果锁定读查询语句，没有使用索引列作为查询条件，或者查询语句没有走索引查询，导致扫描是全表扫描。那么，每一条记录的索引上都会加 next-key 锁，这样就相当于锁住的全表，这时如果其他事务对该表进行增、删、改操作的时候，都会被阻塞。 在线上在执行 update、delete、select \u0026hellip; for update 等具有加锁性质的语句，一定要检查语句是否走了索引，如果是全表扫描的话，会对每一个索引加 next-key 锁，相当于把整个表锁住了，这是挺严重的问题。 4.3 update没加索引会锁全表吗？ 在 update 语句的 where 条件没有使用索引，就会全表扫描，于是就会对所有记录加上 next-key 锁（记录锁 + 间隙锁），相当于把整个表锁住了。\n我们可以将 MySQL 里的 sql_safe_updates 参数设置为 1，开启安全更新模式。\nupdate 语句必须满足如下条件之一才能执行成功：\n使用 where，并且 where 条件中必须有索引列； 使用 limit； 同时使用 where 和 limit，此时 where 条件中可以没有索引列； delete 语句必须满足以下条件能执行成功：\n同时使用 where 和 limit，此时 where 条件中可以没有索引列； 如果 where 条件带上了索引列，但是优化器最终扫描选择的是全表，而不是索引的话，我们可以使用 force index([index_name]) 可以告诉优化器使用哪个索引，以此避免有几率锁全表带来的隐患。\n4.4 MySQL 记录锁+间隙锁可以防止删除操作而导致的幻读吗？ 可以\n4.5 MySQL死锁了怎么办 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/new/%E6%95%B0%E6%8D%AE%E5%BA%93/4.lock/","summary":"\u003cp\u003e【！MyISAM不支持行级锁】\u003c/p\u003e\n\u003ch2 id=\"41-锁的分类\"\u003e4.1 锁的分类\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e全局锁\u003c/li\u003e\n\u003cli\u003e表级锁\n\u003cul\u003e\n\u003cli\u003e表锁\u003c/li\u003e\n\u003cli\u003e元数据锁\u003c/li\u003e\n\u003cli\u003e意向锁\u003c/li\u003e\n\u003cli\u003eAUTO-INC锁\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e行级锁\n\u003cul\u003e\n\u003cli\u003eRecord Lock\u003c/li\u003e\n\u003cli\u003eGap Lock\u003c/li\u003e\n\u003cli\u003eNext-Key Lock\u003c/li\u003e\n\u003cli\u003e插入意向锁\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"42-mysql是怎么加锁的\"\u003e4.2 MySQL是怎么加锁的？\u003c/h2\u003e\n\u003ch4 id=\"421-什么sql语句会加行级锁\"\u003e4.2.1 什么SQL语句会加行级锁\u003c/h4\u003e\n\u003cp\u003e普通的select语句是不会对记录加锁的（除了串行化隔离级别），因为都属于快照读，是通过MVCC实现的。\u003c/p\u003e\n\u003cp\u003e如果要在查询记录时加行级锁，可以使用：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e#\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eS型锁\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eLOCK\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eIN\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eSHARE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eMODE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e#\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eX型锁\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eFOR\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eUPDATE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e上面这两句必须在一个事务中，\u003cstrong\u003e因为当事务提交了，锁就会释放\u003c/strong\u003e，所以使用这两条语句时，要加上begin或者start transaction。\u003c/p\u003e\n\u003cp\u003e除上面这两句锁定读语句会加行级锁之外，update和delete操作都会加行级锁，并且所得类型都是独占锁（X型）。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eUPDATE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eWHERE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e...;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eDELETE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eWHERE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e共享锁之间读读共享，读写互斥。独占锁满足写写互斥，读写互斥。\u003c/p\u003e\n\u003ch4 id=\"422-行级锁有哪些种类\"\u003e4.2.2 行级锁有哪些种类\u003c/h4\u003e\n\u003cp\u003e在读已提交隔离级别下，行级锁的种类只有记录锁。\u003c/p\u003e\n\u003cp\u003e在可重复读隔离级别下，行级锁除了有记录锁，还有间隙锁（避免幻读）、临键锁。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRecord Lock，记录锁，仅对一条记录上锁；\u003c/li\u003e\n\u003cli\u003eGap Lock，间隙锁，锁定一个范围，但是不包括记录本身；\u003c/li\u003e\n\u003cli\u003eNext-Key Lock，Record Lock + Gap Lock，锁定一恶搞范围，并且锁定记录本身。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"4221-record-lock\"\u003e4.2.2.1 Record Lock\u003c/h5\u003e\n\u003cp\u003e记录锁有X锁和S锁之分。\u003c/p\u003e\n\u003ch5 id=\"4222-gap-lock\"\u003e4.2.2.2 Gap Lock\u003c/h5\u003e\n\u003cp\u003e只存在于可重复度隔离级别，目的是为了解决可重复度隔离级别下幻读的现象。\u003c/p\u003e","title":"4.Lock"},{"content":"5.1 Undo Log 用于保证事务ACID中的原子性。\n事务没提交时，会将记录更新前的数据记录到undo log日志文件中。\n插入：记录主键值 删除：记录这条记录全部内容 更新：记录这条记录旧值 一条记录的每一次更新操作产生的undo log格式都有一个roll_pointer和trx_id指针，分别用于将undo log串成链表和记录被哪个事务所修改。\n所以undo log还可以和ReadView配合实现MVCC。\n作用：\n实现事务回滚，保障事务的原子性。事务处理过程中，如果出现了错误或者用户执 行了 ROLLBACK 语句，MySQL 可以利用 undo log 中的历史数据将数据恢复到事务开始之前的状态。 实现 MVCC（多版本并发控制）关键因素之一。MVCC 是通过 ReadView + undo log 实现的。undo log 为每条记录保存多份历史数据，MySQL 在执行快照读（普通 select 语句）的时候，会根据事务的 Read View 里的信息，顺着 undo log 的版本链找到满足其可见性的记录。 5.2 Redo Log redo log用于保证ACID中的持久性。\n由于更新数据会先写入Buffer Pool，而内存是不可靠的，所以为了防止断电导致数据丢失，InnoDB会先更新内存，然后将本次对这个页的修改以redo log的形式记录，后续在适当的时候，后台线程再将Buffer Pool中的脏页刷到磁盘中，这就是WAL（Write-Ahead Logging）技术。\nWAL 技术指的是， MySQL 的写操作并不是立刻写到磁盘上，而是先写日志，然后在合适的时间再写到磁盘上。\nredo log是物理日志，记录某个数据页做了什么修改，每执行一个事务就会产生这样一条或者多条物理日志，事务提交时，只需要将redo log持久化到磁盘即可，不需要等待buffer pool中的脏页持久化。\n这样即使系统崩溃，虽然脏页没有持久化，但是MySQL可以根据redo log的内容，将数据恢复到最新状态。\n被修改的Undo页面，需要记录对应的redo log。在内存修改该 Undo 页面后，需要记录对应的 redo log。\nredo log 和 undo log区别： 两种日志都是存储引擎日志 redo log 记录了此次事务「完成后」的状态，记录的是更新之后的值。 undo log 记录了此次事务「开始前」的状态，记录的是更新之前的值。 写入 redo log 的方式使用了追加操作， 所以磁盘操作是顺序写，而写入数据需要先找到写入位置，然后才写到磁盘，所以磁盘操作是随机写。\n磁盘的「顺序写 」比「随机写」 高效的多，因此 redo log 写入磁盘的开销更小。\n作用：\n实现事务的持久性，让 MySQL 有 crash-safe 的能力，能够保证 MySQL 在任何时间段突然崩溃，重启后之前已提交的记录都不会丢失； 将写操作从「随机写」变成了「顺序写」，提升 MySQL 写入磁盘的性能。 5.2.1 产生的redo log是直接写入磁盘吗？ 不是，redo log有自己的缓存redo log buffer，每产生一条redo log时，会先写入redo log buffer。\n刷盘时机：\nMySQL正常关闭时； 当redo log buffer中写入量大于redo log buffer内存空间（16MB）的一半时； InnoDB的后台线程每隔1s，将redo log buffer持久化到磁盘； 每次事务提交时，都将缓存在redo log buffer中的redo log直接持久化到磁盘。 redo log Group：\nInnoDB存储引擎有一个重做日志文件组，有两个redo log文件组成，每个文件大小固定且一致，以循环写的方式工作。\nwrite pos：表示当前记录写到的位置； check point：表示当前要擦除的位置，因为buffer pool中的脏页已经刷新到了磁盘； 如果write pos追上了check point，此时redo log文件满，MySQL不能执行新的更新操作，会被阻塞，并将Buffer Pool中脏页数据刷到磁盘，然后标记可以擦除的记录。 5.3 Bin Log 5.4 两阶段提交 5.5 磁盘IO高怎么办 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/new/%E6%95%B0%E6%8D%AE%E5%BA%93/5.log/","summary":"\u003ch2 id=\"51-undo-log\"\u003e5.1 Undo Log\u003c/h2\u003e\n\u003cp\u003e用于保证事务ACID中的原子性。\u003c/p\u003e\n\u003cp\u003e事务没提交时，会将记录更新前的数据记录到undo log日志文件中。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e插入：记录主键值\u003c/li\u003e\n\u003cli\u003e删除：记录这条记录全部内容\u003c/li\u003e\n\u003cli\u003e更新：记录这条记录旧值\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e一条记录的每一次更新操作产生的undo log格式都有一个roll_pointer和trx_id指针，分别用于将undo log串成链表和记录被哪个事务所修改。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e所以undo log还可以和ReadView配合实现MVCC。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e作用：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e实现事务回滚，保障事务的原子性\u003c/strong\u003e。事务处理过程中，如果出现了错误或者用户执 行了 ROLLBACK 语句，MySQL 可以利用 undo log 中的历史数据将数据恢复到事务开始之前的状态。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e实现 MVCC（多版本并发控制）关键因素之一\u003c/strong\u003e。MVCC 是通过 ReadView + undo log 实现的。undo log 为每条记录保存多份历史数据，MySQL 在执行快照读（普通 select 语句）的时候，会根据事务的 Read View 里的信息，顺着 undo log 的版本链找到满足其可见性的记录。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"52-redo-log\"\u003e5.2 Redo Log\u003c/h2\u003e\n\u003cp\u003eredo log用于保证ACID中的持久性。\u003c/p\u003e\n\u003cp\u003e由于更新数据会先写入Buffer Pool，而内存是不可靠的，所以为了防止断电导致数据丢失，InnoDB会先更新内存，然后将本次对这个页的修改以redo log的形式记录，后续在适当的时候，后台线程再将Buffer Pool中的脏页刷到磁盘中，这就是WAL（Write-Ahead Logging）技术。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWAL 技术指的是， MySQL 的写操作并不是立刻写到磁盘上，而是先写日志，然后在合适的时间再写到磁盘上\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003eredo log是物理日志，记录某个数据页做了什么修改，每执行一个事务就会产生这样一条或者多条物理日志，事务提交时，只需要将redo log持久化到磁盘即可，不需要等待buffer pool中的脏页持久化。\u003c/p\u003e\n\u003cp\u003e这样即使系统崩溃，虽然脏页没有持久化，但是MySQL可以根据redo log的内容，将数据恢复到最新状态。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e被修改的Undo页面，需要记录对应的redo log。在内存修改该 Undo 页面后，需要记录对应的 redo log\u003c/strong\u003e。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eredo log 和 undo log区别：\n\u003cul\u003e\n\u003cli\u003e两种日志都是存储引擎日志\u003c/li\u003e\n\u003cli\u003eredo log 记录了此次事务「完成后」的状态，记录的是更新之后的值。\u003c/li\u003e\n\u003cli\u003eundo log 记录了此次事务「开始前」的状态，记录的是更新之前的值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e写入 redo log 的方式使用了追加操作， 所以磁盘操作是\u003cstrong\u003e顺序写\u003c/strong\u003e，而写入数据需要先找到写入位置，然后才写到磁盘，所以磁盘操作是\u003cstrong\u003e随机写\u003c/strong\u003e。\u003c/p\u003e","title":"5.Log"},{"content":"","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/new/%E6%95%B0%E6%8D%AE%E5%BA%93/6.cache/","summary":"","title":"6.Cache"},{"content":"Dynamic Programming 算法-动态规划 Dynamic Programming\u0026ndash;从菜鸟到老鸟-CSDN博客\n拆分子问题，记住过往，减少重复计算\n1.最优子结构\n如果一个问题的解结构包含其子问题的最优解，就称此问题具有最优子结构性质。因此，某个问题是否适合应用动态规划算法，它是否具有最优子结构性质是一个很好的线索。使用动态规划算法时，用子问题的最优解来构造原问题的最优解。因此必须考查最优解中用到的所有子问题。\n2.重叠子问题\n在斐波拉契数列和钢条切割结构图中，可以看到大量的重叠子问题，比如说在求fib（6）的时候，fib（2）被调用了5次，在求cut（4）的时候cut（0）被调用了4次。如果使用递归算法的时候会反复的求解相同的子问题，不停的调用函数，而不是生成新的子问题。如果递归算法反复求解相同的子问题，就称为具有重叠子问题（overlapping subproblems）性质。在动态规划算法中使用数组来保存子问题的解，这样子问题多次求解的时候可以直接查表不用调用函数递归。\n自顶向下备忘录 自底向上动态规划 public int minPathCost(int[][] grid, int[][] moveCost) { int[] cost = new int[grid[0].length]; int min_cost = 0x7fffffff; for(int i=0;i\u0026lt;cost.length;i++){ cost[i] = grid[grid.length-1][i]; } // hop loop for(int i=grid.length-2;i\u0026gt;=0;i--){ // update cost loop for(int j=0;j\u0026lt;cost.length;j++){ min_cost = 0x7fffffff; for(int k=0;k\u0026lt;moveCost[grid[i][j]].length;k++){ min_cost = Math.min(moveCost[grid[i][j]][k]+grid[i][j], min_cost); } cost[j] = min_cost; } } for(int i=0;i\u0026lt;cost.length;i++){ min_cost = Math.min(min_cost, cost[i]); } return min_cost; } ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/algorithm/dynamic-programming/","summary":"\u003ch1 id=\"dynamic-programming\"\u003eDynamic Programming\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://blog.csdn.net/u013309870/article/details/75193592\"\u003e算法-动态规划 Dynamic Programming\u0026ndash;从菜鸟到老鸟-CSDN博客\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e拆分子问题，记住过往，减少重复计算\u003c/p\u003e\n\u003cp\u003e1.最优子结构\u003c/p\u003e\n\u003cp\u003e如果一个问题的解结构包含其子问题的最优解，就称此问题具有最优子结构性质。因此，某个问题是否适合应用动态规划算法，它是否具有最优子结构性质是一个很好的线索。使用动态规划算法时，用子问题的最优解来构造原问题的最优解。因此必须考查最优解中用到的所有子问题。\u003c/p\u003e\n\u003cp\u003e2.重叠子问题\u003c/p\u003e\n\u003cp\u003e在斐波拉契数列和钢条切割结构图中，可以看到大量的重叠子问题，比如说在求fib（6）的时候，fib（2）被调用了5次，在求cut（4）的时候cut（0）被调用了4次。如果使用递归算法的时候会反复的求解相同的子问题，不停的调用函数，而不是生成新的子问题。如果递归算法反复求解相同的子问题，就称为具有重叠子问题（overlapping subproblems）性质。在动态规划算法中使用数组来保存子问题的解，这样子问题多次求解的时候可以直接查表不用调用函数递归。\u003c/p\u003e\n\u003ch4 id=\"自顶向下备忘录\"\u003e自顶向下备忘录\u003c/h4\u003e\n\u003ch4 id=\"自底向上动态规划\"\u003e自底向上动态规划\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eminPathCost\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[][]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[][]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emoveCost\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\t\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emin_cost\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0x7fffffff\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e// hop loop\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// update cost loop\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003emin_cost\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0x7fffffff\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003emoveCost\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e]]\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003emin_cost\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emoveCost\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e]][\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e]+\u003c/span\u003e\u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emin_cost\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emin_cost\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003emin_cost\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emin_cost\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emin_cost\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Dynamic Programming"},{"content":"Git 1 使用 1.1 初始化仓库 git init git clone [url] directoryName 1.2 记录每次更新 检测文件状态：git status 将文件加入到暂存区：git add filename 忽略文件：.gitignore 提交更新：git commot -m ”message” 跳过使用暂存区域更新方式：git commit -a -m “message” 从暂存区移除文件：git rm filename 对文件重命名：git mv README.md README（相当于 mv README.md README, git rm README.md, git add README） 1.3 推送改动到远程仓库 链接远程服务器：git remote add origin 提交改动 git push origin master 1.4 远程仓库的移除与重命名 git remote rename test test1 git remote rm test1 1.5 查看提交历史 git log \u0026ndash;author=name\n1.6 撤销操作 重新提交：git commit \u0026ndash;amend 取消暂存：git reset filename 撤销对文件的修改：git checkout \u0026ndash; filename 撤销本地修改： git fetch origin：获取最新历史版本 git reset \u0026ndash;hard origin/master：将本地主分支指向该版本 1.7 分支 创建分支：git branch test 切换分支：git checkout test 创建并切换：git checkout -b test 切换到主分支：git checkout master 删除分支：git branch -d test 将分支对送到远端仓库：git push origin ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/developmenttool/git/","summary":"\u003ch1 id=\"git\"\u003eGit\u003c/h1\u003e\n\u003ch1 id=\"1-使用\"\u003e1 使用\u003c/h1\u003e\n\u003ch2 id=\"11-初始化仓库\"\u003e1.1 初始化仓库\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003egit init\u003c/li\u003e\n\u003cli\u003egit clone [url] directoryName\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"12-记录每次更新\"\u003e1.2 记录每次更新\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e检测文件状态：git status\u003c/li\u003e\n\u003cli\u003e将文件加入到暂存区：git add filename\u003c/li\u003e\n\u003cli\u003e忽略文件：.gitignore\u003c/li\u003e\n\u003cli\u003e提交更新：git commot -m ”message”\u003c/li\u003e\n\u003cli\u003e跳过使用暂存区域更新方式：git commit -a -m “message”\u003c/li\u003e\n\u003cli\u003e从暂存区移除文件：git rm filename\u003c/li\u003e\n\u003cli\u003e对文件重命名：git mv README.md README（相当于 mv README.md README, git rm README.md, git add README）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"13-推送改动到远程仓库\"\u003e1.3 推送改动到远程仓库\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e链接远程服务器：git remote add origin \u003c!-- raw HTML omitted --\u003e\u003c/li\u003e\n\u003cli\u003e提交改动 git push origin master\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"14-远程仓库的移除与重命名\"\u003e1.4 远程仓库的移除与重命名\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003egit remote rename test test1\u003c/li\u003e\n\u003cli\u003egit remote rm test1\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"15-查看提交历史\"\u003e1.5 查看提交历史\u003c/h2\u003e\n\u003cp\u003egit log \u0026ndash;author=name\u003c/p\u003e","title":"Git"},{"content":"1 HTTP 基础 1.1 HTTP常见状态码 1XX： 提示信息，表示目前是协议处理的中间状态，还需要后续的操作 2XX：成功，报文已经被收到并正确处理 200：成功，如果是非HEAD请求，返回响应头会有body数据 204：与200基本相同，但还是响应头没有body数据 206：用于HTTP分块下载或断点续传，表示返回的body不是全部资源 3XX：重定向，资源位置发生变动，需要客户端重新发送请求 301：永久重定向 302：临时重定向 304：资源未修改，重定向缓冲文件，告诉客户端可以使用缓冲资源 4XX：客户端错误，请求报文有误，服务器无法处理 400：请求报文有错，笼统错误 403：服务器禁止访问资源 404：请求资源在服务器不存在或未找到 5XX：服务器错误，服务器在处理请求时内部发生了错误 500：服务器发生错误，笼统错误 501：客户端请求的功能不支持 502：服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，但是访问后端服务器发生错误 503：表示服务器忙碌，展示无法响应客户端 1.2 HTTP常见字段 Host字段：指定服务器域名 Content-Length字段：表示本子回应的数据长度 Connection字段：常用于客户端要求服务器使用长连接 Content-Type字段：用于服务端响应时，告诉客户端本次数据是什么格式 Accept字段：客户端告诉服务器可以接受哪些数据 Content-Encoding字段：表示数据压缩方法 Accept-Encoding字段：客户端告诉服务器可以接受哪些压缩方式 1.3 GET和POST 语义上：GET表示从服务器获取指定资源，POST表示根据请求负荷对指定资源作出处理 安全和幂等：GET方法是安全且幂等的，浏览器可以对GET做数据缓存，也可以在代理层做缓存，GET可以被保存为书签；POST是不安全的，并且不是幂等的，浏览器也不会缓存POST请求，也不能把POST请求保存为书签。 如果不按照规范开发：GET可以变为不安全且不幂等的，POST也可以变为安全和幂等的。 GET可以携带body数据，POST也可以在URL中携带参数 1.4 HTTP缓存技术 分为强制缓存和协商缓存两种。\n强制缓存 浏览器判断缓存没有过期，就直接读本地缓存，主动权在浏览器 使用字段： Cache-Control，一个相对时间，优先级更高 Expires，一个绝对时间 协商缓存 响应码304 使用字段： 请求携带If-Modified-Since和响应携带Last-Modified，基于时间比较 请求携带If-None-Match和响应携带Etag，基于唯一标识比较 Etag优先级更高 强制缓存未命中才会走协商缓存 1.5 HTTP 特性 HTTP/1.1\n简单：header+body，头部信息为key-value形式 灵活易于扩展：请求方法、状态码等允许开发人员自定义和扩充，工作在应用层（7层），下层可以随意变化 跨平台 无状态：基于Cookie和Session等方式记录操作状态 明文传输，不验证双方身份，无法证明报文完整性，不安全 长连接 管道网络传输，不必等待上一个请求响应，可以连续发送，但是默认不开启 队头阻塞：一个请求因为某些原因被阻塞时，后面排队的请求会一同被阻塞 HTTP/2.0做了什么优化\n头部压缩，如果同时发送的多个请求头部有相似内容，协议会清楚重复部分（HPACK算法：客户端和服务端同时维护一个头部信息表，生成索引号，后续发送索引号提高速度） 二进制格式：头信息和数据题都是二进制，统称为帧（头信息帧和数据帧），增加了数据传输的效率。 并发传输：多个Stream复用在一条TCP连接，1 个 TCP 连接包含多个 Stream，Stream 里可以包含 1 个或多个 Message，Message 对应 HTTP/1 中的请求或响应，由 HTTP 头部和包体构成。Message 里包含一条或者多个 Frame，Frame 是 HTTP/2 最小单位，以二进制压缩格式存放 HTTP/1 中的内容（头部和包体）。（针对不同的 HTTP 请求用独一无二的 Stream ID 来区分，接收端可以通过 Stream ID 有序组装成 HTTP 消息，不同 Stream 的帧是可以乱序发送的，因此可以并发不同的 Stream ，也就是 HTTP/2 可以并行交错地发送请求和响应。） 服务器推送：双方都可以建立Stream。 HTTP/2 通过 Stream 的并发能力，解决了 HTTP/1 队头阻塞的问题，看似很完美了，但是 HTTP/2 还是存在“队头阻塞”的问题，只不过问题不是在 HTTP 这一层面，而是在 TCP 这一层。（HTTP/2 是基于 TCP 协议来传输数据的，TCP 是字节流协议，TCP 层必须保证收到的字节数据是完整且连续的，这样内核才会将缓冲区里的数据返回给 HTTP 应用，那么当「前 1 个字节数据」没有到达时，后收到的字节数据只能存放在内核缓冲区里，只有等到这 1 个字节数据到达时，HTTP/2 应用层才能从内核中拿到数据，这就是 HTTP/2 队头阻塞问题。） HTTP/3\nHTTP/1.1 中的管道（ pipeline）虽然解决了请求的队头阻塞，但是没有解决响应的队头阻塞，因为服务端需要按顺序响应收到的请求，如果服务端处理某个请求消耗的时间比较长，那么只能等响应完这个请求后， 才能处理下一个请求，这属于 HTTP 层队头阻塞。 HTTP/2 虽然通过多个请求复用一个 TCP 连接解决了 HTTP 的队头阻塞 ，但是一旦发生丢包，就会阻塞住所有的 HTTP 请求，这属于 TCP 层队头阻塞。 UDP 发送是不管顺序，也不管丢包的，所以不会出现像 HTTP/2 队头阻塞的问题。大家都知道 UDP 是不可靠传输的，但基于 UDP 的 QUIC 协议 可以实现类似 TCP 的可靠性传输。\nQUIC特点：\n无队头阻塞：QUIC 协议也有类似 HTTP/2 Stream 与多路复用的概念，也是可以在同一条连接上并发传输多个 Stream，Stream 可以认为就是一条 HTTP 请求。（QUIC 有自己的一套机制可以保证传输的可靠性的。当某个流发生丢包时，只会阻塞这个流，其他流不会受到影响，因此不存在队头阻塞问题。这与 HTTP/2 不同，HTTP/2 只要某个流中的数据包丢失了，其他流也会因此受影响。）\n更快的连接建立：HTTP/3 在传输数据前虽然需要 QUIC 协议握手，但是这个握手过程只需要 1 RTT，握手的目的是为确认双方的「连接 ID」，连接迁移就是基于连接 ID 实现的。\n但是 HTTP/3 的 QUIC 协议并不是与 TLS 分层，而是 QUIC 内部包含了 TLS，它在自己的帧会携带 TLS 里的“记录”，再加上 QUIC 使用的是 TLS/1.3，因此仅需 1 个 RTT 就可以「同时」完成建立连接与密钥协商。\n连接迁移：基于 TCP 传输协议的 HTTP 协议，由于是通过四元组（源 IP、源端口、目的 IP、目的端口）确定一条 TCP 连接。当移动设备的网络从 4G 切换到 WIFI 时，意味着 IP 地址变化了，那么就必须要断开连接，然后重新建立连接。而 QUIC 协议没有用四元组的方式来“绑定”连接，而是通过连接 ID 来标记通信的两个端点，客户端和服务器可以各自选择一组 ID 来标记自己，因此即使移动设备的网络变化后，导致 IP 地址变化了，只要仍保有上下文信息（比如连接 ID、TLS 密钥等），就可以“无缝”地复用原连接，消除重连的成本，没有丝毫卡顿感，达到了连接迁移的功能。\nQUIC 是一个在 UDP 之上的伪 TCP + TLS + HTTP/2 的多路复用的协议。\nQUIC 是新协议，对于很多网络设备，根本不知道什么是 QUIC，只会当做 UDP，这样会出现新的问题，因为有的网络设备是会丢掉 UDP 包的，而 QUIC 是基于 UDP 实现的，那么如果网络设备无法识别这个是 QUIC 包，那么就会当作 UDP包，然后被丢弃。\n1.6 HTTP和HTTPS HTTPS在HTTP基础上加入了SSL/TLS安全协议。 默认端口HTTP是80，HTTPS是443。 HTTPS需要向CA（证书权威机构）申请数字证书，来保证服务器身份是可信的。 HTTP的三个风险 窃听风险 篡改风险 冒充风险 HTTP如何解决三个风险 混合加密实现信息的机密性 摘要算法保证数据的完整性 服务器公钥放入数字证书，解决了冒充的风险 混合加密 HTTPS在通信建立前，采用非对称加密交换会话密钥，后续通信过程使用对称加密。\n摘要算法+数字签名 摘要算法通过哈喜欢书计算唯一哈希值，并且无法通过哈希值推导出内容，但是不能保证「内容+哈希值」不被中间人替换，因为缺少对消息是否来源于服务端的证明。\n采用非对称加密：\n公钥加密，私钥解密：保证内容传输的安全 私钥加密，公钥解密：保证消息不会被冒充 数字签名通过「私钥加密，公钥解密」的方式确认消息的身份，私钥由服务端保管，服务端向客户端办法对应的公钥。\n数字证书 服务器将自己的公钥注册到CA，保证公钥可信 CA用自己的私钥对服务器的公钥进行数字签名，并颁发数字证书 客户端拿到服务器的数字证书后，使用CA的公钥确认真实性 从数字证书获取服务器公钥后，使用它对报文加密后发送 1.7 HTTPS连接如何建立 基本流程：\n客户端向服务器索要并验证服务器公钥 双方翻协商产生「会话密钥」 双方采用「会话密钥」进行加密通信 SSL/TLS的建立（1，2）：\nTCP三次握手\nTLS四次握手（注意TLS1.3为3次握手）\nClient Hello：随机数C+客户端TLS版本号+密码套件列表\u0026lt;-ACK\nServer Hello：随机数S+确认TLS版本号+使用的密码套件+数字证书\u0026lt;-ACK\n此时客户端会计算出会话密钥（C和S和pre-master计算得出）\nClient Response：公钥加密的随机数pre-master+加密通信算法改变通知+之前内容的摘要\nServer Response：解密pre-master，计算出「会话密钥」，发送之前握手数据的摘要\n对称加密通信\n数字证书的校验：\n签发过程 CA把持有者的公钥、用途、颁发者、有效时间等信息打包，计算Hash值 CA使用私钥对Hash值加密，生成证书签名 CA将证书签名加在文件证书后，形成数字证书 校验过程 客户端使用同样的Hash算法计算Hash值 客户端使用CA公钥解密证书签名 比对解密后的Hash值和计算出的Hash值 证书链 客户端拿到证书，如果本地没有保存证书，则会查看其签发者，直到GlobalSign Root CA（根证书，自签证书） 随后反向拿公钥验证可信性。 确保根证书的绝对安全性，将根证书隔离地越严格越好，不然根证书如果失守了，那么整个信任链都会有问题。 1.8 HTTPS的应用数据是如何保证完整性的 TLS实际上分为握手协议和记录协议\n握手协议：4次握手生成对称密钥的过程 记录协议：负责保护应用程序数据并验证其完整性和来源 首先分片、压缩 加上消息认证码MAC值，通过Hash算法计算生成 经过对称加密货的密文 加上数据类型、版本号、压缩后长度形成报文数据 2 HTTP/1.1如何优化 主要针对队头阻塞问题进行优化\n尽量避免发送HTTP请求：缓存技术（强制缓存和协商缓存） 需要发送HTTP请求时减少请求次数： 减少重定向次数：重定向请求工作交给代理服务器，客户端不感知 合并请求：将图片、js、css文件打包 延迟发送请求：类似懒加载 减少HTTP响应数据大小：压缩 有损压缩 无损压缩 3 HTTP/2优化在何处 头部压缩 二进制帧传输数据 并发传输 服务器主动推送资源 4 HTTP/3 HTTP/2仍然存在队头阻塞问题，TCP和TLS握手延迟高，网络迁移需要重新连接\nHTTP3将传输协议替换成了UDP，并在应用层实现QUIC协议，是的UDP“可靠”。\n无队头阻塞 更快的连接建立 连接迁移 5 HTTP和RPC的关系 服务发现：向某个服务发起请求，需要找到服务的IP和端口，HTTP协议可以通过DNS解析得到IP并采用默认端口，而RPC需要有专门的中间服务去保存服务名的IP信息和端口信息 底层连接形式：HTTP采用TCP，并使用长连接进行复用连接，而基于TCP的RPC一般会维护一个连接池，但是RPC实际上也可以基于UDP实现 传输内容：HTTP传输的是HTTP报文，需要遵守HTTP协议，但是RPC定制化程度很高，可以采用多种序列化方式保存结构体，性能更好 实现层面：基于HTTP实现RPC可以直接采用web服务器，并且不需要额外设定协议，但是如果基于TCP去实现，需要开发客户端和服务端代码，还需要解决粘包、拆包问题等 6 HTTP和WebSocket 如果想要服务器主动向客户端推送消息：\n使用HTTP：前端不断轮询发送请求消息，「伪」推送（长轮询和短轮询） 使用WebSocket：在HTTP协议建立基础上，发送升级协议请求，建立全双工的WebSocket通信 TCP协议本身是全双工的，但是HTTP/1.1是半双工，升级后的WebSocket和HTTP就没有关系了。\n","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/new/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/http/","summary":"\u003ch2 id=\"1-http-基础\"\u003e1 HTTP 基础\u003c/h2\u003e\n\u003ch4 id=\"11-http常见状态码\"\u003e1.1 HTTP常见状态码\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e1XX： 提示信息，表示目前是协议处理的中间状态，还需要后续的操作\u003c/li\u003e\n\u003cli\u003e2XX：成功，报文已经被收到并正确处理\n\u003cul\u003e\n\u003cli\u003e200：成功，如果是非HEAD请求，返回响应头会有body数据\u003c/li\u003e\n\u003cli\u003e204：与200基本相同，但还是响应头没有body数据\u003c/li\u003e\n\u003cli\u003e206：用于HTTP分块下载或断点续传，表示返回的body不是全部资源\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e3XX：重定向，资源位置发生变动，需要客户端重新发送请求\n\u003cul\u003e\n\u003cli\u003e301：永久重定向\u003c/li\u003e\n\u003cli\u003e302：临时重定向\u003c/li\u003e\n\u003cli\u003e304：资源未修改，重定向缓冲文件，告诉客户端可以使用缓冲资源\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e4XX：客户端错误，请求报文有误，服务器无法处理\n\u003cul\u003e\n\u003cli\u003e400：请求报文有错，笼统错误\u003c/li\u003e\n\u003cli\u003e403：服务器禁止访问资源\u003c/li\u003e\n\u003cli\u003e404：请求资源在服务器不存在或未找到\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e5XX：服务器错误，服务器在处理请求时内部发生了错误\n\u003cul\u003e\n\u003cli\u003e500：服务器发生错误，笼统错误\u003c/li\u003e\n\u003cli\u003e501：客户端请求的功能不支持\u003c/li\u003e\n\u003cli\u003e502：服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，但是访问后端服务器发生错误\u003c/li\u003e\n\u003cli\u003e503：表示服务器忙碌，展示无法响应客户端\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"12-http常见字段\"\u003e1.2 HTTP常见字段\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eHost字段：指定服务器域名\u003c/li\u003e\n\u003cli\u003eContent-Length字段：表示本子回应的数据长度\u003c/li\u003e\n\u003cli\u003eConnection字段：常用于客户端要求服务器使用长连接\u003c/li\u003e\n\u003cli\u003eContent-Type字段：用于服务端响应时，告诉客户端本次数据是什么格式\u003c/li\u003e\n\u003cli\u003eAccept字段：客户端告诉服务器可以接受哪些数据\u003c/li\u003e\n\u003cli\u003eContent-Encoding字段：表示数据压缩方法\u003c/li\u003e\n\u003cli\u003eAccept-Encoding字段：客户端告诉服务器可以接受哪些压缩方式\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"13-get和post\"\u003e1.3 GET和POST\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e语义上：GET表示从服务器获取指定资源，POST表示根据请求负荷对指定资源作出处理\u003c/li\u003e\n\u003cli\u003e安全和幂等：GET方法是安全且幂等的，浏览器可以对GET做数据缓存，也可以在代理层做缓存，GET可以被保存为书签；POST是不安全的，并且不是幂等的，浏览器也不会缓存POST请求，也不能把POST请求保存为书签。\u003c/li\u003e\n\u003cli\u003e如果不按照规范开发：GET可以变为不安全且不幂等的，POST也可以变为安全和幂等的。\u003c/li\u003e\n\u003cli\u003eGET可以携带body数据，POST也可以在URL中携带参数\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"14-http缓存技术\"\u003e1.4 HTTP缓存技术\u003c/h4\u003e\n\u003cp\u003e分为强制缓存和协商缓存两种。\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cul\u003e\n\u003cli\u003e强制缓存\n\u003cul\u003e\n\u003cli\u003e浏览器判断缓存没有过期，就直接读本地缓存，主动权在浏览器\u003c/li\u003e\n\u003cli\u003e使用字段：\n\u003cul\u003e\n\u003cli\u003eCache-Control，一个相对时间，优先级更高\u003c/li\u003e\n\u003cli\u003eExpires，一个绝对时间\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e协商缓存\n\u003cul\u003e\n\u003cli\u003e响应码304\u003c/li\u003e\n\u003cli\u003e使用字段：\n\u003cul\u003e\n\u003cli\u003e请求携带If-Modified-Since和响应携带Last-Modified，基于时间比较\u003c/li\u003e\n\u003cli\u003e请求携带If-None-Match和响应携带Etag，基于唯一标识比较\u003c/li\u003e\n\u003cli\u003eEtag优先级更高\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e强制缓存未命中才会走协商缓存\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"15-http-特性\"\u003e1.5 HTTP 特性\u003c/h4\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eHTTP/1.1\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e简单：header+body，头部信息为key-value形式\u003c/li\u003e\n\u003cli\u003e灵活易于扩展：请求方法、状态码等允许开发人员自定义和扩充，工作在应用层（7层），下层可以随意变化\u003c/li\u003e\n\u003cli\u003e跨平台\u003c/li\u003e\n\u003cli\u003e无状态：基于Cookie和Session等方式记录操作状态\u003c/li\u003e\n\u003cli\u003e明文传输，不验证双方身份，无法证明报文完整性，不安全\u003c/li\u003e\n\u003cli\u003e长连接\u003c/li\u003e\n\u003cli\u003e管道网络传输，不必等待上一个请求响应，可以连续发送，但是默认不开启\u003c/li\u003e\n\u003cli\u003e队头阻塞：一个请求因为某些原因被阻塞时，后面排队的请求会一同被阻塞\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eHTTP/2.0做了什么优化\u003c/p\u003e","title":"HTTP"},{"content":"1 IP基础知识 1.1 IPv4地址分类 主机号全0或者全1有特殊意义：\n全0：指定某个网络 全1：指定某个网络下全部主机 1.2 无分类地址CIDR 表示形式 a.b.c.d/x，其中 /x 表示前 x 位属于网络号，x 的范围是 0 ~ 32，这就使得 IP 地址更加具有灵活性。\n还有另一种划分网络号与主机号形式，那就是子网掩码，掩码的意思就是掩盖掉主机号，剩余的就是网络号。\n1.3 公有IP地址和私有IP地址 公有 IP 地址是有个组织统一分配的，假设你要开一个博客网站，那么你就需要去申请购买一个公有 IP，这样全世界的人才能访问。\n1.4 IPv6 IPv4 的地址是 32 位的，大约可以提供 42 亿个地址，但是 IPv6 的地址是 128 位的。\nIPv6 可自动配置，即使没有 DHCP 服务器也可以实现自动分配IP地址，便捷到即插即用。 IPv6 包头包首部长度采用固定的值 40 字节，去掉了包头校验和，简化了首部结构，减轻了路由器负荷，大大提高了传输的性能。 IPv6 有应对伪造 IP 地址的网络安全功能以及防止线路窃听的功能，大大提升了安全性。 1.5 IPv4和IPv6首部 2 相关协议 2.1 DNS 将域名网址自动转换为具体的 IP 地址，域名的层级关系类似一个树状结构：\n根 DNS 服务器 顶级域 DNS 服务器（com） 权威 DNS 服务器（server.com） 2.2 ARP 在传输一个 IP 数据报的时候，确定了源 IP 地址和目标 IP 地址后，就会通过主机「路由表」确定 IP 数据包下一跳。网络层的下一层是数据链路层，所以我们还要知道「下一跳」的 MAC 地址。ARP 是借助 ARP 请求与 ARP 响应两种类型的包确定 MAC 地址的。 主机会通过广播发送 ARP 请求，这个包中包含了想要知道的 MAC 地址的主机 IP 地址。 当同个链路中的所有设备收到 ARP 请求时，会去拆开 ARP 请求包里的内容，如果 ARP 请求包中的目标 IP 地址与自己的 IP 地址一致，那么这个设备就将自己的 MAC 地址塞入 ARP 响应包返回给主机。 操作系统通常会把第一次通过 ARP 获取的 MAC 地址缓存起来，以便下次直接从缓存中找到对应 IP 地址的 MAC 地址。MAC 地址的缓存是有一定期限的，超过这个期限，缓存的内容将被清除。 RARP ARP 协议是已知 IP 地址求 MAC 地址，那 RARP 协议正好相反，它是已知 MAC 地址求 IP 地址。例如将打印机服务器等小型嵌入式设备接入到网络时就经常会用得到。\n通常这需要架设一台 RARP 服务器，在这个服务器上注册设备的 MAC 地址及其 IP 地址。然后再将这个设备接入到网络，接着：\n该设备会发送一条「我的 MAC 地址是XXXX，请告诉我，我的IP地址应该是什么」的请求信息。 该设备会发送一条「我的 MAC 地址是XXXX，请告诉我，我的IP地址应该是什么」的请求信息。 最后，设备就根据从 RARP 服务器所收到的应答信息设置自己的 IP 地址。\n2.3 DHCP DHCP 客户端进程监听的是 68 端口号，DHCP 服务端进程监听的是 67 端口号。\n客户端首先发起 DHCP 发现报文（DHCP DISCOVER） 的 IP 数据报，由于客户端没有 IP 地址，也不知道 DHCP 服务器的地址，所以使用的是 UDP 广播通信，其使用的广播目的地址是 255.255.255.255（端口 67） 并且使用 0.0.0.0（端口 68） 作为源 IP 地址。DHCP 客户端将该 IP 数据报传递给链路层，链路层然后将帧广播到所有的网络中设备。 DHCP 服务器收到 DHCP 发现报文时，用 DHCP 提供报文（DHCP OFFER） 向客户端做出响应。该报文仍然使用 IP 广播地址 255.255.255.255，该报文信息携带服务器提供可租约的 IP 地址、子网掩码、默认网关、DNS 服务器以及 IP 地址租用期。 客户端收到一个或多个服务器的 DHCP 提供报文后，从中选择一个服务器，并向选中的服务器发送 **DHCP 请求报文（DHCP REQUEST）**进行响应，回显配置的参数。 最后，服务端用 DHCP ACK 报文对 DHCP 请求报文进行响应，应答所要求的参数。 如果租约的 DHCP IP 地址快期后，客户端会向服务器发送 DHCP 请求报文：\n服务器如果同意继续租用，则用 DHCP ACK 报文进行应答，客户端就会延长租期。 服务器如果不同意继续租用，则用 DHCP NACK 报文，客户端就要停止使用租约的 IP 地址。 可以发现，DHCP 交互中，全程都是使用 UDP 广播通信。\n2.4 NAT IPv4 的地址是非常紧缺的，在前面我们也提到可以通过无分类地址来减缓 IPv4 地址耗尽的速度，但是互联网的用户增速是非常惊人的，所以 IPv4 地址依然有被耗尽的危险。\n简单的来说 NAT 就是同个公司、家庭、教室内的主机对外部通信时，把私有 IP 地址转换成公有 IP 地址。\n这种转换表在 NAT 路由器上自动生成。例如，在 TCP 的情况下，建立 TCP 连接首次握手时的 SYN 包一经发出，就会生成这个表。而后又随着收到关闭连接时发出 FIN 包的确认应答从表中被删除。\n缺点：\n外部无法主动与 NAT 内部服务器建立连接，因为 NAPT 转换表没有转换记录。 转换表的生成与转换操作都会产生性能开销。 通信过程中，如果 NAT 路由器重启了，所有的 TCP 连接都将被重置。 解决方式：\nIPv6 NAT穿透技术：也就是说，在 NAT 穿透技术中，NAT设备后的应用程序处于主动地位，它已经明确地知道 NAT 设备要修改它外发的数据包，于是它主动配合 NAT 设备的操作，主动地建立好映射，这样就不像以前由 NAT 设备来建立映射了。 2.5 ICMP ICMP 全称是 Internet Control Message Protocol，也就是互联网控制报文协议。\n功能：确认 IP 包是否成功送达目标地址、报告发送过程中 IP 包被废弃的原因和改善网络设置等。\nICMP 大致可以分为两大类：\n一类是用于诊断的查询消息，也就是「查询报文类型」 另一类是通知出错原因的错误消息，也就是「差错报文类型」 2.6 IGMP IGMP 是因特网组管理协议，工作在主机（组播成员）和最后一跳路由之间。\nIGMP 报文向路由器申请加入和退出组播组，默认情况下路由器是不会转发组播包到连接中的主机，除非主机通过 IGMP 加入到组播组，主机申请加入到组播组时，路由器就会记录 IGMP 路由器表，路由器后续就会转发组播包到对应的主机了。 IGMP 报文采用 IP 封装，IP 头部的协议号为 2，而且 TTL 字段值通常为 1，因为 IGMP 是工作在主机与连接的路由器之间。 3 ping的工作原理 ICMP 报文是封装在 IP 包里面，它工作在网络层，是 IP 协议的助手。\n3.1 ping\u0026ndash;查询报文类型的使用 ping 命令执行的时候，源主机首先会构建一个 ICMP 回送请求消息数据包。\nICMP 数据包内包含多个字段，最重要的是两个：\n第一个是类型，对于回送请求消息而言该字段为 8； 另外一个是序号，主要用于区分连续 ping 的时候发出的多个数据包。 每发出一个请求数据包，序号会自动加 1。为了能够计算往返时间 RTT，它会在报文的数据部分插入发送时间。\n然后，由 ICMP 协议将这个数据包连同地址 192.168.1.2 一起交给 IP 层。IP 层将以 192.168.1.2 作为目的地址，本机 IP 地址作为源地址，协议字段设置为 1 表示是 ICMP 协议，再加上一些其他控制信息，构建一个 IP 数据包。\n接下来，需要加入 MAC 头。如果在本地 ARP 映射表中查找出 IP 地址 192.168.1.2 所对应的 MAC 地址，则可以直接使用；如果没有，则需要发送 ARP 协议查询 MAC 地址，获得 MAC 地址后，由数据链路层构建一个数据帧，目的地址是 IP 层传过来的 MAC 地址，源地址则是本机的 MAC 地址；还要附加上一些控制信息，依据以太网的介质访问规则，将它们传送出去。\n主机 B 收到这个数据帧后，先检查它的目的 MAC 地址，并和本机的 MAC 地址对比，如符合，则接收，否则就丢弃。\n接收后检查该数据帧，将 IP 数据包从帧中提取出来，交给本机的 IP 层。同样，IP 层检查后，将有用的信息提取后交给 ICMP 协议。\n主机 B 会构建一个 ICMP 回送响应消息数据包，回送响应数据包的类型字段为 0，序号为接收到的请求数据包中的序号，然后再发送出去给主机 A。\n在规定的时候间内，源主机如果没有接到 ICMP 的应答包，则说明目标主机不可达；如果接收到了 ICMP 回送响应消息，则说明目标主机可达。此时，源主机会检查，用当前时刻减去该数据包最初从源主机上发出的时刻，就是 ICMP 数据包的时间延迟。\n可以看出 ping 这个程序是使用了 ICMP 里面的 ECHO REQUEST（类型为 8 ） 和 ECHO REPLY （类型为 0）。\n3.2 traceroute\u0026ndash;差错报文类型的使用 traceroute 的第一个作用就是故意设置特殊的 TTL，来追踪去往目的地时沿途经过的路由器。它的原理就是利用 IP 包的生存期限 从 1 开始按照顺序递增的同时发送 UDP 包，强制接收 ICMP 超时消息的一种方法。\ntraceroute 还有一个作用是故意设置不分片，从而确定路径的 MTU。这样做的目的是为了路径MTU发现。因为有的时候我们并不知道路由器的 MTU 大小，以太网的数据链路上的 MTU 通常是 1500 字节，但是非以太网的 MTU 值就不一样了，所以我们要知道 MTU 的大小，从而控制发送的包大小。\n3.3 断网了，还能 ping 通 127.0.0.1 吗？ 在IPV4下的回环地址是 127.0.0.1，在IPV6下，表达为 ::1 。中间把连续的0给省略了，之所以不是7个 冒号，而是2个冒号， 是因为一个 IPV6 地址中只允许出现⼀次两个连续的冒号。\n从应用层到传输层再到网络层。这段路径跟ping外网的时候是几乎是一样的。到了网络层，系统会根据目的IP，在路由表中获取对应的路由信息，而这其中就包含选择哪个网卡把消息发出。\n当发现目标IP是外网IP时，会从\u0026quot;真网卡\u0026quot;发出。\n当发现目标IP是回环地址时，就会选择本地网卡。\n本地网卡，其实就是个**\u0026ldquo;假网卡\u0026rdquo;，它不像\u0026quot;真网卡\u0026quot;那样有个ring buffer什么的，\u0026ldquo;假网卡\u0026quot;会把数据推到一个叫 input_pkt_queue 的 链表 中。这个链表，其实是所有网卡共享的，上面挂着发给本机的各种消息。** 消息被发送到这个链表后，会再触发一个软中断。\n专门处理软中断的工具人**\u0026ldquo;ksoftirqd\u0026rdquo;** （这是个内核线程），它在收到软中断后就会立马去链表里把消息取出，然后顺着数据链路层、网络层等层层往上传递最后给到应用程序。\nping回环地址和ping本机地址没有区别。\n3.3 127.0.0.1和localhost和0.0.0.0的区别 127.0.0.1 是回环地址。localhost是域名，但默认等于 127.0.0.1，可以在 /etc/hosts 文件下进行修改。默认情况下，使用 localhost 跟使用 127.0.0.1 确实是没区别的。 执行 ping 0.0.0.0 ，是会失败的，因为它在IPV4中表示的是无效的目标地址。启动服务器的时候，一般会 listen 一个 IP 和端口，等待客户端的连接。如果此时 listen 的是本机的 0.0.0.0 , 那么它表示本机上的所有IPV4地址。 如果服务器 listen 的是 0.0.0.0，那么此时用127.0.0.1和本机地址都可以访问到服务。 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/new/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/ip/","summary":"\u003ch2 id=\"1-ip基础知识\"\u003e1 IP基础知识\u003c/h2\u003e\n\u003ch4 id=\"11-ipv4地址分类\"\u003e1.1 IPv4地址分类\u003c/h4\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e主机号全0或者全1有特殊意义：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e全0：指定某个网络\u003c/li\u003e\n\u003cli\u003e全1：指定某个网络下全部主机\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"12-无分类地址cidr\"\u003e1.2 无分类地址CIDR\u003c/h4\u003e\n\u003cp\u003e表示形式 \u003ccode\u003ea.b.c.d/x\u003c/code\u003e，其中 \u003ccode\u003e/x\u003c/code\u003e 表示前 x 位属于\u003cstrong\u003e网络号\u003c/strong\u003e，x 的范围是 \u003ccode\u003e0 ~ 32\u003c/code\u003e，这就使得 IP 地址更加具有灵活性。\u003c/p\u003e\n\u003cp\u003e还有另一种划分网络号与主机号形式，那就是\u003cstrong\u003e子网掩码\u003c/strong\u003e，掩码的意思就是掩盖掉主机号，剩余的就是网络号。\u003c/p\u003e\n\u003ch4 id=\"13-公有ip地址和私有ip地址\"\u003e1.3 公有IP地址和私有IP地址\u003c/h4\u003e\n\u003cp\u003e公有 IP 地址是有个组织统一分配的，假设你要开一个博客网站，那么你就需要去申请购买一个公有 IP，这样全世界的人才能访问。\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003ch4 id=\"14-ipv6\"\u003e1.4 IPv6\u003c/h4\u003e\n\u003cp\u003eIPv4 的地址是 32 位的，大约可以提供 42 亿个地址，但是 IPv6 的地址是 \u003ccode\u003e128\u003c/code\u003e 位的。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIPv6 可自动配置，即使没有 DHCP 服务器也可以实现自动分配IP地址，\u003cstrong\u003e便捷到即插即用\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003eIPv6 包头包首部长度采用固定的值 \u003ccode\u003e40\u003c/code\u003e 字节，去掉了包头校验和，简化了首部结构，减轻了路由器负荷，大大\u003cstrong\u003e提高了传输的性能\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003eIPv6 有应对伪造 IP 地址的网络安全功能以及防止线路窃听的功能，大大\u003cstrong\u003e提升了安全性\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"15-ipv4和ipv6首部\"\u003e1.5 IPv4和IPv6首部\u003c/h4\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003ch2 id=\"2-相关协议\"\u003e2 相关协议\u003c/h2\u003e\n\u003ch4 id=\"21-dns\"\u003e2.1 DNS\u003c/h4\u003e\n\u003cp\u003e将域名网址自动转换为具体的 IP 地址，域名的层级关系类似一个树状结构：\u003c/p\u003e","title":"IP"},{"content":"MongoDB MongoDB 是一个基于 分布式文件存储 的开源 NoSQL 数据库系统，由 C++ 编写的。MongoDB 提供了 面向文档 的存储方式，操作起来比较简单和容易，支持“无模式”的数据建模，可以存储比较复杂的数据类型，是一款非常流行的 文档类型数据库 。 在高负载的情况下，MongoDB 天然支持水平扩展和高可用，可以很方便地添加更多的节点/实例，以保证服务性能和可用性。在许多场景下，MongoDB 可以用于代替传统的关系型数据库或键/值存储方式，皆在为 Web 应用提供可扩展的高可用高性能数据存储解决方案。\n1 MongoDB基础 1.1 MongoDB存储结构 MongoDB 的存储结构区别于传统的关系型数据库，主要由如下三个单元组成：\n文档（Document）：MongoDB 中最基本的单元，由 BSON 键值对（key-value）组成，类似于关系型数据库中的行（Row）。 集合（Collection）：一个集合可以包含多个文档，类似于关系型数据库中的表（Table）。 数据库（Database）：一个数据库中可以包含多个集合，可以在 MongoDB 中创建多个数据库，类似于关系型数据库中的数据库（Database）。 也就是说，MongoDB 将数据记录存储为文档 （更具体来说是BSON 文档open in new window），这些文档在集合中聚集在一起，数据库中存储一个或多个文档集合。\n与SQL的术语对比\nSQL MongoDB Table（表） Collection（集合） Row（行） Document（文档） Col（列） Field（字段） Primary Key（主键） Object ID （对象ID） Index（索引） Index（索引） Embedded Table（嵌套表） Embedded Document（嵌入式文档） Array（数组） Array（数组） 1.2 MongoDB特点 数据记录被存储为文档：MongoDB 中的记录就是一个 BSON 文档，它是由键值对组成的数据结构，类似于 JSON 对象，是 MongoDB 中的基本数据单元。 模式自由：集合的概念类似 MySQL 里的表，但它不需要定义任何模式，能够用更少的数据对象表现复杂的领域模型对象。 支持多种查询方式：MongoDB 查询 API 支持读写操作 (CRUD)以及数据聚合、文本搜索和地理空间查询。 支持 ACID 事务：NoSQL 数据库通常不支持事务，为了可扩展和高性能进行了权衡。不过，也有例外，MongoDB 就支持事务。与关系型数据库一样，MongoDB 事务同样具有 ACID 特性。MongoDB 单文档原生支持原子性，也具备事务的特性。MongoDB 4.0 加入了对多文档事务的支持，但只支持复制集部署模式下的事务，也就是说事务的作用域限制为一个副本集内。MongoDB 4.2 引入了分布式事务，增加了对分片集群上多文档事务的支持，并合并了对副本集上多文档事务的现有支持。 高效的二进制存储：存储在集合中的文档，是以键值对的形式存在的。键用于唯一标识一个文档，一般是 ObjectId 类型，值是以 BSON 形式存在的。BSON = Binary JSON， 是在 JSON 基础上加了一些类型及元数据描述的格式。 自带数据压缩功能：存储同样的数据所需的资源更少。 支持 mapreduce：通过分治的方式完成复杂的聚合任务。不过，从 MongoDB 5.0 开始，map-reduce 已经不被官方推荐使用了，替代方案是 聚合管道open in new window。聚合管道提供比 map-reduce 更好的性能和可用性。 支持多种类型的索引：MongoDB 支持多种类型的索引，包括单字段索引、复合索引、多键索引、哈希索引、文本索引、 地理位置索引等，每种类型的索引有不同的使用场合。 支持 failover：提供自动故障恢复的功能，主节点发生故障时，自动从从节点中选举出一个新的主节点，确保集群的正常使用，这对于客户端来说是无感知的。 支持分片集群：MongoDB 支持集群自动切分数据，让集群存储更多的数据，具备更强的性能。在数据插入和更新时，能够自动路由和存储。 支持存储大文件：MongoDB 的单文档存储空间要求不超过 16MB。对于超过 16MB 的大文件，MongoDB 提供了 GridFS 来进行存储，通过 GridFS，可以将大型数据进行分块处理，然后将这些切分后的小文档保存在数据库中。 1.3 MongoDB应用场景 MongoDB 的优势在于其数据模型和存储引擎的灵活性、架构的可扩展性以及对强大的索引支持。\n选用 MongoDB 应该充分考虑 MongoDB 的优势，结合实际项目的需求来决定：\n随着项目的发展，使用类 JSON 格式（BSON）保存数据是否满足项目需求？MongoDB 中的记录就是一个 BSON 文档，它是由键值对组成的数据结构，类似于 JSON 对象，是 MongoDB 中的基本数据单元。 是否需要大数据量的存储？是否需要快速水平扩展？MongoDB 支持分片集群，可以很方便地添加更多的节点（实例），让集群存储更多的数据，具备更强的性能。 是否需要更多类型索引来满足更多应用场景？MongoDB 支持多种类型的索引，包括单字段索引、复合索引、多键索引、哈希索引、文本索引、 地理位置索引等，每种类型的索引有不同的使用场合。 2 MongoDB 存储引擎 3 MongoDB 聚合 4 MongoDB事务 5 MongoDB数据压缩 6 MongoDB 索引 7 MongoDB 高可用 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/database/nosql/mongodb/","summary":"\u003ch1 id=\"mongodb\"\u003eMongoDB\u003c/h1\u003e\n\u003cp\u003eMongoDB 是一个基于 \u003cstrong\u003e分布式文件存储\u003c/strong\u003e 的开源 NoSQL 数据库系统，由 \u003cstrong\u003eC++\u003c/strong\u003e 编写的。MongoDB 提供了 \u003cstrong\u003e面向文档\u003c/strong\u003e 的存储方式，操作起来比较简单和容易，支持“\u003cstrong\u003e无模式\u003c/strong\u003e”的数据建模，可以存储比较复杂的数据类型，是一款非常流行的 \u003cstrong\u003e文档类型数据库\u003c/strong\u003e 。\n在高负载的情况下，MongoDB 天然支持水平扩展和高可用，可以很方便地添加更多的节点/实例，以保证服务性能和可用性。在许多场景下，MongoDB 可以用于代替传统的关系型数据库或键/值存储方式，皆在为 Web 应用提供可扩展的高可用高性能数据存储解决方案。\u003c/p\u003e\n\u003ch1 id=\"1-mongodb基础\"\u003e1 MongoDB基础\u003c/h1\u003e\n\u003ch2 id=\"11-mongodb存储结构\"\u003e1.1 MongoDB存储结构\u003c/h2\u003e\n\u003cp\u003eMongoDB 的存储结构区别于传统的关系型数据库，主要由如下三个单元组成：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e文档（Document）\u003c/strong\u003e：MongoDB 中最基本的单元，由 BSON 键值对（key-value）组成，类似于关系型数据库中的行（Row）。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e集合（Collection）\u003c/strong\u003e：一个集合可以包含多个文档，类似于关系型数据库中的表（Table）。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e数据库（Database）\u003c/strong\u003e：一个数据库中可以包含多个集合，可以在 MongoDB 中创建多个数据库，类似于关系型数据库中的数据库（Database）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e也就是说，MongoDB 将数据记录存储为文档 （更具体来说是\u003ca href=\"https://www.mongodb.com/docs/manual/core/document/#std-label-bson-document-format\"\u003eBSON 文档open in new window\u003c/a\u003e），这些文档在集合中聚集在一起，数据库中存储一个或多个文档集合。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e与SQL的术语对比\u003c/strong\u003e\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e\u003cstrong\u003eSQL\u003c/strong\u003e\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e\u003cstrong\u003eMongoDB\u003c/strong\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eTable（表）\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCollection（集合）\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eRow（行）\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eDocument（文档）\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eCol（列）\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eField（字段）\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ePrimary Key（主键）\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eObject ID （对象ID）\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eIndex（索引）\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eIndex（索引）\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eEmbedded Table（嵌套表）\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eEmbedded Document（嵌入式文档）\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eArray（数组）\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eArray（数组）\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"12-mongodb特点\"\u003e1.2 MongoDB特点\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e数据记录被存储为文档\u003c/strong\u003e：MongoDB 中的记录就是一个 BSON 文档，它是由键值对组成的数据结构，类似于 JSON 对象，是 MongoDB 中的基本数据单元。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e模式自由\u003c/strong\u003e：集合的概念类似 MySQL 里的表，但它不需要定义任何模式，能够用更少的数据对象表现复杂的领域模型对象。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e支持多种查询方式\u003c/strong\u003e：MongoDB 查询 API 支持读写操作 (CRUD)以及数据聚合、文本搜索和地理空间查询。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e支持 ACID 事务\u003c/strong\u003e：NoSQL 数据库通常不支持事务，为了可扩展和高性能进行了权衡。不过，也有例外，MongoDB 就支持事务。与关系型数据库一样，MongoDB 事务同样具有 ACID 特性。MongoDB 单文档原生支持原子性，也具备事务的特性。MongoDB 4.0 加入了对多文档事务的支持，但只支持复制集部署模式下的事务，也就是说事务的作用域限制为一个副本集内。MongoDB 4.2 引入了分布式事务，增加了对分片集群上多文档事务的支持，并合并了对副本集上多文档事务的现有支持。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e高效的二进制存储\u003c/strong\u003e：存储在集合中的文档，是以键值对的形式存在的。键用于唯一标识一个文档，一般是 ObjectId 类型，值是以 BSON 形式存在的。BSON = Binary JSON， 是在 JSON 基础上加了一些类型及元数据描述的格式。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e自带数据压缩功能\u003c/strong\u003e：存储同样的数据所需的资源更少。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e支持 mapreduce\u003c/strong\u003e：通过分治的方式完成复杂的聚合任务。不过，从 MongoDB 5.0 开始，map-reduce 已经不被官方推荐使用了，替代方案是 \u003ca href=\"https://www.mongodb.com/docs/manual/core/aggregation-pipeline/\"\u003e聚合管道open in new window\u003c/a\u003e。聚合管道提供比 map-reduce 更好的性能和可用性。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e支持多种类型的索引\u003c/strong\u003e：MongoDB 支持多种类型的索引，包括单字段索引、复合索引、多键索引、哈希索引、文本索引、 地理位置索引等，每种类型的索引有不同的使用场合。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e支持 failover\u003c/strong\u003e：提供自动故障恢复的功能，主节点发生故障时，自动从从节点中选举出一个新的主节点，确保集群的正常使用，这对于客户端来说是无感知的。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e支持分片集群\u003c/strong\u003e：MongoDB 支持集群自动切分数据，让集群存储更多的数据，具备更强的性能。在数据插入和更新时，能够自动路由和存储。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e支持存储大文件\u003c/strong\u003e：MongoDB 的单文档存储空间要求不超过 16MB。对于超过 16MB 的大文件，MongoDB 提供了 GridFS 来进行存储，通过 GridFS，可以将大型数据进行分块处理，然后将这些切分后的小文档保存在数据库中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"13-mongodb应用场景\"\u003e1.3 MongoDB应用场景\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eMongoDB 的优势在于其数据模型和存储引擎的灵活性、架构的可扩展性以及对强大的索引支持。\u003c/strong\u003e\u003c/p\u003e","title":"MongoDB"},{"content":"MySQL 0 参考资料 黑马程序员 MySQL数据库入门到精通\n图解MySQL介绍\nMySQL | CS-Notes 面试笔记\nMySQL面试题\nMySQL常见面试题总结\nSQL语句 通用语法\n分号结尾，可多行书写 不区分大小写 注释采用\u0026ndash;、#、/**/ 分类\nDDL(Data Defination Language): 数据定义语言，用来定义数据库对象（数据库，表，字段）。 DML(Data Manipulation Language): 数据操作语言，用来对数据库表中数据进行增删改 DQL(Data Query Language): 数据查询语言，用来查询数据库中表的记录。 DCL(Data Control Language): 数据控制语言，用来创建数据库用户、控制数据库访问权限。 1 存储引擎 1.1 MySQL体系结构 连接层：负责连接处理、授权认证，以及相关的安全服务。 服务层：提供SQL借口，完成缓存查询，SQL的分析和优化，部分内置函数的执行，跨存储引擎功能的实现（过程、函数等）。 引擎层：负责数据的存储和提取，服务层通过API和存储引擎通话，不同存储引擎有不同功能。 存储层：将数据存储在文件系统上，完成于存储引擎的交互。 1.2 存储引擎特点 InnoDB：支持事务、支持行级锁、支持外键。 MyISAM：不支持事务，支持表级锁，访问速度快。 Memory：数据存放在内存，访问速度快，支持Hash索引。 2 索引 索引是帮助MySql高效获取数据的数据结构。\n2.1 索引结构 索引是在存储引擎层实现的，不同存储引擎有不同的结构\n索引结构 描述 B+Tree索引 大部分存储引擎都支持 Hash索引 底层使用Hash表实现，针对精确匹配有效，不支持范围查询 R-Tree索引（空间索引） MyISAM引擎拥有的特殊索引，用于地理空间数据类型 Full-Text索引 倒排索引，类似于Lucene、ES InnoDB和MyISAM都支持B+Tree索引和全文索引。\n2.1.1 B+Tree索引 为什么不用二叉搜索树？ 顺序插入会退化成链表，查询效率降低，并且层数较深。\n为什么不用红黑树？ 大数据量的情况下，层级较深。\nB-Tree（多路平衡查找树）如何呢？ 以一个最大度数为5的B-Tree为例。\nB-Tree插入节点时，中间节点向上分裂。\nB+Tree 所有的数据都会存储在叶子结点，叶子结点用链表相连。\nMySQL中的B+Tree索引 在原来B+Tree的基础上，增加了一个指向相邻叶子结点的链表指针，形成带有顺序指针的B+Tree，提高了区间访问性能。\n2.1.2 Hash索引 采用一定的hash算法，将键值换算成新的hash值，映射到对应槽位上，然后存储在hash表中。\n如果两个或多个键值映射到同一个槽位上，会产生hash冲突（hash碰撞），可以采用链表来解决。\nHash索引只能用于对等比较（=，in），不支持范围查询（between， \u0026gt;, \u0026lt;, …）。 无法利用索引完成排序操作。 查询效率高，仅需要一次检索，检索效率通常高于B+Tree。 MySQL中，Memory存储引擎支持Hash索引，InnoDB具有自适应Hash功能，Hash索引是存储引擎根据B+Tree索引在指定条件下自动构建的。 2.1.3 为什么InnoDB存储引擎选用B+Tree索引结构 相对于二叉搜索树，层级更少，搜索效率更高。\n相对于B-Tree，无论是叶子结点还是非叶子结点，都会保存数据，这样导致一页中存储的键值减少，指针跟着减少，要保存同样大量的数据，只能增加高度，从而降低效率。\n相对于hash索引，B+Tree支持范围查询。\n2.2 索引分类 分类 含义 特点 关键字 主键索引 针对表中主键创建的索引 默认自动创建，只能有一个 PRIMARY 唯一索引 避免同一个表中某列中的值重复 可以有多个 UNIQUE 常规索引 快速定位特定数据 可以有多个 全文索引 全文索引查找的是文本中的关键词，而不是比较索引中的值 可以有多个 FULLTEXT 对某一个字段设置唯一约束时，会生成唯一索引。\n在InnoDB中，根据索引的存储形式，又可以分为以下两种：\n分类 含义 特点 聚集索引（Clustered Index） 将数据存储于索引存储放到一起，索引结构的叶子结点保存了行数据。 必须有，而且只有一个 二级索引（Secondary Index） 将数据与索引分开存储，索引结构的叶子结点关联的是对应的主键。 可以存在多个 聚集索引选取规则：\n存在主键，主键索引就是聚集索引。 不存在主键，将第一个唯一索引作为聚集索引。 如果没有主键也没有唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。 回表查询：查询涉及二级索引时，现在二级索引中获取ID值，然后再回到聚簇索引中按照ID查询值。 2.3 索引语法 2.3.1 创建索引 CREATE [UNIQUE | FULLTEXT] INDEX index_name ON table_name(index_col_name, ...); 注意：创建联合索引时，字段之间的顺序很重要！\n2.3.2 查看索引 SHOW INDEX FROM table_name; 2.3.3 删除索引 DROP INDEX index_name ON table_name; 2.4 SQL性能分析 SQL执行频率 SHOW [session|global] status; %查看服务器状态信息 SHOW global status LIKE \u0026#39;Com_______\u0026#39;; 可以查看数据库CURD的访问频次。\n慢查询日志 慢查询日志记录了所有执行时间超过指定时间参数的所有SQL语句的日志。默认没有开启，需要在/etc/my.cnf中设置。\nSHOW variables LIKE \u0026#39;slow_query_log\u0026#39;; %查看慢查询日志是否开启 日志文件存储在/var/lib/mysql/localhost-slow.log中。\nprofile详情 SELECT @@have_profiling; %查看是否支持profile详情 SET [session|global] profiling=1; %开启profiling SELECT @@profiling; %查看是否开启profiling SHOW profiles; %查看每一条SQL的基本耗时情况 SHOW profile for query query_id; % 查看指定query_id的各阶段SQL耗时 SHOW profile cpu for query query_id; % 查看指定query_id的cpu使用情况 explain执行计划 [EXPLAIN|DESC] SELECT * FROM table_nale WHERE cond; %直接在查询语句前加EXPLAIN或DESC 字段解释\nid：select查询的序列号，表示查询中执行select子句或者操作表的顺序（id相同，执行顺序从上到下，id不同，值越大越先执行）。 select_type：表示select类型，有SIMPLE（简单查询，不实用子查询和连接）、PRIMARY（主查询，外层的查询）、UNION（union中第二个或者后面的查询）、SUBQUERY（SELECT/WHERE后包含了子查询）等。 type：表示连接类型，性能由好到差为NULL、system、const（主键或唯一索引）、eq_ref、ref（非唯一索引）、range、index（使用了索引但是遍历索引）、all（全表扫描）。 possible_keys：可能用到的索引 key：实际用到的索引，如果为NULL，表示没有用到索引 key_len：表示使用到的索引的字节数，最大可能长度，并不是实际使用长度。 rows：执行查询的行数，InnoDB中为预估值。 filtered：返回行数占总读取行数的百分比，越大越好。 extra：额外信息。 2.5 索引使用规则 2.5.1 最左前缀 如果索引了多列，要遵循最左前缀法则。即查询从索引的最左列开始，并且不跳过索引中的列；::如果跳过某一列，索引将部分失效(存在即可，不要求顺序)::。\n2.5.2 范围查询 联合索引中，出现范围查询（\u0026gt;, \u0026lt;），范围查询右侧的列索引失效。业务允许的条件下，使用（\u0026gt;=, \u0026lt;=）。\n2.5.3 索引失效 范围查询，如上 不要在索引列上进行运算，否则索引失效 字符串类型字段不加引号 模糊查询LIKE使用%开头 or连接的条件，只要有一个没有索引，所有的索引都会失效 数据分布影响，如果MySQL评估使用索引比不使用索引还慢，则索引失效 2.5.4 SQL提示 当联合索引和单列索引同时存在时，MySQL会默认使用联合索引。\n可以使用SQL提示指定使用的索引：\nSELECT * FROM table_name USE index(index_name) WHERE cond; SELECT * FROM table_name IGNORE index(index_name) WHERE cond; SELECT * FROM table_name FORCE index(index_name) WHERE cond; 2.5.5 覆盖索引 查询使用了索引，并且需要返回的值在索引中全部可以找到。\n2.5.6 前缀索引 当字段类型为字符串时，有时需要索引很长的字符串，会使得索引变得很大，影响查询效率。\n此时可以将字符串一部分前缀建立索引。\nCREATE INDEX index_name ON table_name(column(n)); %对某列前n个字符建立索引 2.5.7 单列索引和联合索引选择 业务场景中存在多个查询条件是，建议设置联合索引，因为MySQL可能会自动选择单列索引，造成回表操作。\n2.5.8 索引下堆 2.6 索引设计原则 数据量大，查询频繁的表，需要建立索引 对常作为where、order by、group by子句条件的字段建立索引 尽量选择区分度高的字段建立索引 对于字符串字段，如果较长，选择区分度高的前缀设置索引 尽量使用联合索引 控制索引数量，索引多了会影响增删改操作效率 如果索引列不能存储NULL值，创建表是使用NOT NULL约束限制。 3 锁 3.1 全局锁 对整个数据库实例加锁，仅可读，不可加锁后的写操作将被阻塞。\n应用场景：全库的逻辑备份，对所有的表进行锁定，从而获取一致性的视图。\n如果在主库上备份，备份期间不能更新，业务停摆 如果在从库上备份，备份期间从库不能执行从主库同步过来的二进制日志（bin log），会造成主从延迟。 在InnoDB中，可以在备份时加上—single-transaction实现不加锁的一致性数据库备份（快照）。 3.2 表级锁 每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中。\n表锁 元数据锁（meta data lock， MDL） 意向锁 3.2.1 表锁 表共享读锁（S锁） 表独占写锁（X锁，排他锁） lock tables table_name read/write; unlock tables; 3.2.2 元数据锁 MDL加锁过程是系统自动控制的，无需显式使用，访问一张表时会自动加上。\nMDL锁的主要作用是维护表元素的数据一致性，在表上有活动事务时，不可以对元数据进行写入操作。为了避免DML与DDL冲突，保证读写的正确性。\n对一张表进行增删改查的时候，会加MDL读锁（共享锁），对表的结构进行修改时，会加MDL写锁（排他锁）。\n3.2.3 意向锁 意向共享锁（IS锁）：与表共享锁兼容，与表排他锁不兼容。 SELECT ... lock in share mode; 意向排他锁（IX锁）：与表共享锁和表排他锁都互斥。意向锁之间不互斥。 INSERT[UPDATE|DELETE|SELECT] ... for update; 注意：::意向锁仅和表级锁互斥::。 3.3 行级锁 行级锁，每次锁住的是对应的行数据，锁定粒度最小，发生所冲突概率最低，并发度最高。应用在InnoDB中。\n在InnoDB中，由于数据是基于索引组织的，行锁是通过对索引上的索引项实现的，而不是对记录加的锁。\n行锁（Record Lock）：锁定单个记录的锁，防止其他事务对此记录进行update和delete。在RC、RR隔离级别下都支持。 间隙锁（Gap Lock）：锁定记录的间隙，确保索引记录的间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下支持。 临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住前面的间隙Gap。在RR隔离级别下支持。 3.3.1 行锁 共享锁（S）：允许一个事务读取一行，阻止其他事务获得相同数据集的排他锁。 排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获取相同数据集的共享锁和排他锁。 在默认情况下，InnoDB在Repeatable Read（RR）事务隔离级别下运行，InnoDB使用next-key锁进行搜索和索引扫描，以防止幻读：\n针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将自动优化为行锁。 InnoDB的行锁是针对索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中所有记录加锁，此时就会升级为表锁。 3.3.2 间隙锁和临键锁 在默认情况下，InnoDB在Repeatable Read（RR）事务隔离级别下运行，InnoDB使用next-key锁进行搜索和索引扫描，以防止幻读：\n索引上的等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁。 索引上的等值查询（普通索引），向右遍历时最后一个值不满足查询需求时，next-key lock退化为间隙锁。即对符合条件的行加记录锁，并对其前后的间隙加间隙锁。 索引上的范围查询（唯一索引），会访问到不满足条件的第一个值为止。 间隙锁之间不互斥。 4 事务 事务是一组操作的集合，是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即::要么同时成功，要么同时失败。::\nBEGIN; %事务开启 ... ROLLBACK; % 事务回滚 COMMIT; %事务提交 START TRANSACTION; %事务开启 ...; COMMIT; ROLLBACK; MySQL的事务是自动提交的，当执行一条DML语句时，MySQL会立即隐式地提交事务。\n4.1 事务特性ACID 原子性（Atomicity）：事务是不可分割的最小单位，要么全部成功，要么全部失败。 一致性（Consistency）：事务完成时，必须是所有数据的状态保持一致。 隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。 持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。 4.2 事务并发问题 脏读：一个事务读取到另一个事务还没有提交的数据。 不可重复读：一个事务先后读取同一条数据，但是两次读取的数据不同。 幻读：一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在了，好像出现了“幻觉”。 4.3 事务隔离级别 隔离级别 脏读 不可重复读 幻读 Read Uncommitted ✔ ✔ ✔ Read Committed ❌ ✔ ✔ Repeatable Read ❌ ❌ ✔ Serializable ❌ ❌ ❌ InnoDB默认事务隔离级别为RR，而Oracle的默认隔离级别为RC。 可串行化级别事务会阻塞。 隔离级别越高，数据越安全，但是性能越低。 5 InnoDB存储引擎 5.1 逻辑存储结构 表空间（Tablespace）：会对应一个ibd文件，一个MySQL实例可以对应多个表空间，用于存储记录、索引等数据。 段（Segment）：分为数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段（Rollback segment），InnoDB是索引组织表，数据段就是B+树的叶子节点，索引段即为B+树的非叶子节点。段用来管理多个Extent（区）。 区（Extent）：表空间的单元结构，每个区的大小为1M，默认情况下，InnoDB存储引擎页的大小为16K，即一个区中有64个连续的页。 页（Page）：是InnoDB存储引擎磁盘管理的最小单元，每个页默认大小为16KB。为了保证页的连续性，InnoDB每次从磁盘申请4-5个区。 行（Row）：InnoDB存储引擎数据是按行存放的 Trx_id 每次对某条记录进行改动时，都会把对应事务的ID赋给该隐藏字段。 Roll_pointer 每次对某条记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列就相当于一个指针，可通过它来找到该记录修改前的信息。 5.2 架构 乍一看非常复杂，实际上相当复杂。 5.2.1 内存架构 Buffer Pool：缓冲池是主存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在CURD操作时，先操作缓冲池中的数据，然后以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。\n缓冲池以Page页为单位，底层采用链表数据结构管理Page。根据状态，将Page分为三种类型： free page：空闲page，未被使用 clean page：被使用的page，数据没有被修改过。 dirty page：脏页，被使用的page，数据被修改过，页中数据与磁盘的数据产生了不一致。 Change Buffer：更改缓冲区（针对于非唯一的二级索引页），在执行DML语句时，如果这些数据Page没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更保存在更改缓冲区Change Buffer中，在未来数据被读取时，再将数据合并恢复到Buffer Pool中，再将合并后的数据刷新道磁盘中。\nAdaptive Hash Index：自适应hash索引，用于优化对Buffer Pool数据的查询。InnoDB存储引擎会监控表上各索引页的查询，如果观察到hash索引可以提升速度，则建立hash索引，称之为自适应hash索引。\nLog Buffer：日志缓冲区，用来保存要写入到磁盘中的日志（redo log、undo log），默认大小为16MB，日志缓冲区的日志会定期刷新道磁盘中。如果需要更新、插入或者删除许多行的事务，增加日志缓冲区的大小可以节省磁盘I/O。\ninnodb_log_buffer_size：缓冲区大小 innodb_flush_log_at_trx_commit：日志刷新到磁盘时机 0：每秒将日志写入并刷新到磁盘一次； 1：日志在每次事务提交时写入并刷新到磁盘一次； 2：日志再每次事务提交后写入，并每秒刷星到磁盘一次。 5.2.2 磁盘结构 System Tablespace：系统表空间是更改缓冲区的存储区域。如果表示在系统表空间而不是每个表文件或通用表空间中创建的，他也可能包含表和索引数据。（再MySQL 5.x版本中还包含InnoDB数据字典、undo log等）。\nFile-Per-Table Tablespaces：每个表的文件表空间包含单个InnoDB表的数据和索引，并存储在文件系统上的单个数据文件中。\nGeneral Tablespaces：通用表空间，需要通过Create tablespace语法创建通用表空间，在创建表时，可以指定该表空间。\nUndo Tablespaces：撤销表空间，MySQL实例在初始化时会自动创建两个默认的undo表空间（初始大小为16M），用于存储undo log日志。\nTemporary Tablespaces：InnoDB使用绘画临时表空间和全局临时表空间。存储用户创建的临时表等数据。\nDoublewrite Buffer Files：双写缓冲区，InnoDB引擎将数据也从Buffer Pool刷新到磁盘前，先将数据页写入双写缓冲区文件中，便于系统异常时恢复数据。\nRedo log：重做日志，用来实现事务的持久性。该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（rodo log），前者是在内存中，后者再磁盘中。当事务提交之后会把所有修改信息都存放到该日志中，用于刷新脏页到磁盘时，发生错误进行数据恢复使用。\n5.2.3 后台线程 将InnoDB存储引擎缓冲池中数据刷新到磁盘中。\nMaster Thread：核心后台线程，负责调度其他线程，还负责将缓冲池中的数据异步刷新到磁盘中，保持数据的一致性，还包括脏页的刷新、合并插入缓存、undo页的回收。 IO Thread：再InnoDB中使用了大量的AIO来处理IO请求，这样可以极大地提高数据库性能，而IO Thread主要负责这些IO请求的回调。 线程类型 默认个数 职责 Read Thread 4 负责读操作 Write Thread 4 负责写操作 Log Thread 1 负责将日志缓冲区刷新到磁盘 Insert Buffer Thread 1 负责将写缓冲区内容刷新到磁盘 Purge Thread：用于回收事务已经提交了的undo log，在事务提交之后，undo log可能不用了，就用它来回收。 Page Cleaner Thread：协助Master Thread刷新脏页到磁盘的线程，它可以减轻Master Thread 的工作压力，减少阻塞。 5.3 事务原理 对于事务的原子性、一致性和持久性，InnoDB是通过redo log和undo log实现的； 而隔离性，InnoDB是通过锁机制和MVCC实现的。 5.3.1 redo log 重做日志，记录的是事务提交时数据页的物理修改，用来实现事务的持久性。\n由两部分组成：\n重做日志缓冲（redo log buffer）：位于内存 重做日志文件（redo log file）：位于磁盘 事务提交之后，会把所有修改信息都存到该日志文件中，用于在脏页刷新到磁盘发生错误时，进行数据恢复使用。\n5.3.2 undo log 回滚日志，用于记录数据被修改前的信息，作用包含：提供回滚和MVCC（多版本并发控制）。\nundo log 和redo log 记录物理日志不一样，它是逻辑日志。可以认为当delete一条数据时，undo log中会记录一条对应的insert记录，反之亦然，当undate一条记录时，他记录一条相反的update记录。当执行rollback时，就可以从undo log 中的逻辑记录读取到i相应的内容进行回滚。\nUndo log 销毁：undo log在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些日志可能还用于MVCC。 Undo log 存储：undo log采用段的方式进行管理和记录，存放在rollback segment回滚段中，内部包含1024个undo log segment。 6 MVCC（多版本并发控制） 6.1 基本概念 当前读：读取的时记录的最新版本，保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。 快照读：简单的select（不加锁）就是快照读，读取的是记录的可见版本，有可能是历史数据，不加锁，是非阻塞读。 RC：每次select，都生成一个快照读； RR：开启事务后，第一个select语句才是快照读开启的地方； S：快照读会退化为当前读。 MVCC(Multi-Version Concurrency Control)：多版本并发控制。维护一个数据的多个版本，是的读写操作没有冲突，快照读为MySQL的MVCC提供了一个非阻塞读的功能。MVCC的具体实现，依赖于数据库中的三个隐藏字段、undo log日志、readView。 6.2 三个隐藏字段 DB_TRX_ID：最近修改事务的ID，记录插入这条记录或最后一次修改该记录的事务ID。 DB_ROLL_PTR：回滚指针，指向这条记录的上一个版本，用于配合undo log，指向上一个版本。 DB_ROW_ID：隐藏主键，如果表结构中没有指定主键，将会生成该隐藏字段。 6.3 undo log版本链 不同事务或相同事务对同一条记录进行修改，会导致该记录的undolog生成一条记录版本链表，链表头部是最新的旧记录，尾部是最早的旧记录。\n6.4 ReadView ReadView（读视图）是快照读SQL执行时MVCC提取数据的依据，记录并维护当前活跃的事务（未提交）ID。\n包括四个核心字段：\n字段 含义 m_ids 当前活跃的事务ID集合 min_trx_id 最小活跃事务ID max_trx_id 预分配事务ID，当前最大事务ID+1 creator_trx_id ReadView创建者的事务ID 版本链数据访问规则(trx_id为记录中隐藏字段记录的事务id)：\ntrx_id==creator_trx_id: 可以访问该版本，说明数据时当前这个事务修改的。 trx_id\u0026lt;min_trx_id: 可以访问该版本，说明数据已经提交了。 trx_id\u0026gt;max_trx_id: 不可以访问该版本，说明事务是在ReadView生成后才开始的。 min_trx_id≤trx_id≤max_trx_id: 如果trx_id不在m_ids中，是可以访问该版本的，说明数据已经提交。 不同隔离级别，生成ReadView的时机不同：\nRC：在事务每一次执行快照读时生成ReadView。 RR：仅在事务第一次执行快照读时生成ReadView，后续复用该ReadView。 6.5 RC级别下原理分析 88. 进阶-InnoDB引擎-MVCC-原理分析(RC级别)_哔哩哔哩_bilibili\n6.6 RR级别下的原理分析 89. 进阶-InnoDB引擎-MVCC-原理分析(RR级别)_哔哩哔哩_bilibili\n7 日志 错误日志：记录了当mysqld启动和停止时，以及服务器在运行过程中发生的任何严重错误时的相关信息。 二进制日志：Bin log，记录了所有的DDL（数据定义语言）语句和DML（数据操作语言）语句，但是不包括数据查询语句。 用于灾难时的数据恢复。 MySQL的主从复制。 查询日志 慢查询日志 7.1 二进制日志 通过mysqlbinlog查询指令查看二进制日志。\n日志格式\n日志格式 含义 STATEMENT 基于SQL语句的日志记录，记录的是SQL语句，对数据修改的SQL都会记录在日志文件中。 ROW（默认） 基于行的日志记录，记录的是每一行的数据变更。 MIXED 混合了STATEMENT和ROW两种格式，默认采用STATEMENT，特殊情况下会采用ROW进行记录。 7.2 查询日志 查询日志中记录了客户端所有的操作语句，而二进制日志不包含查询数据的SQL语句，默认情况下查询日志是关闭的。\n7.3 慢查询日志 记录了所有执行时间超过了参数long_query_time设置值并且扫描记录数不少于min_examined_row_limit的所有SQL语句的日志，默认未开启。long_query_time默认为10秒，最小为0，精度可以到微秒。\n8 集群 8.1 主从复制 主从复制指的是将主数据库的DDL和DML操作通过二进制日志传到从数据库，然后在从库上对这些日志重新执行（重做），从而使得从库和主库保持同步。\nMySQL支持一台主库同时向多台从库赋值，从库同时也可以作为其他从服务器的主库，实现链状复制。\n优点：\n主库出现问题，快速切换到从库提供服务。 实现读写分离，降低主库访问压力。 可以在从库执行备份，以避免备份期间影响正常业务。 主库提交事务时，会把数据变更记录写入binlog。 从库IO Thread连接主库，读取binlog，并写入到从库的中继日志relay log。 SQL Thread读取relay log，并重做binlog。 8.2 分库分表 分库分表的中心思想就是将数据分散存储，使得单一数据库/表的数据量变小，来缓解单一数据库性能问题，从而达到提升数据库性能的目的。\n8.2.1 单数据库存在的性能瓶颈 IO瓶颈：热点数据太多，数据库缓存严重不足，产生大量磁盘IO，效率较低。请求数据太多，带宽不够，网络IO瓶颈。 CPU瓶颈：排序、分组、连接查询、聚合统计等SQL会耗费大量CPU资源，请求数太多，CPU出现瓶颈。 8.2.2 拆分策略 垂直拆分 垂直分库：以表位单位进行拆分，根据业务进行拆分。 特点：每个数据库的表结构都不一样、每个库的数据也不一样、所有库的并集是全量数据。 垂直分表：以表中字段为依据，根据字段属性将不同的字段拆分到不同的表中。 特点：每个表的结构不一样，每个表的数据也不一样，通过主键或者外键关联，所有表的并集是全量数据。 水平拆分 水平分库：以字段为依据，按照一定策略，将一个库的数据拆分到多个库中。 特点：每个库的表结构都一样，每个库的数据都不一样，所有库的并集是全量数据。 水平分表：以字段为依据，按照一定策略，将一个表的数据拆分到多个表中。 特点：每个表的表结构一样，每个表的数据不一样，所有表的并集是全量数据。 8.2.3 实现技术 shardingJDBC：基于AOP原理，在应用程序中对本地执行的SQL进行拦截，解析、改写、路由处理。需要自行编码配置实现，只支持Java，性能较高。 MyCat：数据库分库分表中间件，不需要调整代码即可实现分库分表，支持多种语言，性能不及shardingJDBC。 MyCat不存储数据。\nMyCat分片规则\n范围划分 取模划分 一致性哈希 枚举分片 应用指定算法 固定hash算法 字符串hash 按天分片 按自然月分片 8.3 读写分离 把对数据库的读和写操作分开，以对应不同的数据库服务器。主数据库提供写操作，从数据库提供读操作，这样能有效减轻单台数据库的压力。\n利用中间件MyCat实现路由不同操作请求到不同节点，支持MySQL、Oracle、SQL Sever。\n结构\n一主一从 一主多从 双主双从：Master1处理所有写请求，Slave1、Master2及Slave2负责所有写请求。当Master1宕机后，Master2负责写请求，Master1和Master2互为备用机。 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/database/mysql/mysql/","summary":"\u003ch1 id=\"mysql\"\u003eMySQL\u003c/h1\u003e\n\u003ch1 id=\"0-参考资料\"\u003e0 参考资料\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://www.bilibili.com/video/BV1Kr4y1i7ru/?spm_id_from=..search-card.all.click\u0026vd_source=5e81fa8ad2645ace69cd01959323966a\"\u003e黑马程序员 MySQL数据库入门到精通\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://xiaolincoding.com/mysql/\"\u003e图解MySQL介绍\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://cyc2018.xyz/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL.html\"\u003eMySQL | CS-Notes 面试笔记\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://javaxiaobear.gitee.io/interview/database/MySQL.html\"\u003eMySQL面试题\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://javaguide.cn/database/mysql/mysql-questions-01.html\"\u003eMySQL常见面试题总结\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"sql语句\"\u003eSQL语句\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e通用语法\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e分号结尾，可多行书写\u003c/li\u003e\n\u003cli\u003e不区分大小写\u003c/li\u003e\n\u003cli\u003e注释采用\u0026ndash;、#、/**/\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e分类\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDDL(Data Defination Language): 数据定义语言，用来定义数据库对象（数据库，表，字段）。\u003c/li\u003e\n\u003cli\u003eDML(Data Manipulation Language): 数据操作语言，用来对数据库表中数据进行增删改\u003c/li\u003e\n\u003cli\u003eDQL(Data Query Language): 数据查询语言，用来查询数据库中表的记录。\u003c/li\u003e\n\u003cli\u003eDCL(Data Control Language): 数据控制语言，用来创建数据库用户、控制数据库访问权限。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"1-存储引擎\"\u003e1 存储引擎\u003c/h1\u003e\n\u003ch2 id=\"11-mysql体系结构\"\u003e1.1 MySQL体系结构\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/8902f52da9b4b274ad3ad679b8511f83/f4822db8f9705fab785634d3ac601991.png\" alt=\"Image.png\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e连接层：负责连接处理、授权认证，以及相关的安全服务。\u003c/li\u003e\n\u003cli\u003e服务层：提供SQL借口，完成缓存查询，SQL的分析和优化，部分内置函数的执行，跨存储引擎功能的实现（过程、函数等）。\u003c/li\u003e\n\u003cli\u003e引擎层：负责数据的存储和提取，服务层通过API和存储引擎通话，不同存储引擎有不同功能。\u003c/li\u003e\n\u003cli\u003e存储层：将数据存储在文件系统上，完成于存储引擎的交互。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"12-存储引擎特点\"\u003e1.2 存储引擎特点\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eInnoDB：支持事务、支持行级锁、支持外键。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/8902f52da9b4b274ad3ad679b8511f83/26046ad23edd04f201444848547f2144.png\" alt=\"Image.png\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMyISAM：不支持事务，支持表级锁，访问速度快。\u003c/li\u003e\n\u003cli\u003eMemory：数据存放在内存，访问速度快，支持Hash索引。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/8902f52da9b4b274ad3ad679b8511f83/be023fe4bda50e39530523b598205618.png\" alt=\"Image.png\"  /\u003e\n\u003c/p\u003e\n\u003ch1 id=\"2-索引\"\u003e2 索引\u003c/h1\u003e\n\u003cp\u003e索引是帮助MySql高效获取数据的数据结构。\u003c/p\u003e\n\u003ch2 id=\"21-索引结构\"\u003e2.1 索引结构\u003c/h2\u003e\n\u003cp\u003e索引是在存储引擎层实现的，不同存储引擎有不同的结构\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e\u003cstrong\u003e索引结构\u003c/strong\u003e\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e\u003cstrong\u003e描述\u003c/strong\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eB+Tree索引\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e大部分存储引擎都支持\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eHash索引\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e底层使用Hash表实现，针对精确匹配有效，不支持范围查询\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eR-Tree索引（空间索引）\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMyISAM引擎拥有的特殊索引，用于地理空间数据类型\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eFull-Text索引\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e倒排索引，类似于Lucene、ES\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eInnoDB和MyISAM都支持B+Tree索引和全文索引。\u003c/p\u003e","title":"MySQL"},{"content":"MySQL补充 1 InnoDB中数据如何存放 InnoDB引擎中，一张表的数据是存放在“tableName.idb”表空间文件中的。\n表空间由段（segment）、区（extent）、页（page）、行（row）组成。\n行：记录按行存放 页：记录的读取写入是以页为单位，页是InnoDB存储引擎磁盘管理的最小单元。页的类型有数据页、undo log页、溢出页等。16KB。 区：表中数据量大的时候，为某个索引分配空间不再按照页为单位划分，而是以区为单位进行分配。1M。 段：表空间有索引段（B+Tree非叶子节点）、数据段（B+Tree叶子节点）、回滚段（MVCC）。 Compact行格式中，一条完整的记录分为「记录的额外信息」和「记录的真实数据」两个部分。\n记录的额外信息：\n变长字段长度列表：存储变长字段的数据占用的大小，当数据表没有变长字段的时候，表里的行格式就不会有「变长字段长度列表」。 NULL值列表：表中的某些列可能会存储 NULL 值，如果把这些 NULL 值都放到记录的真实数据中会比较浪费空间，所以 Compact 行格式把这些值为 NULL 的列存储到 NULL值列表中。如果存在允许 NULL 值的列，则每个列对应一个二进制位（bit），二进制位按照列的顺序逆序排列。（1标识该列为NULL，0标识不为NULL）。当数据表的字段都定义成 NOT NULL 的时，表里的行格式就不会有 NULL 值列表。 记录头信息： delete_mask ：标识此条数据是否被删除。 next_record：下一条记录的位置。 record_type：表示当前记录的类型，0表示普通记录，1表示B+树非叶子节点记录，2表示最小记录，3表示最大记录。 记录的真实数据：\n记录真实数据部分除了我们定义的字段，还有三个隐藏字段，分别为：row_id、trx_id、roll_pointer。\nrow_id：如果我们建表的时候指定了主键或者唯一约束列，那么就没有 row_id 隐藏字段了。如果既没有指定主键，又没有唯一约束，那么 InnoDB 就会为记录添加 row_id 隐藏字段。row_id不是必需的，占用 6 个字节。 trx_id：事务id，表示这个数据是由哪个事务生成的。 trx_id是必需的，占用 6 个字节。 roll_pointer：这条记录上一个版本的指针。roll_pointer 是必需的，占用 7 个字节。 2 两阶段提交 事务提交后，redolog和binlog都要持久化到磁盘，但是这两个日志是独立的逻辑，可能会出现半成功的情况，也就是两个日志逻辑不一致：\n如果在将 redo log 刷入到磁盘之后， MySQL 突然宕机了，而 binlog 还没有来得及写入。 导致从库的值是旧值，主库的是新值。 如果在将 binlog 刷入到磁盘之后， MySQL 突然宕机了，而 redo log 还没有来得及写入。 导致从库的值是新值，主库的是旧值。 MySQL 为了避免出现两份日志之间的逻辑不一致的问题，使用了「两阶段提交」来解决，两阶段提交其实是分布式事务一致性协议，它可以保证多个逻辑操作要不全部成功，要不全部失败，不会出现半成功的状态。\n两阶段提交把单个事务的提交拆分成了 2 个阶段，分别是「准备（Prepare）阶段」和「提交（Commit）阶段」，每个阶段都由协调者（Coordinator）和参与者（Participant）共同完成。注意，不要把提交（Commit）阶段和 commit 语句混淆了，commit 语句执行的时候，会包含提交（Commit）阶段。\n2.1 两阶段提交过程 MySQL使用内部XA事务，由bin log作为协调者，存储引擎是参与者。\n当客户端执行commit语句或者自动提交时，MySQL内部开启XA事务，分两阶段完成XA提交的提交。\n从图中可看出，事务的提交过程有两个阶段，就是将 redo log 的写入拆成了两个步骤：prepare 和 commit，中间再穿插写入binlog，具体如下：\nprepare 阶段：将 XID（内部 XA 事务的 ID） 写入到 redo log，同时将 redo log 对应的事务状态设置为 prepare，然后将 redo log 持久化到磁盘（innodb_flush_log_at_trx_commit = 1 的作用）； commit 阶段：把 XID 写入到 binlog，然后将 binlog 持久化到磁盘（sync_binlog = 1 的作用），接着调用引擎的提交事务接口，将 redo log 状态设置为 commit，此时该状态并不需要持久化到磁盘，只需要 write 到文件系统的 page cache 中就够了，因为只要 binlog 写磁盘成功，就算 redo log 的状态还是 prepare 也没有关系，一样会被认为事务已经执行成功； 2.2 异常重启会出现什么现象？ 不管是时刻 A（redo log 已经写入磁盘， binlog 还没写入磁盘），还是时刻 B （redo log 和 binlog 都已经写入磁盘，还没写入 commit 标识）崩溃，此时的 redo log 都处于 prepare 状态。\n在 MySQL 重启后会按顺序扫描 redo log 文件，碰到处于 prepare 状态的 redo log，就拿着 redo log 中的 XID 去 binlog 查看是否存在此 XID：\n如果 binlog 中没有当前内部 XA 事务的 XID，说明 redolog 完成刷盘，但是 binlog 还没有刷盘，则回滚事务。对应时刻 A 崩溃恢复的情况。 如果 binlog 中有当前内部 XA 事务的 XID，说明 redolog 和 binlog 都已经完成了刷盘，则提交事务。对应时刻 B 崩溃恢复的情况。 可以看到，对于处于 prepare 阶段的 redo log，即可以提交事务，也可以回滚事务，这取决于是否能在 binlog 中查找到与 redo log 相同的 XID，如果有就提交事务，如果没有就回滚事务。这样就可以保证 redo log 和 binlog 这两份日志的一致性了。\n所以说，两阶段提交是以 binlog 写成功为事务提交成功的标识，因为 binlog 写成功了，就意味着能在 binlog 中查找到与 redo log 相同的 XID。\n2.3 两阶段提交有什么问题？ 两阶段提交虽然保证了两个日志文件的数据一致性，但是性能很差，主要有两个方面的影响：\n磁盘 I/O 次数高：对于“双1”配置，每个事务提交都会进行两次 fsync（刷盘），一次是 redo log 刷盘，另一次是 binlog 刷盘。 锁竞争激烈：两阶段提交虽然能够保证「单事务」两个日志的内容一致，但在「多事务」的情况下，却不能保证两者的提交顺序一致，因此，在两阶段提交的流程基础上，还需要加一个锁来保证提交的原子性，从而保证多事务的情况下，两个日志的提交顺序一致。 为什么两阶段提交的磁盘 I/O 次数会很高？ binlog 和 redo log 在内存中都对应的缓存空间，binlog 会缓存在 binlog cache，redo log 会缓存在 redo log buffer，它们持久化到磁盘的时机分别由下面这两个参数控制。一般我们为了避免日志丢失的风险，会将这两个参数设置为 1：\n当 sync_binlog = 1 的时候，表示每次提交事务都会将 binlog cache 里的 binlog 直接持久到磁盘； 当 innodb_flush_log_at_trx_commit = 1 时，表示每次事务提交时，都将缓存在 redo log buffer 里的 redo log 直接持久化到磁盘； 可以看到，如果 sync_binlog 和 当 innodb_flush_log_at_trx_commit 都设置为 1，那么在每个事务提交过程中， 都会至少调用 2 次刷盘操作，一次是 redo log 刷盘，一次是 binlog 落盘，所以这会成为性能瓶颈。\n为什么锁竞争激烈？ 在早期的 MySQL 版本中，通过使用 prepare_commit_mutex 锁来保证事务提交的顺序，在一个事务获取到锁时才能进入 prepare 阶段，一直到 commit 阶段结束才能释放锁，下个事务才可以继续进行 prepare 操作。 通过加锁虽然完美地解决了顺序一致性的问题，但在并发量较大的时候，就会导致对锁的争用，性能不佳。\n组提交 MySQL 引入了 binlog 组提交（group commit）机制，当有多个事务提交的时候，会将多个 binlog 刷盘操作合并成一个，从而减少磁盘 I/O 的次数，如果说 10 个事务依次排队刷盘的时间成本是 10，那么将这 10 个事务一次性一起刷盘的时间成本则近似于 1。\n引入了组提交机制后，prepare 阶段不变，只针对 commit 阶段，将 commit 阶段拆分为三个过程：\nflush 阶段：多个事务按进入的顺序将 binlog 从 cache 写入文件（不刷盘）； sync 阶段：对 binlog 文件做 fsync 操作（多个事务的 binlog 合并一次刷盘）； commit 阶段：各个事务按顺序做 InnoDB commit 操作； 上面的每个阶段都有一个队列，每个阶段有锁进行保护，因此保证了事务写入的顺序，第一个进入队列的事务会成为 leader，leader领导所在队列的所有事务，全权负责整队的操作，完成后通知队内其他事务操作结束。\n对每个阶段引入了队列后，锁就只针对每个队列进行保护，不再锁住提交事务的整个过程，可以看的出来，锁粒度减小了，这样就使得多个阶段可以并发执行，从而提升效率。\n有 binlog 组提交，那有 redo log 组提交吗？ 这个要看 MySQL 版本，MySQL 5.6 没有 redo log 组提交，MySQL 5.7 有 redo log 组提交。 在 MySQL 5.6 的组提交逻辑中，每个事务各自执行 prepare 阶段，也就是各自将 redo log 刷盘，这样就没办法对 redo log 进行组提交。 所以在 MySQL 5.7 版本中，做了个改进，在 prepare 阶段不再让事务各自执行 redo log 刷盘操作，而是推迟到组提交的 flush 阶段，也就是说 prepare 阶段融合在了 flush 阶段。 这个优化是将 redo log 的刷盘延迟到了 flush 阶段之中，sync 阶段之前。通过延迟写 redo log 的方式，为 redolog 做了一次组写入，这样 binlog 和 redo log 都进行了优化。 接下来介绍每个阶段的过程，注意下面的过程针对的是“双 1” 配置（sync_binlog 和 innodb_flush_log_at_trx_commit 都配置为 1）。\nflush 阶段\n第一个事务会成为 flush 阶段的 Leader，此时后面到来的事务都是 Follower：\n接着，获取队列中的事务组，由绿色事务组的 Leader 对 redo log 做一次 write + fsync，即一次将同组事务的 redolog 刷盘：\n完成了 prepare 阶段后，将绿色这一组事务执行过程中产生的 binlog 写入 binlog 文件（调用 write，不会调用 fsync，所以不会刷盘，binlog 缓存在操作系统的文件系统中）。\n从上面这个过程，可以知道 flush 阶段队列的作用是用于支撑 redo log 的组提交。\n如果在这一步完成后数据库崩溃，由于 binlog 中没有该组事务的记录，所以 MySQL 会在重启后回滚该组事务。\nsync 阶段\n绿色这一组事务的 binlog 写入到 binlog 文件后，并不会马上执行刷盘的操作，而是会等待一段时间，这个等待的时长由 Binlog_group_commit_sync_delay 参数控制，目的是为了组合更多事务的 binlog，然后再一起刷盘，如下过程：\n不过，在等待的过程中，如果事务的数量提前达到了 Binlog_group_commit_sync_no_delay_count 参数设置的值，就不用继续等待了，就马上将 binlog 刷盘，如下图：\n从上面的过程，可以知道 sync 阶段队列的作用是用于支持 binlog 的组提交。\n如果想提升 binlog 组提交的效果，可以通过设置下面这两个参数来实现：\nbinlog_group_commit_sync_delay= N，表示在等待 N 微妙后，直接调用 fsync，将处于文件系统中 page cache 中的 binlog 刷盘，也就是将「 binlog 文件」持久化到磁盘。 binlog_group_commit_sync_no_delay_count = N，表示如果队列中的事务数达到 N 个，就忽视binlog_group_commit_sync_delay 的设置，直接调用 fsync，将处于文件系统中 page cache 中的 binlog 刷盘。 如果在这一步完成后数据库崩溃，由于 binlog 中已经有了事务记录，MySQL会在重启后通过 redo log 刷盘的数据继续进行事务的提交。\ncommit 阶段\n最后进入 commit 阶段，调用引擎的提交事务接口，将 redo log 状态设置为 commit。\ncommit 阶段队列的作用是承接 sync 阶段的事务，完成最后的引擎提交，使得 sync 可以尽早的处理下一组事务，最大化组提交的效率。\n2.4 MySQL 磁盘 I/O 很高，有什么优化的方法？ 现在我们知道事务在提交的时候，需要将 binlog 和 redo log 持久化到磁盘，那么如果出现 MySQL 磁盘 I/O 很高的现象，我们可以通过控制以下参数，来 “延迟” binlog 和 redo log 刷盘的时机，从而降低磁盘 I/O 的频率：\n设置组提交的两个参数： binlog_group_commit_sync_delay 和 binlog_group_commit_sync_no_delay_count 参数，延迟 binlog 刷盘的时机，从而减少 binlog 的刷盘次数。这个方法是基于“额外的故意等待”来实现的，因此可能会增加语句的响应时间，但即使 MySQL 进程中途挂了，也没有丢失数据的风险，因为 binlog 早被写入到 page cache 了，只要系统没有宕机，缓存在 page cache 里的 binlog 就会被持久化到磁盘。 将 sync_binlog 设置为大于 1 的值（比较常见是 100~1000），表示每次提交事务都 write，但累积 N 个事务后才 fsync，相当于延迟了 binlog 刷盘的时机。但是这样做的风险是，主机掉电时会丢 N 个事务的 binlog 日志。 将 innodb_flush_log_at_trx_commit 设置为 2。表示每次事务提交时，都只是缓存在 redo log buffer 里的 redo log 写到 redo log 文件，注意写入到「 redo log 文件」并不意味着写入到了磁盘，因为操作系统的文件系统中有个 Page Cache，专门用来缓存文件数据的，所以写入「 redo log文件」意味着写入到了操作系统的文件缓存，然后交由操作系统控制持久化到磁盘的时机。但是这样做的风险是，主机掉电的时候会丢数据。 3 Buffer Pool 3.1 为什么要有 Buffer Pool？ 虽然说 MySQL 的数据是存储在磁盘里的，但是也不能每次都从磁盘里面读取数据，这样性能是极差的。\n要想提升查询性能，加个缓存就行了嘛。所以，当数据从磁盘中取出后，缓存内存中，下次查询同样的数据的时候，直接从内存中读取。\n为此，Innodb 存储引擎设计了一个缓冲池（Buffer Pool），来提高数据库的读写性能。\n有了缓冲池后：\n当读取数据时，如果数据存在于 Buffer Pool 中，客户端就会直接读取 Buffer Pool 中的数据，否则再去磁盘中读取。 当修改数据时，首先是修改 Buffer Pool 中数据所在的页，然后将其页设置为脏页，最后由后台线程将脏页写入到磁盘。 3.1.1 Buffer Pool 有多大？ Buffer Pool 是在 MySQL 启动的时候，向操作系统申请的一片连续的内存空间，默认配置下 Buffer Pool 只有 128MB 。\n可以通过调整 innodb_buffer_pool_size 参数来设置 Buffer Pool 的大小，一般建议设置成可用物理内存的 60%~80%。\n3.1.2 Buffer Pool 缓存什么？ InnoDB 会把存储的数据划分为若干个「页」，以页作为磁盘和内存交互的基本单位，一个页的默认大小为 16KB。因此，Buffer Pool 同样需要按「页」来划分。\n在 MySQL 启动的时候，InnoDB 会为 Buffer Pool 申请一片连续的内存空间，然后按照默认的16KB的大小划分出一个个的页， Buffer Pool 中的页就叫做缓存页。此时这些缓存页都是空闲的，之后随着程序的运行，才会有磁盘上的页被缓存到 Buffer Pool 中。\n所以，MySQL 刚启动的时候，你会观察到使用的虚拟内存空间很大，而使用到的物理内存空间却很小，这是因为只有这些虚拟内存被访问后，操作系统才会触发缺页中断，接着将虚拟地址和物理地址建立映射关系。\nBuffer Pool 除了缓存「索引页」和「数据页」，还包括了 undo 页，插入缓存、自适应哈希索引、锁信息等等。\n为了更好的管理这些在 Buffer Pool 中的缓存页，InnoDB 为每一个缓存页都创建了一个控制块，控制块信息包括「缓存页的表空间、页号、缓存页地址、链表节点」等等。\n控制块也是占有内存空间的，它是放在 Buffer Pool 的最前面，接着才是缓存页，如下图：\n上图中控制块和缓存页之间灰色部分称为碎片空间。\n为什么会有碎片空间呢？\n你想想啊，每一个控制块都对应一个缓存页，那在分配足够多的控制块和缓存页后，可能剩余的那点儿空间不够一对控制块和缓存页的大小，自然就用不到喽，这个用不到的那点儿内存空间就被称为碎片了。 当然，如果你把 Buffer Pool 的大小设置的刚刚好的话，也可能不会产生碎片。\n查询一条记录，就只需要缓冲一条记录吗？ 不是的。 当我们查询一条记录时，InnoDB 是会把整个页的数据加载到 Buffer Pool 中，因为，通过索引只能定位到磁盘中的页，而不能定位到页中的一条记录。将页加载到 Buffer Pool 后，再通过页里的页目录去定位到某条具体的记录。\n3.2 如何管理 Buffer Pool？ 3.2.1 如何管理空闲页？ Buffer Pool 是一片连续的内存空间，当 MySQL 运行一段时间后，这片连续的内存空间中的缓存页既有空闲的，也有被使用的。\n那当我们从磁盘读取数据的时候，总不能通过遍历这一片连续的内存空间来找到空闲的缓存页吧，这样效率太低了。\n所以，为了能够快速找到空闲的缓存页，可以使用链表结构，将空闲缓存页的「控制块」作为链表的节点，这个链表称为 Free 链表（空闲链表）。\nFree 链表上除了有控制块，还有一个头节点，该头节点包含链表的头节点地址，尾节点地址，以及当前链表中节点的数量等信息。\nFree 链表节点是一个一个的控制块，而每个控制块包含着对应缓存页的地址，所以相当于 Free 链表节点都对应一个空闲的缓存页。\n有了 Free 链表后，每当需要从磁盘中加载一个页到 Buffer Pool 中时，就从 Free链表中取一个空闲的缓存页，并且把该缓存页对应的控制块的信息填上，然后把该缓存页对应的控制块从 Free 链表中移除。\n3.2.2 如何管理脏页？ 设计 Buffer Pool 除了能提高读性能，还能提高写性能，也就是更新数据的时候，不需要每次都要写入磁盘，而是将 Buffer Pool 对应的缓存页标记为脏页，然后再由后台线程将脏页写入到磁盘。\n那为了能快速知道哪些缓存页是脏的，于是就设计出 Flush 链表，它跟 Free 链表类似的，链表的节点也是控制块，区别在于 Flush 链表的元素都是脏页。\n有了 Flush 链表后，后台线程就可以遍历 Flush 链表，将脏页写入到磁盘。\n3.2.3 如何提高缓存命中率？ Buffer Pool 的大小是有限的，对于一些频繁访问的数据我们希望可以一直留在 Buffer Pool 中，而一些很少访问的数据希望可以在某些时机可以淘汰掉，从而保证 Buffer Pool 不会因为满了而导致无法再缓存新的数据，同时还能保证常用数据留在 Buffer Pool 中。\n要实现这个，最容易想到的就是 LRU（Least recently used）算法。\n该算法的思路是，链表头部的节点是最近使用的，而链表末尾的节点是最久没被使用的。那么，当空间不够了，就淘汰最久没被使用的节点，从而腾出空间。\n简单的 LRU 算法的实现思路是这样的：\n当访问的页在 Buffer Pool 里，就直接把该页对应的 LRU 链表节点移动到链表的头部。 当访问的页不在 Buffer Pool 里，除了要把页放入到 LRU 链表的头部，还要淘汰 LRU 链表末尾的节点。 比如下图，假设 LRU 链表长度为 5，LRU 链表从左到右有 1，2，3，4，5 的页。\n如果访问了 3 号的页，因为 3 号页在 Buffer Pool 里，所以把 3 号页移动到头部即可。\n而如果接下来，访问了 8 号页，因为 8 号页不在 Buffer Pool 里，所以需要先淘汰末尾的 5 号页，然后再将 8 号页加入到头部。\n到这里我们可以知道，Buffer Pool 里有三种页和链表来管理数据。\n图中：\nFree Page（空闲页），表示此页未被使用，位于 Free 链表； Clean Page（干净页），表示此页已被使用，但是页面未发生修改，位于LRU 链表。 Dirty Page（脏页），表示此页「已被使用」且「已经被修改」，其数据和磁盘上的数据已经不一致。当脏页上的数据写入磁盘后，内存数据和磁盘数据一致，那么该页就变成了干净页。脏页同时存在于 LRU 链表和 Flush 链表。 简单的 LRU 算法并没有被 MySQL 使用，因为简单的 LRU 算法无法避免下面这两个问题：\n预读失效； Buffer Pool 污染； 什么是预读失效？ 先来说说 MySQL 的预读机制。程序是有空间局部性的，靠近当前被访问数据的数据，在未来很大概率会被访问到。 所以，MySQL 在加载数据页时，会提前把它相邻的数据页一并加载进来，目的是为了减少磁盘 IO。 但是可能这些被提前加载进来的数据页，并没有被访问，相当于这个预读是白做了，这个就是预读失效。 如果使用简单的 LRU 算法，就会把预读页放到 LRU 链表头部，而当 Buffer Pool空间不够的时候，还需要把末尾的页淘汰掉。 如果这些预读页如果一直不会被访问到，就会出现一个很奇怪的问题，不会被访问的预读页却占用了 LRU 链表前排的位置，而末尾淘汰的页，可能是频繁访问的页，这样就大大降低了缓存命中率。\n怎么解决预读失效而导致缓存命中率降低的问题？ 我们不能因为害怕预读失效，而将预读机制去掉，大部分情况下，局部性原理还是成立的。 要避免预读失效带来影响，最好就是让预读的页停留在 Buffer Pool 里的时间要尽可能的短，让真正被访问的页才移动到 LRU 链表的头部，从而保证真正被读取的热数据留在 Buffer Pool 里的时间尽可能长。 那到底怎么才能避免呢？ MySQL 是这样做的，它改进了 LRU 算法，将 LRU 划分了 2 个区域：old 区域 和 young 区域。\nyoung 区域在 LRU 链表的前半部分，old 区域则是在后半部分，如下图：\nold 区域占整个 LRU 链表长度的比例可以通过 innodb_old_blocks_pct 参数来设置，默认是 37，代表整个 LRU 链表中 young 区域与 old 区域比例是 63:37。\n划分这两个区域后，预读的页就只需要加入到 old 区域的头部，当页被真正访问的时候，才将页插入 young 区域的头部。如果预读的页一直没有被访问，就会从 old 区域移除，这样就不会影响 young 区域中的热点数据。\n接下来，给大家举个例子。\n假设有一个长度为 10 的 LRU 链表，其中 young 区域占比 70 %，old 区域占比 30 %。\n现在有个编号为 20 的页被预读了，这个页只会被插入到 old 区域头部，而 old 区域末尾的页（10号）会被淘汰掉。\n如果 20 号页一直不会被访问，它也没有占用到 young 区域的位置，而且还会比 young 区域的数据更早被淘汰出去。\n如果 20 号页被预读后，立刻被访问了，那么就会将它插入到 young 区域的头部，young 区域末尾的页（7号），会被挤到 old 区域，作为 old 区域的头部，这个过程并不会有页被淘汰。\n虽然通过划分 old 区域 和 young 区域避免了预读失效带来的影响，但是还有个问题无法解决，那就是 Buffer Pool 污染的问题。\n什么是 Buffer Pool 污染？ 当某一个 SQL 语句扫描了大量的数据时，在 Buffer Pool 空间比较有限的情况下，可能会将 Buffer Pool 里的所有页都替换出去，导致大量热数据被淘汰了，等这些热数据又被再次访问的时候，由于缓存未命中，就会产生大量的磁盘 IO，MySQL 性能就会急剧下降，这个过程被称为 Buffer Pool 污染。 注意， Buffer Pool 污染并不只是查询语句查询出了大量的数据才出现的问题，即使查询出来的结果集很小，也会造成 Buffer Pool 污染。\n比如，在一个数据量非常大的表，执行了这条语句：\nselect * from t_user where name like \u0026#34;%xiaolin%\u0026#34;; 可能这个查询出来的结果就几条记录，但是由于这条语句会发生索引失效，所以这个查询过程是全表扫描的，接着会发生如下的过程：\n从磁盘读到的页加入到 LRU 链表的 old 区域头部； 当从页里读取行记录时，也就是页被访问的时候，就要将该页放到 young 区域头部； 接下来拿行记录的 name 字段和字符串 xiaolin 进行模糊匹配，如果符合条件，就加入到结果集里； 如此往复，直到扫描完表中的所有记录。 经过这一番折腾，原本 young 区域的热点数据都会被替换掉。\n举个例子，假设需要批量扫描：21，22，23，24，25 这五个页，这些页都会被逐一访问（读取页里的记录）。\n在批量访问这些数据的时候，会被逐一插入到 young 区域头部。\n可以看到，原本在 young 区域的热点数据 6 和 7 号页都被淘汰了，这就是 Buffer Pool 污染的问题。\n怎么解决出现 Buffer Pool 污染而导致缓存命中率下降的问题？\n像前面这种全表扫描的查询，很多缓冲页其实只会被访问一次，但是它却只因为被访问了一次而进入到 young 区域，从而导致热点数据被替换了。 LRU 链表中 young 区域就是热点数据，只要我们提高进入到 young 区域的门槛，就能有效地保证 young 区域里的热点数据不会被替换掉。 MySQL 是这样做的，进入到 young 区域条件增加了一个停留在 old 区域的时间判断。 具体是这样做的，在对某个处在 old 区域的缓存页进行第一次访问时，就在它对应的控制块中记录下来这个访问时间：\n如果后续的访问时间与第一次访问的时间在某个时间间隔内，那么该缓存页就不会被从 old 区域移动到 young 区域的头部； 如果后续的访问时间与第一次访问的时间不在某个时间间隔内，那么该缓存页移动到 young 区域的头部； 这个间隔时间是由 innodb_old_blocks_time 控制的，默认是 1000 ms。\n也就说，只有同时满足「被访问」与「在 old 区域停留时间超过 1 秒」两个条件，才会被插入到 young 区域头部，这样就解决了 Buffer Pool 污染的问题 。\n另外，MySQL 针对 young 区域其实做了一个优化，为了防止 young 区域节点频繁移动到头部。young 区域前面 1/4 被访问不会移动到链表头部，只有后面的 3/4被访问了才会。\n3.2.4 脏页什么时候会被刷入磁盘？ 引入了 Buffer Pool 后，当修改数据时，首先是修改 Buffer Pool 中数据所在的页，然后将其页设置为脏页，但是磁盘中还是原数据。\n因此，脏页需要被刷入磁盘，保证缓存和磁盘数据一致，但是若每次修改数据都刷入磁盘，则性能会很差，因此一般都会在一定时机进行批量刷盘。\n可能大家担心，如果在脏页还没有来得及刷入到磁盘时，MySQL 宕机了，不就丢失数据了吗？\n这个不用担心，InnoDB 的更新操作采用的是 Write Ahead Log 策略，即先写日志，再写入磁盘，通过 redo log 日志让 MySQL 拥有了崩溃恢复能力。\n下面几种情况会触发脏页的刷新：\n当 redo log 日志满了的情况下，会主动触发脏页刷新到磁盘； Buffer Pool 空间不足时，需要将一部分数据页淘汰掉，如果淘汰的是脏页，需要先将脏页同步到磁盘； MySQL 认为空闲时，后台线程会定期将适量的脏页刷入到磁盘； MySQL 正常关闭之前，会把所有的脏页刷入到磁盘； 在我们开启了慢 SQL 监控后，如果你发现**「偶尔」会出现一些用时稍长的 SQL**，这可能是因为脏页在刷新到磁盘时可能会给数据库带来性能开销，导致数据库操作抖动。\n如果间断出现这种现象，就需要调大 Buffer Pool 空间或 redo log 日志的大小。\n3.3 总结 Innodb 存储引擎设计了一个缓冲池（Buffer Pool），来提高数据库的读写性能。\nBuffer Pool 以页为单位缓冲数据，可以通过 innodb_buffer_pool_size 参数调整缓冲池的大小，默认是 128 M。\nInnodb 通过三种链表来管理缓页：\nFree List （空闲页链表），管理空闲页； Flush List （脏页链表），管理脏页； LRU List，管理脏页+干净页，将最近且经常查询的数据缓存在其中，而不常查询的数据就淘汰出去。； InnoDB 对 LRU 做了一些优化，我们熟悉的 LRU 算法通常是将最近查询的数据放到 LRU 链表的头部，而 InnoDB 做 2 点优化：\n将 LRU 链表 分为young 和 old 两个区域，加入缓冲池的页，优先插入 old 区域；页被访问时，才进入 young 区域，目的是为了解决预读失效的问题。 当**「页被访问」且「 old 区域停留时间超过 innodb_old_blocks_time 阈值（默认为1秒）」**时，才会将页插入到 young 区域，否则还是插入到 old 区域，目的是为了解决批量数据访问，大量热数据淘汰的问题。 可以通过调整 innodb_old_blocks_pct 参数，设置 young 区域和 old 区域比例。\n在开启了慢 SQL 监控后，如果你发现「偶尔」会出现一些用时稍长的 SQL，这可因为脏页在刷新到磁盘时导致数据库性能抖动。如果在很短的时间出现这种现象，就需要调大 Buffer Pool 空间或 redo log 日志的大小。\n","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/database/mysql/mysql%E8%A1%A5%E5%85%85/","summary":"\u003ch1 id=\"mysql补充\"\u003eMySQL补充\u003c/h1\u003e\n\u003ch1 id=\"1-innodb中数据如何存放\"\u003e1 InnoDB中数据如何存放\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/6cea475dd0613750dfc0a9cef61c13c4/e8d38bc28e035d84c29ffcd356d46212.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eInnoDB引擎中，一张表的数据是存放在“tableName.idb”表空间文件中的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e表空间由段（segment）、区（extent）、页（page）、行（row）组成。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e行：记录按行存放\u003c/li\u003e\n\u003cli\u003e页：记录的读取写入是以页为单位，页是InnoDB存储引擎磁盘管理的最小单元。页的类型有数据页、undo log页、溢出页等。16KB。\u003c/li\u003e\n\u003cli\u003e区：表中数据量大的时候，为某个索引分配空间不再按照页为单位划分，而是以区为单位进行分配。1M。\u003c/li\u003e\n\u003cli\u003e段：表空间有索引段（B+Tree非叶子节点）、数据段（B+Tree叶子节点）、回滚段（MVCC）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/6cea475dd0613750dfc0a9cef61c13c4/a5851e3ff3e62fcead99e965243d19ed.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003eCompact行格式中，一条完整的记录分为「记录的额外信息」和「记录的真实数据」两个部分。\u003c/p\u003e\n\u003cp\u003e记录的额外信息：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e变长字段长度列表：存储变长字段的数据占用的大小，\u003cstrong\u003e当数据表没有变长字段的时候，表里的行格式就不会有「变长字段长度列表」\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003eNULL值列表：表中的某些列可能会存储 NULL 值，如果把这些 NULL 值都放到记录的真实数据中会比较浪费空间，所以 Compact 行格式把这些值为 NULL 的列存储到 NULL值列表中。如果存在允许 NULL 值的列，则每个列对应一个二进制位（bit），二进制位按照列的顺序逆序排列。（1标识该列为NULL，0标识不为NULL）。\u003cstrong\u003e当数据表的字段都定义成 NOT NULL 的时，表里的行格式就不会有 NULL 值列表\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e记录头信息：\n\u003cul\u003e\n\u003cli\u003edelete_mask ：标识此条数据是否被删除。\u003c/li\u003e\n\u003cli\u003enext_record：下一条记录的位置。\u003c/li\u003e\n\u003cli\u003erecord_type：表示当前记录的类型，0表示普通记录，1表示B+树非叶子节点记录，2表示最小记录，3表示最大记录。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e记录的真实数据：\u003c/p\u003e\n\u003cp\u003e记录真实数据部分除了我们定义的字段，还有三个隐藏字段，分别为：row_id、trx_id、roll_pointer。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003erow_id：如果我们建表的时候指定了主键或者唯一约束列，那么就没有 row_id 隐藏字段了。如果既没有指定主键，又没有唯一约束，那么 InnoDB 就会为记录添加 row_id 隐藏字段。\u003cstrong\u003erow_id不是必需的，占用 6 个字节。\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003etrx_id：事务id，表示这个数据是由哪个事务生成的。 \u003cstrong\u003etrx_id是必需的，占用 6 个字节。\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eroll_pointer：这条记录上一个版本的指针。\u003cstrong\u003eroll_pointer 是必需的，占用 7 个字节。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"2-两阶段提交\"\u003e2 两阶段提交\u003c/h1\u003e\n\u003cp\u003e事务提交后，redolog和binlog都要持久化到磁盘，但是这两个日志是独立的逻辑，可能会出现半成功的情况，也就是两个日志逻辑不一致：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e如果在将 redo log 刷入到磁盘之后， MySQL 突然宕机了，而 binlog 还没有来得及写入。\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e导致从库的值是旧值，主库的是新值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e如果在将 binlog 刷入到磁盘之后， MySQL 突然宕机了，而 redo log 还没有来得及写入。\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e导致从库的值是新值，主库的是旧值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eMySQL 为了避免出现两份日志之间的逻辑不一致的问题，使用了「两阶段提交」来解决\u003c/strong\u003e，两阶段提交其实是分布式事务一致性协议，它可以保证多个逻辑操作要不全部成功，要不全部失败，不会出现半成功的状态。\u003c/p\u003e","title":"MySQL补充"},{"content":"MySQL面试 1 基础 MySQL执行一条Select语句期间发生了什么？\n通过连接器建立连接，管理链接、校验用户身份。\n查询缓存：命中直接返回。\n解析SQL，解析器对SQL查询语句进行词法语法分析。\n执行SQL：\n预处理：检查表或者字段是否存在；\n优化：选择查询成本最小的执行计划；\n执行：根据查询计划执行SQL语句，从存储引擎读取数据，返回给客户端。\nMySQL 的 NULL 值是怎么存放的？\nMySQL 的 Compact 行格式中会用「NULL值列表」来标记值为 NULL 的列，NULL 值并不会存储在行格式中的真实数据部分。\nNULL值列表会占用 1 字节空间，当表中所有字段都定义成 NOT NULL，行格式中就不会有 NULL值列表，这样可节省 1 字节的空间。\nMySQL 怎么知道 varchar(n) 实际占用数据的大小？\nMySQL 的 Compact 行格式中会用「变长字段长度列表」存储变长字段实际占用的数据大小。\nvarchar(n) 中 n 最大取值为多少？\n一行记录最大能存储 65535 字节的数据，但是这个是包含「变长字段字节数列表所占用的字节数」和「NULL值列表所占用的字节数」。所以， 我们在算 varchar(n) 中 n 最大值时，需要减去这两个列表所占用的字节数。\n行溢出后，MySQL 是怎么处理的？\n如果一个数据页存不了一条记录，InnoDB 存储引擎会自动将溢出的数据存放到「溢出页」中。\nCompact 行格式针对行溢出的处理是这样的：当发生行溢出时，在记录的真实数据处只会保存该列的一部分数据，而把剩余的数据放在「溢出页」中，然后真实数据处用 20 字节存储指向溢出页的地址，从而可以找到剩余数据所在的页。\nCompressed 和 Dynamic 这两种格式采用完全的行溢出方式，记录的真实数据处不会存储该列的一部分数据，只存储 20 个字节的指针来指向溢出页。而实际的数据都存储在溢出页中。\n2 索引 索引的分类\n按数据结构分类：B+tree索引、Hash索引、Full-text索引\n按物理存储分类：聚簇索引、非聚簇索引\n按字段特性分类：主键索引、唯一索引、普通索引、前缀索引\n按字段个数：单列索引、联合索引\n为什么选择B+Tree作为索引的数据结构？\n相比于二叉树，二叉树在相同数据量下层数更高，并且极端情况会退化成链表。\n相比于Hash，hash表不适合做范围查询。\n相比于Btree，B+Tree旨在叶子节点存放数据，并且用链表连接叶子节点，更适合做范围查询。\n什么时候需要索引，什么时候不需要？\n需要：字段有唯一性限制，常用于where查询，常用于group by和order by的字段。\n不需要：不用于where、group by、order by，字段中重复数据高，表数据太少，经常更新的字段。\n优化索引的方法有哪些？\n前缀索引优化、覆盖索引优化、索引设置为Not Null、防止索引失效、主键最好是自增的\n如何防止索引失效（索引失效有哪些情况）？\nLIKE开头或者开头结尾使用模糊匹配\n查询条件中对索引列进行了计算、函数、类型转换等操作\n联合索引没有遵循最左匹配原则\nwhere中使用or，并且or的条件不全是索引\n什么是自适应哈希？\nInnoDB存储引擎注意到某些索引值被频繁使用时，会在内存中基于B-Tree索引之上创建一个哈希索引，以加速查找。\n3 事务 事务有什么特性？\n原子性、一致性、隔离性、持久性\n并行事务会出现什么问题？\n脏读、不可重复读、幻读\n事务隔离级别？\n读未提交、读已提交、可重复读、串行化\nReadView在MVCC中如何工作？\nReadView有四个字段：\ncreator_trx_id: 创建readview的事务id\nm_ids: 创建readview时，活跃的事务id集合\nmin_trx_id: 活跃事务中id最小的事务\nmax_trx_id: 活跃事务中id最大的事务+1\n聚簇索引两个跟事务相关的隐藏列：\ntrx_id：最新对该列修改的事务id\nroll_pouinter：指向上一个版本的记录\n可见性：\ntrx_id \u0026lt; min_trx_id：对当前事务可见\ntrx_id \u0026lt; max_trx_id：对当前事务不可见\nmin_trx_id \u0026lt; trx_id \u0026lt; max_trx_id\ntrx_id [in] m_ids：对当前事务不可见\ntrx_id [not in] m_ids：对当前事务可见\n可重复读是如何工作的？\n先后启动的两个事务，根据自己的ReadView，沿着版本链找到自己应该读取的版本\n读提交是如何工作的？\n每次读取时，重新创建ReadView。\nInnoDB如何解决幻读问题的？\n快照读：通过MVCC解决了幻读\n当前读：通过next-key lock解决了幻读，此时其他事务的更新、插入、删除会被阻塞\n4 锁 锁的分类\n按照加锁范围，可以分为：全局锁、表级锁、行级锁三种\n表级锁中有：表锁、元数据锁、意向锁、自增锁\n行级锁中有：记录锁、间隙锁、临键锁\n什么SQL语句会加锁？\nselect … lock in share mode\nselect … for update\nupdate …\ndelete …\nupdate没加索引会锁全表？\nInnodb 源码里面在扫描记录的时候，都是针对索引项这个单位去加锁的， update 不带索引就是全表扫扫描，也就是表里的索引项都加锁，相当于锁了整张表，所以大家误以为加了表锁。\n产生死锁怎么办？\n为什么会产生：InnoDB为了解决可重复读级别下的欢度问题，引入了next-key lock。\n当两个事务同时要插入新数据时，都会获取到next-key lock（间隙锁之间相互兼容），后续两个事务都尝试获取插入意向锁，但是插入意向锁和next-lock不兼容，所以阻塞死锁。\n间隙锁兼容情况：一个间隙锁包含的范围是另一个的子集，两个间隙锁的范围相同且没有锁住真实记录（如果是真实的记录则会阻塞）。\n插入意向锁：是一种特殊的间隙锁，但是这个锁只用于并发插入，插入意向锁锁住的是一个点。\n发生后打破死锁：设置事务等待锁的超时时间（超时回滚并释放锁）；开启主动检测死锁（检测到自锁，主动回滚事务）\n排查：\n正在运行的任务：show full processlist; 找到卡主的进程\n解开死锁：UNLOCK TABLES ；\n查看当前运行的事务：SELECT * FROM information_schema.INNODB_TRX;\n当前出现的锁：SELECT * FROM information_schema.INNODB_LOCKS;\n观察错误日志\n查看InnoDB锁状态：show status like \u0026quot;innodb_row_lock%\u0026quot;;\nkill id 杀死进程\n解决：\n死锁无法避免，上线前要进行严格的压力测试\n快速失败：innodb_lock_wait_timeout 行锁超时时间\n拆分sql，严禁大事务\n充分利用索引，优化索引，尽量把有风险的事务sql使用上覆盖索，优化where条件前缀匹配，提升查询速度，引减少表锁\n无法避免时：\n操作多张表时，尽量以相同的顺序来访问避免形成等待环路\n单张表时先排序再操作\n使用排它锁 比如 for update\n5 日志 为什么需要undo log？\nMySQL会隐式开启事务来执行增删改语句，为了在执行过程中异常崩溃后进行回滚，在执行事务时，需要把回滚时需要的信息都记录到undo log中。undo log保证了事务的原子性。\n在事务没有提交前，MySQL会先记录更新前的数据到undo log中。\n插入：undo log记录主键，回滚时删除；\n删除：undo log记录全部内容，回滚时插入；\n更新：undo log记录更新列的旧值，回滚时更新回旧值。\n一条记录每一次更新操作产生的undo log都有一个roll_pointer和trx_id，roll_pointer用于指向前一个undo log，串成版本链，trx_id用于记录是哪一个事务进行的修改。从而与ReadView实现MVCC。\nundo log如何持久化的？\nundo log和数据页的刷盘策略相同，都需要通过redo log保证持久化。\nBuffer pool中有undo页，对undo页的修改会记录到redo log中，redo log会每秒刷盘，提交事务也会刷盘，数据页和undo页都是靠这个机制保证持久化的。\n为什么需要redo log？\n由于Buffer pool是基于内存的，为了防止断电导致数据丢失的问题，当有一条记录需要更新时，InnoDB会先更新内存，然后将针对这个数据页的修改以redo log的形式记录下来，这时更新才算完成。后续InnoDB在适当的时候，通过后台线程将Buffer Pool中的脏页刷新到磁盘，这就是WAL（Write-Ahead Logging）技术，即写操作先写日志，后刷盘。\nredo log是物理日志，记录的是某个数据也做了什么修改，事务提交时，先讲redo log持久化到磁盘即可，不需要等到将缓存在Buffer Pool里的脏页数据持久化到磁盘。系统崩溃时，由于redolog已经持久化，可以根据redolog将数据恢复。\nredolog保证了持久性，让MySQL有crash-safe（崩溃恢复）的能力。\n同时WAL技术将写操作从随机写变成了顺序写，进一步提升性能。\n被修改的undo页，需要记录对应的redo log吗？\n开启事务后，InnoDB更新前，先记录响应的undo log到Undo页，内存修改该Undo页后，会记录对应redolog。\nredo log 和 undo log 区别在哪？\nredo log 记录此次事务完成后的数据状态，记录的是更新之后的值，事务提交后崩溃，根据redolog恢复。\nundo log记录此次事务开始前的数据状态，记录的是更新之前的值，事务提交前崩溃，根据undolog恢复。\nredolog是直接写入磁盘的吗？\n不是，redo log有自己的redo log buffer。redo log buffer 默认大小 16 MB，可以通过 innodb_log_Buffer_size 参数动态的调整大小，增大它的大小可以让 MySQL 处理「大事务」是不必写入磁盘，进而提升写 IO 性能。\nredo log在以下几个时机会刷盘：\nMySQL正常关闭。\nredo log buffer写入量大于一半。\nInnoDB每隔1秒进行一次刷盘。\n每次事务提交都会进行刷盘（可以通过参数改变策略）\nredo log文件写满了怎么办？\n循环写策略，当写入太多导致当前写的位置追上了要擦除的位置时，MySQL将不能进行更新操作，即会被阻塞，此时MySQL会将Buffer Pool中的脏页刷新到磁盘，并标记可擦除位置，对redolog进行擦除。\n为什么需要bin log？\nbin log是MySQL Server层实现的日志，有STATEMENT、ROW、MIXED三种格式，并且是追加写的方式，写满一个文件会新建一个文件继续写，不会覆盖日志。\nbin log主要用于备份恢复、主从复制，而 redo log主要用于掉电回复等故障。\n如果不小心整个数据库的数据都被删了，只能用binlog恢复，因为binlog是全量日志。\n主从复制是怎么实现的（过程）？\n主库接受到事务提交请求后，写入binlog，然后提交事务，更新存储引擎中的数据，事务提交完成后，返回客户端成功响应。\n从库创建专门的IO线程，连接主库的log dump线程，接受来自主库的binlog，然后把binlog写入relay log中继日志中，在返回给主库复制成功的响应。\n从库创建一个用于回放binlog的线程，读取relaylog中的日志，回放更新存储引擎中的数据，实现主从的数据一致性。\n主从复制有哪些模型？\n同步复制：所有从库复制成功，才返回客户端响应。\n异步复制（默认）：主库事务提交成功后，返回响应，主库宕机数据会发生丢失。\n半同步复制：只要数据成功复制到任何一个从库上，就返回响应。\nbin log什么时候刷盘？\n每次提交事务，仅写入内核缓冲区，后续交给操作系统决定何时刷盘。\n每次提交事务，写入内核缓冲区后，立即刷盘。\n每次提交事务，都写入内核缓冲区，累计够N个事务后刷盘。\n事务没提交时，redo log会被持久化到磁盘吗？\n会的。事务执行中间过程的 redo log 也是直接写在 redo log buffer 中的，这些缓存在 redo log buffer 里的 redo log 也会被「后台线程」每隔一秒一起持久化到磁盘。\n也就是说，事务没提交的时候，redo log 也是可能被持久化到磁盘的。\n两阶段提交有什么问题？\n磁盘 I/O 次数高：对于“双1”配置，每个事务提交都会进行两次 fsync（刷盘），一次是 redo log 刷盘，另一次是 binlog 刷盘。\n锁竞争激烈：两阶段提交虽然能够保证「单事务」两个日志的内容一致，但在「多事务」的情况下，却不能保证两者的提交顺序一致，因此，在两阶段提交的流程基础上，还需要加一个锁来保证提交的原子性，从而保证多事务的情况下，两个日志的提交顺序一致。\n执行一条 update 语句，期间发生了什么？\n客户端通过连接器建立连接\n（update不查询缓存）清空缓存\n解析器进行语法分析，判断是否符合语法\n预处理器判断表和字段是否存在\n优化器确定执行计划\n执行器负责执行\n调用存储引擎结构查询索引（如果有用到，否则查全表）\n得到聚簇索引记录，查看更新前和更新后是否一样：一样则不执行后续流程\n开启事务，记录相应的undo log，写入到Buffer Pool中的Undo页中，同时记录Undo log的redo log。\nInnoDB开始更新记录，先更新内存，并标记为脏页，然后将记录写入到redo log，随后由后台线程刷盘。（WAL技术）\n更新完成，开始记录对应的bin log，并将对应的bin log保存到binlog cache中，在事务提交时同一将该事务过程中所有的binlog刷盘。\n事务提交：\nprepare阶段：将redo log对应的事务状态设置为prepare，然后将redo log刷盘。\ncommit阶段：将binlog刷盘，并将redo log状态设置为commit。\n结束。\n6 内存 为什么需要Buffer pool？\n为了提高读写性能，InnoDB存储引擎设计了一个缓冲池。\n读取时，命中直接返回。\n修改时，命中直接修改buffer pool中的页，然后标记为脏页，后续由一个后台线程写入到磁盘。\nBuffer中存储数据页、索引页、插入缓存页、undo页、自适应哈希索引、锁信息。\n其中undo页记录生成的undo log。\n查询一条数据时，会将整个数据页放入缓存，然后通过页目录查询。\n7 开发 TIMESTAMP和DATATIME的区别\nTIMESTAMP插入数据库会转为UTC，查询时又转为当前时区。\nDATATIME不做任何改变。\nDATATIME所能存储的时间范围更大。\n预编译SQL\n将SQL语句中的值用占位符替代，将SQL模板化或者参数化，可以做到一次编译，多次运行，可以防止SQL注入。\n子查询和Join\n子查询更加灵活，但是会创建临时表，导致效率比Join低，Join最多关联61张表。\nMySQL调优工具\nEXPLAIN\nMySQLdumpslow\nshow profiles 时间\noptimizer_trace\n何时进行分库分表？\n能不分就不分\n单机性能下降明显时：先尝试缓存，再尝试读写分离，最后才是分库分表\ncount(col) 和count(*)的区别\ncount(col)不会统计NULL\ncount(*)会统计NULL\n","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/database/mysql/mysql%E9%9D%A2%E8%AF%95/","summary":"\u003ch1 id=\"mysql面试\"\u003eMySQL面试\u003c/h1\u003e\n\u003ch1 id=\"1-基础\"\u003e1 基础\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/aa5916ce97ae110441c4921de4342520/6b4001cc35c64002c05218b187c005d4.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eMySQL执行一条Select语句期间发生了什么？\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e通过\u003cstrong\u003e连接器\u003c/strong\u003e建立连接，管理链接、校验用户身份。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e查询\u003cstrong\u003e缓存\u003c/strong\u003e：命中直接返回。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e解析SQL，解析器对SQL查询语句进行词法语法分析。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e执行SQL：\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e预处理：检查表或者字段是否存在；\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e优化：选择查询成本最小的执行计划；\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e执行：根据查询计划执行SQL语句，从存储引擎读取数据，返回给客户端。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eMySQL 的 NULL 值是怎么存放的？\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eMySQL 的 Compact 行格式中会用「NULL值列表」来标记值为 NULL 的列，NULL 值并不会存储在行格式中的真实数据部分。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNULL值列表会占用 1 字节空间，当表中所有字段都定义成 NOT NULL，行格式中就不会有 NULL值列表，这样可节省 1 字节的空间。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eMySQL 怎么知道 varchar(n) 实际占用数据的大小？\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eMySQL 的 Compact 行格式中会用「变长字段长度列表」存储变长字段实际占用的数据大小。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003evarchar(n) 中 n 最大取值为多少？\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e一行记录最大能存储 65535 字节的数据，但是这个是包含「变长字段字节数列表所占用的字节数」和「NULL值列表所占用的字节数」。所以， 我们在算 varchar(n) 中 n 最大值时，需要减去这两个列表所占用的字节数。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e行溢出后，MySQL 是怎么处理的？\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如果一个数据页存不了一条记录，InnoDB 存储引擎会自动将溢出的数据存放到「溢出页」中。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCompact 行格式针对行溢出的处理是这样的：当发生行溢出时，在记录的真实数据处只会保存该列的一部分数据，而把剩余的数据放在「溢出页」中，然后真实数据处用 20 字节存储指向溢出页的地址，从而可以找到剩余数据所在的页。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCompressed 和 Dynamic 这两种格式采用完全的行溢出方式，记录的真实数据处不会存储该列的一部分数据，只存储 20 个字节的指针来指向溢出页。而实际的数据都存储在溢出页中。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"2-索引\"\u003e2 索引\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e索引的分类\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e按数据结构分类：B+tree索引、Hash索引、Full-text索引\u003c/p\u003e","title":"MySQL面试"},{"content":"NoSQL NoSQL（Not Only SQL 的缩写）泛指非关系型的数据库，主要针对的是键值、文档以及图形类型数据存储。并且，NoSQL 数据库天生支持分布式，数据冗余和数据分片等特性，旨在提供可扩展的高可用高性能数据存储解决方案。 一个常见的误解是 NoSQL 数据库或非关系型数据库不能很好地存储关系型数据。NoSQL 数据库可以存储关系型数据—它们与关系型数据库的存储方式不同。 NoSQL 数据库代表：HBase、Cassandra、MongoDB、Redis。\nSQL与NoSQL区别 SQL NoSQL 数据存储模型 结构化存储，具有固定的行和列的表格 非结构化存储。文档（JSON）、键值对、宽列、图 代表 Oracle、MySQL、SQL Sever MongoDB、Redis、Cassandra、HBase、Neo4j ACID 支持 通常不支持 性能 取决于磁盘子系统 取决于集群大小、网络延迟等 扩展 垂直扩展（升级机器）、读写分离、分库分表 横向（增加服务器，基于分片机制） 用途 普通企业项目数据存储 图数据库支持分析和遍历连接数据之间的关系、键值数据库可以处理大量数据扩展和极高的状态变化 查询语法 结构化查询语言 数据访问语法可能因数据库而异 NoSQL数据库优势 NoSQL 数据库非常适合许多现代应用程序，例如移动、Web 和游戏等应用程序，它们需要灵活、可扩展、高性能和功能强大的数据库以提供卓越的用户体验。\n灵活性： NoSQL 数据库通常提供灵活的架构，以实现更快速、更多的迭代开发。灵活的数据模型使 NoSQL 数据库成为半结构化和非结构化数据的理想之选。 可扩展性： NoSQL 数据库通常被设计为通过使用分布式硬件集群来横向扩展，而不是通过添加昂贵和强大的服务器来纵向扩展。 高性能： NoSQL 数据库针对特定的数据模型和访问模式进行了优化，这与尝试使用关系数据库完成类似功能相比可实现更高的性能。 强大的功能： NoSQL 数据库提供功能强大的 API 和数据类型，专门针对其各自的数据模型而构建。 NoSQL数据库类型 NoSQL 数据库主要可以分为下面四种类型：\n键值：键值数据库是一种较简单的数据库，其中每个项目都包含键和值。这是极为灵活的 NoSQL 数据库类型，因为应用可以完全控制 value 字段中存储的内容，没有任何限制。Redis 和 DynanoDB 是两款非常流行的键值数据库。 文档：文档数据库中的数据被存储在类似于 JSON（JavaScript 对象表示法）对象的文档中，非常清晰直观。每个文档包含成对的字段和值。这些值通常可以是各种类型，包括字符串、数字、布尔值、数组或对象等，并且它们的结构通常与开发者在代码中使用的对象保持一致。MongoDB 就是一款非常流行的文档数据库。 图形：图形数据库旨在轻松构建和运行与高度连接的数据集一起使用的应用程序。图形数据库的典型使用案例包括社交网络、推荐引擎、欺诈检测和知识图形。Neo4j 和 Giraph 是两款非常流行的图形数据库。 宽列：宽列存储数据库非常适合需要存储大量的数据。Cassandra 和 HBase 是两款非常流行的宽列存储数据库。 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/database/nosql/nosql/","summary":"\u003ch1 id=\"nosql\"\u003eNoSQL\u003c/h1\u003e\n\u003cp\u003eNoSQL（Not Only SQL 的缩写）泛指非关系型的数据库，主要针对的是键值、文档以及图形类型数据存储。并且，NoSQL 数据库天生支持分布式，数据冗余和数据分片等特性，旨在提供可扩展的高可用高性能数据存储解决方案。\n一个常见的误解是 NoSQL 数据库或非关系型数据库不能很好地存储关系型数据。NoSQL 数据库可以存储关系型数据—它们与关系型数据库的存储方式不同。\nNoSQL 数据库代表：HBase、Cassandra、MongoDB、Redis。\u003c/p\u003e\n\u003ch1 id=\"sql与nosql区别\"\u003eSQL与NoSQL区别\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eSQL\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eNoSQL\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e数据存储模型\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e结构化存储，具有固定的行和列的表格\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e非结构化存储。文档（JSON）、键值对、宽列、图\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e代表\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eOracle、MySQL、SQL Sever\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMongoDB、Redis、Cassandra、HBase、Neo4j\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eACID\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e支持\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e通常不支持\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e性能\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e取决于磁盘子系统\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e取决于集群大小、网络延迟等\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e扩展\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e垂直扩展（升级机器）、读写分离、分库分表\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e横向（增加服务器，基于分片机制）\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e用途\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e普通企业项目数据存储\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e图数据库支持分析和遍历连接数据之间的关系、键值数据库可以处理大量数据扩展和极高的状态变化\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e查询语法\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e结构化查询语言\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e数据访问语法可能因数据库而异\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id=\"nosql数据库优势\"\u003eNoSQL数据库优势\u003c/h1\u003e\n\u003cp\u003eNoSQL 数据库非常适合许多现代应用程序，例如移动、Web 和游戏等应用程序，它们需要灵活、可扩展、高性能和功能强大的数据库以提供卓越的用户体验。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e灵活性：\u003c/strong\u003e NoSQL 数据库通常提供灵活的架构，以实现更快速、更多的迭代开发。灵活的数据模型使 NoSQL 数据库成为半结构化和非结构化数据的理想之选。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e可扩展性：\u003c/strong\u003e NoSQL 数据库通常被设计为通过使用分布式硬件集群来横向扩展，而不是通过添加昂贵和强大的服务器来纵向扩展。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e高性能：\u003c/strong\u003e NoSQL 数据库针对特定的数据模型和访问模式进行了优化，这与尝试使用关系数据库完成类似功能相比可实现更高的性能。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e强大的功能：\u003c/strong\u003e NoSQL 数据库提供功能强大的 API 和数据类型，专门针对其各自的数据模型而构建。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"nosql数据库类型\"\u003eNoSQL数据库类型\u003c/h1\u003e\n\u003cp\u003eNoSQL 数据库主要可以分为下面四种类型：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e键值\u003c/strong\u003e：键值数据库是一种较简单的数据库，其中每个项目都包含键和值。这是极为灵活的 NoSQL 数据库类型，因为应用可以完全控制 value 字段中存储的内容，没有任何限制。Redis 和 DynanoDB 是两款非常流行的键值数据库。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e文档\u003c/strong\u003e：文档数据库中的数据被存储在类似于 JSON（JavaScript 对象表示法）对象的文档中，非常清晰直观。每个文档包含成对的字段和值。这些值通常可以是各种类型，包括字符串、数字、布尔值、数组或对象等，并且它们的结构通常与开发者在代码中使用的对象保持一致。MongoDB 就是一款非常流行的文档数据库。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e图形\u003c/strong\u003e：图形数据库旨在轻松构建和运行与高度连接的数据集一起使用的应用程序。图形数据库的典型使用案例包括社交网络、推荐引擎、欺诈检测和知识图形。Neo4j 和 Giraph 是两款非常流行的图形数据库。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e宽列\u003c/strong\u003e：宽列存储数据库非常适合需要存储大量的数据。Cassandra 和 HBase 是两款非常流行的宽列存储数据库。\u003c/li\u003e\n\u003c/ul\u003e","title":"NoSQL"},{"content":"Redis 黑马程序员Redis入门到实战教程\n1 基本概念 1.1 Redis（::Re::mote ::Di::ctionary ::S::erver） 键值型存储，value支持多种不同数据结构。 单线程，每个命令具备原子性。（6.0之后的多线程仅是在网络处理部分，核心命令执行还是单线程） 低延迟，速度快（基于内存、IO多路复用、良好的编码）。 支持数据持久化。 支持主从集群和分片集群。 支持多语言客户端。 1.2 SQL和NoSQL SQL（Structured Query Language）：结构化的、关联的、SQL查询（语法固定）、事务（ACID） NoSQL（Not only SQL）：非结构的、非关联的、非SQL的（语法不固定，不统一）、不一定满足事务全部要求（BASE） 键值对：Redis 文档：MongoDB 图：Neo4j 列：HBase 1.3 Redis通用命令 // 1. 列出所有符合条件的key : KEYS [pattern] KEYS * KEYS a* // 2. 删除所有指定的key : DEL key [key ...] // 3. 判断key是否存在 : EXISTS key [key ...] // 4. 给一个key设置有效期，过期自动删除 : EXPIRE key seconds // 5. 查看命令具体用法 : help [command] // 6. 查看一个key的有效期 : TTL key 2 底层数据结构 Redis是一个key-value数据库，key一般是String类型，不过value的类型有很多：\nString Hash List Set SortedSet（Zset） Geo BitMap HyperLog 2.1 动态字符串SDS Redis中保存的key是字符串，value往往是字符串或者字符串的集合。可见字符串是redis中最常用的一种数据结构。但是redis没有直接使用C语言中的字符串，因为C语言字符串存在很多问题：\n获取字符串长度需要通过运算； 非二进制安全； 不可修改。 Redis构建了一种新的字符串结构，称为简单动态字符串（Simple Dynamic String），简称SDS。\n当执行SET key value 时，会在底层创建两个SDS，其中一个包含key，另一个包含value。\nstruct __attribute__ ((__packed__)) sdshdr8{ /* unit8_t 无符号8位整型 */ /* 除了sdshdr8之外，redis还定义了5（弃用），16，32，64，支持不同长度的字节 */ unit8_t len; /* buf已保存的字符串字节数，不包含结束标识 */ /* 最多保存254字节，因为最后一个需要是\\0，为了兼容C语言 */ unit8_t alloc; /* buf已申请的总的字节数，不包含结束标识 */ unsigned char flags; /* 不同SDS的头类型，用来控制SDS的头大小 */ /* SDS_TYPE_5 -\u0026gt; 0 SDS_TYPE_8 -\u0026gt; 1 SDS_TYPE_16 -\u0026gt; 2 SDS_TYPE_32 -\u0026gt; 3 SDS_TYPE_64 -\u0026gt; 4 */ char buf[]; /* 字符数组 */ }; SDS之所以叫动态字符串，是因为其具有动态扩容的功能\n当我们需要给SDS追加一段字符串时，首先会申请新内存空间：\n如果新字符串小于1M，则新空间为扩展后的字符串长度的2倍+1； 如果新字符串大于1M，则新空间为扩展后字符串长度+1M+1。称为内存预分配。 优点：\n获取字符串长度的时间复杂度为O（1） 支持动态扩容 减少内存分配次数 二进制安全 2.2 IntSet 元素唯一，有序 具备类型升级机制，可以节省内存空间 底层采用二分查找方式查询 IntSet是Redis中set集合的一种实现方式，基于整数数组实现，并具备长度可变，有序等特征。\ntypedef struct intset{ unit32_t encoding; /* 编码方式，支持存放16位，32位，64位整数 */ unit32_t length; /* 元素个数 */ int8_t contents[]; /* 整数数组，保存集合数据，仅仅是指针，具体元素类型由encoding指定 */ }intset; 其中encoding包含三种模式，表示存储的整数大小不同。\n#define INSET_ENC_INT16 (sizeof(int16_t)) /* 2字节整数，范围类似java中的short */ #define INSET_ENC_INT32 (sizeof(int32_t)) /* 4字节整数，范围类似java中的int */ #define INSET_ENC_INT64 (sizeof(int64_t)) /* 8字节整数，范围类似java中的long */ 为了方便查找，Redis中将IntSet中所有整数按照升序一次保存在contents数组中。\nencoding：4字节（unit32_t）。 length：4字节（unit32_t）。 contents：2字节（INESET_ENC_INT16）*3 = 6字节。 IntSet升级\n假设有一个intset，元素为{5, 10, 20}，采用INTSET_ENC_INT16，则每个整数占2字节。\n当我们向其中添加一个数字50000时，这个数字超过了int16_t的范围，intset会自动升级编码方式到合适的大小。\n升级编码为INTSET_ENC_INT32，每个整数占4字节，按照新的编码方式及元素个数扩容数组。 倒序一次将数组中元素拷贝到扩容后的正确位置。 将带添加元素放入数组末尾。（只可能比所有元素大或者小，否则不会超出编码表示范围） 最后将intset的encoding属性改为INTSET_ENCINT32，将length属性改为4。 当我们插入的元素在编码表示范围内时，首先进行扩容，然后采用二分查找获取插入下标，然后倒序移动元素腾出位置，插入元素。\n2.3 Dict Dict由三部分组成，分别是哈希表（DictHashTable）、哈希节点（DictEntry）、字典（Dict）。\ntypedef struct dict{ dictType *type; // dict类型，内置不同hash函数 void *privdata; // 私有数据，在做特殊hash运算时使用 dictht ht[2]; // 一个dict包含两个哈希表，其中一个是当前数据，另一个为空，rehash时使用 long rehashidx; // rehash的进度，-1表示未运行。 int16_t pauserehash; // rehash是否暂停，1表示暂停，0表示继续。 }dict; typedef struct dictht{ // entry数组 // 数组中保存的是指向entry的指针 dictEntry **table; // 哈希表的大小，永远是2的幂次，为了保证与运算可以代替求余。 usigned long size; // 哈希表大小的掩码，总等于size-1 usigned long sizemask; // entry个数 usigned long used; }dictht; typedef struct dictEntry{ void *key; //键 union{ //联合体，可以是其中的一个，但不能同时成立 void *val; unit64_t u64; int64_t s64; double d; }v; //值 // 下一个Entry的指针 struct dictEntry *next; }dictEntry; 当我们向Dict添加键值对时，Redis首先根据Key计算出hash值（h），然后利用h\u0026amp;sizemask计算元素应该存储到数组中哪个索引位置。\n链地址法解决hash冲突，头插法：\nDict扩容\nhashtable是通过数组组合单向链表实现的，当集合中元素较多时，必然会导致哈希冲突增多，链表过长，则查询效率大大降低。\nDict在每次新增键值对时，会检查负载因子（LoadFactor = used/size），满足以下两种情况时，会发生哈希表扩容。\n哈希表的LoadFactor≥1，并且服务器没有执行BGSAVE或者BGWRITEAOF等后台进程。 哈希表的LoadFactor\u0026gt;5。 扩容会保证size为2的n次方。 Dict的收缩\nDict在每次删除元素时，会对负载因子做检查，当LoadFactor\u0026lt;0.1时，会做哈希表收缩。\n收缩时也会保证size为2的n次方。\nDict的rehash\n不管是扩容还是收缩，必定会创建新的哈希表，导致哈希表的size和sizemask变化，而key的查询于sizemask有关。因此必须对hash表中的每一个key重新计算索引，插入新的hash表，这个过程称为rehash。\n计算新hash表的realeSize，值取决于是要扩容还是收缩 按照i虚拟的realeSize申请内存空间，创建dictht，并赋值给dict.ht[1]。 设置dict.rehashidx=0，表示开始rehash 将dict.ht[0]中的每一个dictEntry都rehash到dict.ht[1]。 每次执行增删改查时，检查dict.rehashidx是否大于-1，如果是则将dict.ht[0].table[rehashidx]的entry链表rehash到dict.ht[1]，并将rehashidx++。指导dict.ht[0]所有数据都rehash到dict.ht[1]。【渐进式rehash】 将dict.ht[1]赋值给dict.ht[0]，给dict.ht[1]初始化为空哈希表，释放原来的dict.ht[0]的内存。 将rehashidx赋值为-1，代表rehash结束。 在rehash过程中，新增操作，则直接写入ht[1]，查询、修改、删除则会在dict.ht[0]和dict.ht[1]一次查找并执行。这样可以确保ht[0]数据只减不增，直到空为止。 2.4 ZipList 一种特殊的\u0026quot;双端链表\u0026quot;，由一系列特殊编码的连续内存块组成。可以在任意一端进行压入、弹出操作，并且该操作的时间复杂度为O（1）。\n列表之间节点不是通过指针连接，而是记录上一节点和本节点的长度来寻址，占用内存较低。\n如果列表数据过多，导致链表过长，可能会影响查询性能。\n增或删较大数据时可能会发生连锁更新问题。\n属性 类型 长度 用途 zlbytes unit32_t 4字节 记录整个压缩列表占用的内存字节数 zltail unit32_t 4字节 记录压缩列表尾节点距离压缩列表的起始地址有多少字节，通过这个偏移量可以确定表尾节点的地址。 zllen unit16_t 2字节 记录了压缩列表包含的节点数量。最大为UINT16_MAX（65534），如果超过这个最大值，此处会记录为65535，但节点的真是数量需要遍历整个压缩列表才能计算得出。 entry 列表节点 不定 压缩列表包含的各个节点，节点的长度由节点保存的内容决定。 zlend unit8_t 1字节 特殊值0XFF（十进制255），用于标记压缩列表的末端。 ZipListEntry ZipList中的Entry并不像普通链表那样记录前后节点的指针，因为记录两个指针要占用16字节，浪费内存，而是采用了下面的结构。\nprevious_entry_length：前一节点长度，占1个或者5个字节 前一节点长度小于254，采用1字节保存长度 前一节点长度大于254，采用5个字节保存这个长度，第一个字节为0xfe，后面四个字节才是真实的长度。 encoding：编码属性，记录content的数据类型（字符串还是整数）以及长度，占用1个、2个或者5个字节。 content：负责保存节点的数据，可以是字符串或整数。 ZipList中所有存储长度的数值均采用小端字节序，即低位字节在前，高位字节在后。\nEncoding编码分为字符串和整数两种：\n00、01、10开头，证明是字符串。 编码 编码长度 字符串大小 00pppppp 01pppppp qqqqqqqq 1000000000 qqqqqqqq 11开头表示整数 编码 编码长度 整数类型 11000000 1 int16_t(2 bytes) 11010000 1 int32_t(4 bytes) 11100000 1 int64_t(8 bytes) 11110000 1 24位有符号整数(3 bytes) 11111110 1 8位有符号整数(1 byte) 1111XXXX 1 直接在XXXX位置保存数值，范围从0001-1101，减1后结果为实际值。 ZipList连锁更新问题 ZipList的每个Entry都包含previous_entry_length记录前一节点长度，占1个或者5个字节\n前一节点长度小于254，采用1字节保存长度 前一节点长度大于254，采用5个字节保存这个长度，第一个字节为0xfe，后面四个字节才是真实的长度。 假设有N个连续的、长度为250-253字节之间的entry，因此entry的previous_entry_length属性用1个字节即可表示。此时，插入一个范围超过254字节的entry，导致其后面所有的entry的previous_entry_length全部都需要改变为5字节。Zip在这种情况下产生的多次空间操作称之为连锁更新。新增、删除都可能导致连锁更新的发生。\nRedis作者并没有解决，这种情况发生概率很低，但是不代表不会发生。\n2.5 QuickList 问题：ZipList虽然节省内存空间，但申请内存必须是连续的，如果内存占用较多，申请内存效率很低。怎么办？\n限制ZipList长度和Entry大小。 问题：但是我们要存储大量数据，超过了ZipList最佳上限怎么办？\n创建多个ZipList来分片存储。 问题：数据拆分后比较分散，不方便管理和查找，这多个ZipList如何建立联系？\nRedis3.2版本后引入了QuickList，它是一个双端链表，只不过每个节点都是一个ZipList。 为了避免QuickList中每个ZipList中entry过多，Redis提供了一个配置项：list-max-ziplist-size： 正数：ZipList允许的Entry个数的最大值。 负数：ZipList最大内存的大小： -1：不超过4kb。 -2：不超过8kb。 -3：不超过16kb。 -4：不超过32kb。 -5：不超过64kb。 默认值为-2。 除了控制ZipList大小外，QuickList还可以对节点的ZipList做压缩，通过配置list-compress-depth来控制。因为链表一般都是从首尾访问较多，所以首尾不压缩。这个参数是控制首尾不压缩的节点个数： 0： 特殊值，不压缩。 1：表示首尾各一个不压缩，中间节点压缩。 2：表示首尾各两个不压缩，中间节点压缩。 以此类推。 typedef struct quicklist{ quicklistNode *head; // 头节点指针 quicklistNode *tail; // 尾节点指针 unsigned long count; // 所有ZipList的entry数量 unsigned long len; // ziplist总数量 int fill : QL_FILL_BITS; // ziplist的entry上限，默认值-2 unsigned int compress : QL_COMP_BITS; // 首尾不压缩的节点数量 unsigned int bookmark_count : QL_BM_BITS; // 内存重新分配时的书签数量及数组，一般用不到 quicklistBookmark bookmarks[]; }quicklist; typedef struct quicklistNode{ struct quicklistNode *prev; //前一个节点指针 struct quicklistNode *next; //后一个节点指针 unsigned char *zl; //当前节点ZipList指针 unsigned int sz; //当前ZipList的字节大小 unsigned int count : 16; //当前ZipList的Entry个数 unsigned int encoding : 2; // 编码方式：1.ZipList；2.lzf压缩模式 unsigned int container : 2; //数据容器类型（预留）：1.其他；2.ZipList unsigned int recompress : 1; //是否被解压缩：1.已经被解压缩，将来要重新压缩 unsigned int attempted_compress : 1; //测试使用 unsigned int extra : 10; //预留字段 }quicklistNode; 2.6 SkipList SkipList首先是链表，但是与传统链表有几点差异：\n元素按照升序排列存储。 节点可能包含多个指针，指针跨度不同。 typedef struct zskiplist{ struct zskiplistNode *header, *tail; // 头尾节点指针 usigned long length; //节点数量 int level; //最大索引层级，默认是1 }zskiplist; typedef struct zskiplistNode{ sds ele; //节点存储的值 double score; //节点分数，排序、查找用 struct zskiplistNode *backward; //前一个节点的指针 struct zskiplistLevel{ struct zskiplistNode *forward; //下一个节点的指针 unsigned long span; //索引跨度 } level[]; // 多级索引数组 }zskiplistNode; 本质是一个双向链表，每个节点都包含score值和ele值 节点按照score值排序，score值一样按照ele字典排序 每个节点都可以包含多层指针，层数是1-32之间的随机数 不同层指针到下一个节点的跨度不同，层级越高，跨度越大 增删改查效率基本与红黑树一致，实现却更简单 2.7 RedisObject typedef struct redisObject{ unsigned type : 4; // 对应string、hash、list、set、zset，占4个bit位 unsigned encoding : 4; // 底层编码方式，共有11种，占4个bit位 unsigned lru : LRU_BITS; // LRU_BTS为24，表示该对象最后一次被访问的时间 int refcount; //引用计数器，计数器为0则说明对象无人使用，可以被回收，4字节 void *ptr; //指向存放实际数据的空间，一般是8字节 }robj; //头部占用16字节 encoding编码方式\n编号 编码方式 说明 0 OBJ_ENCODING_RAW raw编码动态字符串 1 OBJ_ENCODING_INT long类型的整数的字符串 2 OBJ_ENCODING_HT hash表（字典dict） 3 OBJ_ENCODING_ZIPMAP 已废弃 4 OBJ_ENCODING_LINKEDLIST 双端链表 5 OBJ_ENCODING_ZIPLIST 压缩列表 6 OBJ_ENCODING_INTSET 整数集合 7 OBJ_ENCODING_SKIPLIST 跳表 8 OBJ_ENCODING_EMBSTR embstr的动态字符串 9 OBJ_ENCODING_QUICKLIST 快速列表 10 OBJ_ENCODING_STREAM Stream流 2.8 五种数据结构 五种数据结构对应的编码方式\n数据类型 编码方式 OBJ_STRING int, embstr, raw OBJ_LIST LinkedList和ZipList(3.2之前)，QuickList(3.2之后) OBJ_SET intset、HT OBJ_ZSET ZipList、HT、SkipList OBJ_HASH ZipList、HT 2.8.1 String 基本编码方式是RAW，基于简单动态字符串（SDS）实现，存储上限为512MB。 如果存储的SDS长度小于44字节，则会采用EMBSTR编码，此时object head与SDS是一段连续空间，申请内存时只需要调用一次内存分配函数，效率更高。（不超64字节，分配内存基本单位？） 如果存储的字符串是整数值的时候，并且在LONG_MAX范围内，则会采用INT编码：直接将数据保存在RedisObject的ptr指针位置（刚好8字节），不再需要SDS了。 2.8.2 List 在3.2版本之前，Redis采用ZipList和LinkedList来实现，当元素数量小于512且元素大小小于64字节时，采用ZipList编码，超过则采用LinkedList。 在3.2版本之后，Redis同一采用QuickList来实现List。 2.8.3 Set Set不保证有序性，保证元素唯一，可以求交集、并集、差集，要求查询效率高。\n为了查询效率和唯一性，set采用HT编码（Dict）。Dict中的key用来存储元素，value统一为null。 当存储的所有数据都是整数时，并且元素数量不超过set-max-intset-entries时，Set会采用IntSet编码，以节省内存。 2.8.4 Zset 每一个元素都需要指定一个score值和member值：\n可以根据score值排序 member必须唯一 可以根据member查询分数 因此底层数据结构必须满足键值存储、键必须唯一、可排序。\ntypedef struct zset{ dict *dict; //dict指针 zskiplist *zsl; // SkipList指针 }zset; 当元素不多时，HT和SkipList的优势并不明显，而且更消耗内存。因此zset还会采用ZipList结构来节省内存，不过需要同时满足两个条件：\n元素数量小于zset_max_ziplist_entries，默认128； 每个元素都小于zset_max_ziplist_value字节，默认值64。 ZipList本身没有排序功能，而且没有键值对概念，因此需要由zset通过编码实现：\nZipList是连续内存，因此score和element是紧挨在一起的两个entry，element在前，score在后。 score越小越接近队首，score越大越接近队尾，按照score值升序排列。 2.8.5 Hash 键必须唯一，根据键获取值。\n底层与Zset基本一致，只不过把排序有关的SkipList去掉即可。\nHash结构默认采用ZipList编码，用以节省内存。ZipList中相邻的两个entry分别保存filed和value。 当数据量较大时，Hash结构会转为HT编码，也就是Dict，触发条件需要满足： ZipList中元素的数量超过了hash-max-ziplist-entries（默认512）； ZipList中的任意entry大小超过了hash-max-ziplist-value（默认64字节）； 3 分布式锁 满足在分布式系统或集群模式下多进程可见并互斥的锁。\nMySQL Redis Zookeeper 互斥 利用mysql本身的互斥锁机制 利用setnx互斥命令 利用节点的唯一性和有序性实现互斥 高可用 好 好 好 高性能 一般 好 一般 安全性 断开连接，自动释放锁 利用锁超时时间，到期释放 临时节点，断开连接自动释放 3.1 基于Redis实现 实现分布式锁需要实现两个基本方法：\n获取锁 互斥：确保只能有一个线程获取锁 SETNX lock thread1 、EXPIRE lock 10 。 两条命令需要时原子性的，所以 SET lock thread NX EX 10 。 非阻塞式：尝试一次，成功返回true，失败返回false 释放锁 手动释放：DEL key 超时释放：获取锁时添加一个超时时间。 存在的问题\n由于阻塞，锁提前释放，线程苏醒后释放别人的锁。\n解决方案：获取锁标识，并半段是否一致，避免误删其他线程的锁。\n还存在的问题\n判断锁标识和释放锁是两个动作，两个动作之间出现阻塞。\n解决方案：保证两个操作的原子性。\n使用Lua脚本，lua脚本在redis中是原子性的。\n3.2 基于Redisson实现 基于Redis实现存在的问题：\n不可重入，同一个线程无法多次获取同一把锁。 不可重试，获取锁只尝试一次就返回flase，没有重试机制。 超时释放，虽然可以避免死锁，但是业务耗时较长，也会导致锁释放，存在安全隐患。 主从一致性，如果Redis提供了主从集群，主从同步存在延迟，当主节点宕机时，如果从节点同步主节点的所数据，则会出现锁失效。 Redisson是一个在Redis的基础上实现的Java驻内存数据网格。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。\n4 持久化 4.1 RDB持久化 RDB全程Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。\n快照文件称为RDB文件。默认是保存在当前运行目录。\nsave命令：Redis主进程执行RDB，会阻塞所有命令。 bgsave命令：开启子进程执行RDB，避免主进程受到影响。bgsave开始时回fork主进程得到子进程，子进程共享主进程的内存数据。完成fork（复制页表）后读取内存数据并写入RDB。 fork采用的是copy-on-write技术：主进程读操作共享内存，主进程写操作，则会拷贝一份数据，执行写操作。 Redis停机时会自动执行一次RDB。\n### redis.conf #900秒内，如果至少有1个key被修改，则执行bgsave，如果是save \u0026#34;\u0026#34;，则表示禁用RDB save 900 1 #指定RDB文件名 dbfilename dump.rdb #文件保存的默认路径 dir ./ Redis的快照是全量快照，也就是说每次执行快照持久化，都是把内存中的所有数据记录到磁盘中。\n存在缺点：\nRDB执行间隔时间长，两次RDB之间写入数据有丢失的风险； fork子进程、压缩、写出RDB文件都比较耗时。 4.2 AOF持久化 AOF全称为Append Only File（追加文件）。Redis 每执行一条写操作命令，就把该命令以追加的方式写入到一个文件里。这种保存写操作命令到日志的持久化方式，就是 Redis 里的 AOF 持久化功能，注意只会记录写操作命令，读操作命令是不会被记录的。\nAOF默认关闭。\n为什么先执行写命令，后记录AOF 好处：\n避免额外的检查开销 不阻塞当前写命令操作 风险：\n数据有丢失风险 可能会给【下一个】写命令带来阻塞 三种写回策略 always：每次写操作命令执行完后，同步将 AOF 日志数据写回硬盘； everysec：每次写操作命令执行完后，先将命令写入到 AOF 文件的内核缓冲区，然后每隔一秒将缓冲区里的内容写回到硬盘； no：不由 Redis 控制写回硬盘的时机，转交给操作系统控制写回的时机，也就是每次写操作命令执行完后，先将命令写入到 AOF 文件的内核缓冲区，再由操作系统决定何时将缓冲区内容写回硬盘。 配置项 刷盘时机 优点 缺点 Always 同步刷盘 可靠性高，几乎不丢数据 性能影响大 everysec 每秒刷盘 性能适中 最多丢失1秒数据 no 操作系统控制 性能最好 可靠性较差，可能丢失大量数据 AOF重写机制 Redis 为了避免 AOF 文件越写越大，提供了 AOF 重写机制，当 AOF 文件的大小超过所设定的阈值后，Redis 就会启用 AOF 重写机制，来压缩 AOF 文件。\nAOF 重写机制是在重写时，读取当前数据库中的所有键值对，然后将每一个键值对用一条命令记录到「新的 AOF 文件」，等到全部记录完后，就将新的 AOF 文件替换掉现有的 AOF 文件。\n为什么重写 AOF 的时候，不直接复用现有的 AOF 文件，而是先写到新的 AOF 文件再覆盖过去。\n因为如果 AOF 重写过程中失败了，现有的 AOF 文件就会造成污染，可能无法用于恢复使用。\nAOF后台重写 BGREWRITEAOF\n重写的过程是由后台子进程完成的，这样可以使得主进程可以继续正常处理命令。\n用 AOF 日志的方式来恢复数据其实是很慢的，因为 Redis 执行命令由单线程负责的，而 AOF 日志恢复数据的方式是顺序执行日志里的每一条命令，如果 AOF 日志很大，这个「重放」的过程就会很慢了。\n4.3 RDB和AOF对比 RDB AOF 持久化方式 定时对整个内存做快照 记录每一次执行的命令 数据完整性 不完整，两次备份之间会丢失 相对完整，取决于刷盘策略 文件大小 会有压缩，文件体积小 记录命令，文件体积很大 宕机恢复速度 快 慢 数据恢复优先级 低，因为数据完整性不如AOF 高，数据完整性更高 系统资源占用 高，大量CPU和内存消耗 低，主要是磁盘IO资源，但是AOF重写时会占用大量CPU和内存资源 使用场景 可容忍数分钟的数据丢失，追求更快的启动速度 对数据安全性要求较高的场景 5 分布式缓存 5.1 Redis主从 单节点Redis的并发能力有上限，要进一步提高Redis的并发能力，需要搭建主从集群，实现读写分离。\n在redis.conf文件中配置slaveof \u0026lt;masterIP\u0026gt; \u0026lt;masterPort\u0026gt; 。\n常见拓扑结构：\n一主一从 一主多从 树状主从 数据同步原理\n主从第一次同步是全量同步。\n如果slave重启后同步，则执行增量同步。\nrepl_baklog大小有上限，写满后会覆盖最早的数据。如果slave断开时间过久，导致数据被覆盖，则无法实现增量同步，只能再次进行全量同步。 优化主从集群\n在master中配置repl-diskless-sync yes启用无磁盘复制，避免全量同步时的磁盘IO。 Redis单节点上的内存占用不要太大，减少RDB导致的过多磁盘IO。 适当提高repl_baklog的大小，发现slave宕机时尽快实现故障恢复，尽可能避免全量同步。 限制一个master上的slave节点数量，如果slave太多，可以采用主-从-从链式结构，减少master压力。 5.2 哨兵 slave宕机恢复后，可以找master节点同步数据，那master节点宕机后怎么办？\nRedis提供了**哨兵（Sentinel）**机制来实现主从集群的自动故障恢复。\n监控：Sentinel会不断检查master和slave是否按预期工作。 自动故障恢复： 如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主。 通知：Sentinel充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新消息推送给Redis客户端。 Sentinel基于心跳机制检测服务状态，每隔1秒向集群的每个实例发送ping命令：\n主观下线：如果某个sentinel节点发现某个实例未在规定时间响应，则认为该实例主观下线。 客观下线：如果超过指定数量（quorum）的sentinel都认为该实例主观下线，则该实例客观下线。quorum值最好超过Sentinel实例数量的一半。 选举\n一旦发现master故障，sentinel需要在slave中选择一个作为新的master：\n首先判断slave节点与master节点断开时间长短，如果超过指定值（down-after-millseconds*10）则会排除该slave节点。 然后判断slave节点的slave-priority值，越小优先级越高，如果是0则永远不参与选举。 如果slave-prority一样，则判断slave节点的offset值，越大说明数据越新，优先级越高。 最后是判断slave节点的运行id大小，越小优先级越高。 故障转移过程\n选取slave为master sentinel向备选节点发送slaveof no one 使得该节点成为主节点 sentinel向其他所有slave发送slaveof \u0026lt;newMasterIP\u0026gt; \u0026lt;newMasterPort\u0026gt; 将故障节点标记为slave RedisTemplate的哨兵模式\n在posm中引入redis的starter依赖 在Application.yml中指定sentinel集群相关信息 配置主存读写分离 5.3 Redis分片集群 主从和哨兵可以解决高可用、高并发读的问题。但是无法解决海量数据存储和高并发写的问题。\n使用分片集群可以解决上述问题，其特点有：\n集群中有多个master，每个master保存不同数据。 每个master都可以有多个slave节点。 master之间通过ping检测彼此健康状态。（不需要哨兵） 客户端请求可以访问集群任意节点，最终都会被转发到正确节点。 Redis分区策略：\n哈希取余分区：简单，平均，不利于扩容或收缩。 一致性哈希算法分区：扩展性得到保证，但是数据会有倾斜问题。 哈希插槽分区：Redis集群内置16384（0-16383）个哈希槽，redis会根据节点数量大致均等的将哈希槽映射到不同节点。数据到来时，根据key使用CRC16算法算出结果后对16384取余，映射到哈希槽。槽用来扩大数据粒度，便于移动，哈希解决映射问题。 key中包含{}，并且{}中至少包含1个字符，redis根据{}中的部分计算插槽值。 key中不包含{}，整个key都被用来计算插槽值。 分片集群下的自动故障转移\nmaster实例与其他实例失去连接。 进入疑似宕机状态。 确认下线，自动提升一个slave为master。 分片集群下手动故障转移（用于无感知机器升级）\n利用cluster failover 命令手动使得集群中某个master宕机，切换到执行该命令的slave节点，实现无感知的数据迁移。\n手动Failover支持的三种模式：\n缺省：默认图中流程。 force：省略对offset的一致性校验。 takeover：直接执行第五步，忽略一致性、master状态和其他master意见。 RedisTemplate分片集群\n引入redis的starter依赖 配置分片集群地址 配置读写分离 5.4 缓存问题 缓存穿透：key对应数据在数据源不存在 解决方案： 缓存空对象，数据库没找到，在redis缓存null，有额外内存消耗。 布隆过滤器，可能会有误判。 缓存击穿：key对应数据在数据源存在，但是过期 解决方案： 互斥锁：无额外内存消耗，保证一致性，线程需要等待，可能死锁。 逻辑过期：线程无需等待，不保证一致性，有额外内存消耗。 缓存雪崩：大量缓存失效，服务器宕机、缓存集中失效 解决方案： 提高可用性 均匀过期+热点数据永不过期 熔断降级 添加多级缓存 5.5 缓存预热 预留接口手动预热 项目启动设置自动预热 定时任务刷新缓存 6 内存回收 typedef struct redisDb{ dict *dict; //存放所有key及value的地方，也称为keyspace dict *expires; //存放每一个key及其对应的TTL存活时间，只包含设置了TTL的key dict *blocking_keys; //Keys with clients waiting for data dict *ready_keys; //blocked keys that received a push dict *watched_keys; //watched keys for multi/exec cas int id; //database ID， 0-15 long long avg_ttl; //记录平均TTL时长 unsigned long expires_cursor; //expire检查时在dict中抽样索引的位置 list *defrag_later; //等待碎片整理的key列表 }redisDb; 6.1 Redis过期key处理 惰性删除：访问一个key时，检查该key的存活时间，如果已经过期才执行删除。 周期删除：通过定时任务，周期性抽样部分过期的key，然后执行删除。 Redis设置一个定时任务serverCron()，按照server.hz的频率来执行过期key清理，模式为SLOW。 执行频率受server.hz影响，默认为10，即每秒执行10次。 执行清理耗时不超过一次执行周期的25%。 逐个遍历db，逐个遍历db中的bucket，抽取20个key判断是否过期。 没达到时间上限25ms，并且过期key比例大于10%（5个？），再进行一次抽样，否则结束。 Redis的每个事件循环前会调用beforeSleep()函数，执行过期key清理，模式为FAST。 执行频率受beforeSleep()调用频率影响，但两次FAST模式间隔不低于2ms。 执行清理耗时不超过1ms。 逐个遍历db，逐个遍历db中的bucket，抽取20个key判断是否过期。 没达到时间上限1ms，并且过期key比例大于10%，在进行一次抽样，否则结束。 6.2 Redis内存淘汰策略 当Redis内存使用达到设置的阈值时，Redis主动挑选部分Key删除，以释放内存。\n八种淘汰策略：\nnoeviction：不淘汰任何key，内存满时不允许写入新数据，默认策略 volatile-ttl：对设置了TTL的key，比较剩余TTL可以，TTL越小越先被淘汰。 allkeys-random：对全体Key，随机进行淘汰。即在db→dict中随机挑选。 volatile-random：对设置了TTL的key，随即进行淘汰，即在db→expires中随机挑选。 allkeys-lru：对全体key基于LRU算法进行淘汰。 volatile-lru：对设置了TTL的key基于LRU算法进行淘汰。 allkeys-lfu：对全体key基于LFU算法进行淘汰。 volatile-lfu：对设置了TTL的key基于LFU算法进行淘汰。 LRU(Least Recently Used)，最少最近使用。当前时间减去最后一次访问时间，值越大，淘汰优先级越高。\nLFU(Least Frequently Used)，最少频率使用。访问频率低的淘汰优先级高。\n逻辑访问次数通过一定算法计算得出，并且会根据上一次访问时间衰减。\n","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/redis/redis/","summary":"\u003ch1 id=\"redis\"\u003eRedis\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://www.bilibili.com/video/BV1cr4y1671t/?spm_id_from=444.64.search-card.all.click\"\u003e黑马程序员Redis入门到实战教程\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"1-基本概念\"\u003e1 基本概念\u003c/h1\u003e\n\u003ch2 id=\"11-redisremote-dictionary-server\"\u003e1.1 Redis（::Re::mote ::Di::ctionary ::S::erver）\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e键值型存储，value支持多种不同数据结构。\u003c/li\u003e\n\u003cli\u003e单线程，每个命令具备原子性。（6.0之后的多线程仅是在网络处理部分，核心命令执行还是单线程）\u003c/li\u003e\n\u003cli\u003e低延迟，速度快（基于内存、IO多路复用、良好的编码）。\u003c/li\u003e\n\u003cli\u003e支持数据持久化。\u003c/li\u003e\n\u003cli\u003e支持主从集群和分片集群。\u003c/li\u003e\n\u003cli\u003e支持多语言客户端。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"12-sql和nosql\"\u003e1.2 SQL和NoSQL\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSQL（Structured Query Language）：结构化的、关联的、SQL查询（语法固定）、事务（ACID）\u003c/li\u003e\n\u003cli\u003eNoSQL（Not only SQL）：非结构的、非关联的、非SQL的（语法不固定，不统一）、不一定满足事务全部要求（BASE）\n\u003cul\u003e\n\u003cli\u003e键值对：Redis\u003c/li\u003e\n\u003cli\u003e文档：MongoDB\u003c/li\u003e\n\u003cli\u003e图：Neo4j\u003c/li\u003e\n\u003cli\u003e列：HBase\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"13-redis通用命令\"\u003e1.3 Redis通用命令\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-other\" data-lang=\"other\"\u003e// 1. 列出所有符合条件的key : KEYS [pattern]\nKEYS *\nKEYS a*\n// 2. 删除所有指定的key : DEL key [key ...]\n// 3. 判断key是否存在 : EXISTS key [key ...]\n// 4. 给一个key设置有效期，过期自动删除 : EXPIRE key seconds\n// 5. 查看命令具体用法 : help [command]\n// 6. 查看一个key的有效期 : TTL key\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"2-底层数据结构\"\u003e2 底层数据结构\u003c/h1\u003e\n\u003cp\u003eRedis是一个key-value数据库，key一般是String类型，不过value的类型有很多：\u003c/p\u003e","title":"Redis"},{"content":"Redis补充 1 Redis网络模型 Redis的核心业务部分（命令处理）是单线程，但是整个Redis是多线程的。\nv4.0：引入多线程异步处理一些耗时较长的任务，例如异步删除命令unlink。 v6.0：在核心网络模型中引入多线程，进一步提高对于多核CPU的利用率，但是核心部分依然是单线程。 为什么选择单线程？\n性能瓶颈是网络延迟，不是执行速度，多线程并不会带来巨大性能提升。 多线程会导致过多的上下文切换，带来不必要的开销。 引入多线程可能会面临线程安全问题，必须引入线程锁这样的安全手段，实现复杂度增高，性能也大打折扣。 原理篇-27.Redis网络模型-Redis单线程及多线程网络模型变更_哔哩哔哩_bilibili\n2 Redis通信协议 RESP协议\n原理篇-28.Redis通信协议-RESP协议_哔哩哔哩_bilibili\n3 Redis事务 Redis事务的三个阶段\nMULTI %事务开始 ... %命令入队 EXEC %事务执行 Redis事务特点\nredis不支持回滚，事务失败，继续执行余下的命令 事物内部命令错误，所有命令都不会执行 事物内部出现运行错误，正确的命令会被执行 Redis事务没有原子性，持久性仅在开启AOF的always模式下支持。 Redis事务总是有隔离性（单线程）和一致性。 Redis事务相关命令\nWATCH：乐观锁，给事务提供CAS机制，可以监控一个或者多个键，一旦其中有一个被修改，之后的事务就不会执行，监控一直持续到EXEC或者UNWATCH。 MULTI：用于开启事务，开启后可以继续送入命令，当EXEC被调用时，才被执行。 EXEC：执行事务块内所有命令，返回所有命令的返回值，按照命令先后排序。 DISCARD：清空事务队列，放弃执行事务。 UNWATCH：取消watch对所有key的监控。 4 缓存和数据库的一致性 设置有效期：给缓存设置有效期，到期自动删除，再次查询时更新 优势：简单方便 缺点：时效性差，缓存过期之前可能不一致 场景：更新频率较低，时效性要求较低的业务 同步双写：在修改数据库的同时，直接修改缓存 优势：时效性强，缓存与数据库强一致 缺点：有代码侵入，耦合度高 场景：对一致性，时效性要求较高的缓存数据 异步通知：在修改数据库时发送事件通知，相关服务监听到通知后修改缓存数据 优势：低耦合，可以同时通知多个缓存服务 缺点：时效性一般，可能存在中间不一致状态 场景：时效性要求一般，有多个服务需要同步 基于MQ的异步通知，对业务代码仍然有一定侵入性 基于Cannal的异步通知，可以做到几乎0侵入 4.1 缓存更新策略 删除缓存而不是更新缓存 先删数据，后删缓存 4.2 缓存不一致处理 使用消息队列，把要删除和删除失败的key放入消息队列，利用重试机制，删除对应的key 对代码有侵入性 数据库订阅+消息队列保证key被删除 利用canal或其他服务监听binlog 复杂度提升 延时双删防止脏数据 延迟时间需要具体的考量和测试 设置过期时间兜底 5 热key重建 使用互斥锁，保证只有一个线程重建，其他线程等待该线程重建完后，获取缓存数据即可。 不显示设置过期时间，而是设置逻辑过期字段，发现逻辑过期后，采用单独的线程构建缓存。 6 大key问题 单个简单key存储的value过大，hash、set、zset、list中存储过多元素。\n大Key会造成什么问题？\n客户端耗时增加 对大key进行IO操作时，会严重占用带宽和CPU 造成Redis集群中的数据倾斜 主动删除、被动删除，可能会导致阻塞。 如何找到大Key？\nbigkeys命令：以遍历方式分析Redis实例中所有key，并返回整体统计信息和每个数据类型中top1的大key。 redis-rdb-tools：是由Python写的用来分析Redis的rdb快照文件的工具，可以把rdb文件生成json文件或报表来分析Redis的使用详情。 如何处理大Key？\n删除大Key unlink非阻塞删除 压缩和拆分大Key string优先进行压缩，然后进行拆分 list、set等，进行分片 7 Redis实践 7.1 基于Redis的消息队列 Redis提供了三种不同方式实现消息队列：\nlist结构：模拟消息队列 PubSub：基本的点对点消息模型 Stream：比较完善的消息队列模型 List模拟消息队列\n利用LPUSH结合RPOP、或者RPUSH结合LPOP来实现。\n当没有消息时，RPOP和LPOP命令会返回NULL，并不会像JVM阻塞队列那样阻塞并等待消息。所以应当使用BRPOP或者BLPOP来实现阻塞效果。\n利用Redis存储，不受JVM内存上限限制 基于Redis的持久化机制，数据安全性有保证 可以满足消息的有序性 无法避免消息丢失 只支持单消费者 PubSub消息队列\n消费者可以订阅一个或者多个channel，生产者向对应的channel发送消息后，所有订阅者都能收到相关消息。\nSUBSCRIBE channel [channel]：订阅一个或多个频道 PUBLISH channel msg：向一个频道发送消息 PSUBSCRIBE pattern [pattern]：订阅与pattern格式匹配的所有频道 采用发布订阅模型，支持多生产、多消费。 不支持数据持久化，该数据结构设计用于做数据发送，数据没有人接受会直接丢弃。 无法避免消息丢失。 消费者方消息堆积有上线，超出时数据丢失。 Stream消息队列\nXREAD 消息可回溯 一个消息可以被多个消费者读取 可以阻塞读取 有消息漏读的风险 消费者组 消息分流 消息标识 消息确认 可以多消费者争抢消息，加快消费速度 没有消息漏读风险 有消息确认机制，保证消息至少被消费一次 List PubSub Stream 消息持久化 支持 不支持 支持 阻塞读取 支持 支持 支持 消息堆积处理 受限于内存空间，可以利用多消费者加速处理 受限于消费者缓冲区 受限于队列长度，可以利用消费者组提高消费速度，减少堆积 消息确认机制 不支持 不支持 支持 消息回溯 不支持 不支持 支持 7.2 商品缓存 7.3 优惠券秒杀 7.4 好友关注 7.5 用户签到 7.6 UV统计 7.7 秒杀优化 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/redis/redis%E8%A1%A5%E5%85%85/","summary":"\u003ch1 id=\"redis补充\"\u003eRedis补充\u003c/h1\u003e\n\u003ch1 id=\"1-redis网络模型\"\u003e1 Redis网络模型\u003c/h1\u003e\n\u003cp\u003eRedis的核心业务部分（命令处理）是单线程，但是整个Redis是多线程的。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ev4.0：引入多线程异步处理一些耗时较长的任务，例如异步删除命令unlink。\u003c/li\u003e\n\u003cli\u003ev6.0：在核心网络模型中引入多线程，进一步提高对于多核CPU的利用率，但是核心部分依然是单线程。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e为什么选择单线程？\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e性能瓶颈是网络延迟，不是执行速度，多线程并不会带来巨大性能提升。\u003c/li\u003e\n\u003cli\u003e多线程会导致过多的上下文切换，带来不必要的开销。\u003c/li\u003e\n\u003cli\u003e引入多线程可能会面临线程安全问题，必须引入线程锁这样的安全手段，实现复杂度增高，性能也大打折扣。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003ca href=\"https://www.bilibili.com/video/BV1cr4y1671t/?p=171\u0026spm_id_from=pageDriver\u0026vd_source=5e81fa8ad2645ace69cd01959323966a\"\u003e原理篇-27.Redis网络模型-Redis单线程及多线程网络模型变更_哔哩哔哩_bilibili\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"2-redis通信协议\"\u003e2 Redis通信协议\u003c/h1\u003e\n\u003cp\u003eRESP协议\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.bilibili.com/video/BV1cr4y1671t?p=172\u0026vd_source=5e81fa8ad2645ace69cd01959323966a\"\u003e原理篇-28.Redis通信协议-RESP协议_哔哩哔哩_bilibili\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"3-redis事务\"\u003e3 Redis事务\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eRedis事务的三个阶段\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eMULTI\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e\u003cspan class=\"err\"\u003e事务开始\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e...\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e\u003cspan class=\"err\"\u003e命令入队\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eEXEC\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e\u003cspan class=\"err\"\u003e事务执行\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eRedis事务特点\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eredis不支持回滚\u003c/strong\u003e，事务失败，继续执行余下的命令\u003c/li\u003e\n\u003cli\u003e事物内部命令错误，所有命令都不会执行\u003c/li\u003e\n\u003cli\u003e事物内部出现运行错误，正确的命令会被执行\u003c/li\u003e\n\u003cli\u003eRedis事务没有\u003cstrong\u003e原子性，持久性\u003c/strong\u003e仅在开启AOF的always模式下支持。\u003c/li\u003e\n\u003cli\u003eRedis事务总是有\u003cstrong\u003e隔离性（单线程）\u003cstrong\u003e和\u003c/strong\u003e一致性。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eRedis事务相关命令\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWATCH：乐观锁，给事务提供CAS机制，可以监控一个或者多个键，一旦其中有一个被修改，之后的事务就不会执行，监控一直持续到EXEC或者UNWATCH。\u003c/li\u003e\n\u003cli\u003eMULTI：用于开启事务，开启后可以继续送入命令，当EXEC被调用时，才被执行。\u003c/li\u003e\n\u003cli\u003eEXEC：执行事务块内所有命令，返回所有命令的返回值，按照命令先后排序。\u003c/li\u003e\n\u003cli\u003eDISCARD：清空事务队列，放弃执行事务。\u003c/li\u003e\n\u003cli\u003eUNWATCH：取消watch对所有key的监控。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"4-缓存和数据库的一致性\"\u003e4 缓存和数据库的一致性\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e设置有效期：给缓存设置有效期，到期自动删除，再次查询时更新\n\u003cul\u003e\n\u003cli\u003e优势：简单方便\u003c/li\u003e\n\u003cli\u003e缺点：时效性差，缓存过期之前可能不一致\u003c/li\u003e\n\u003cli\u003e场景：更新频率较低，时效性要求较低的业务\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e同步双写：在修改数据库的同时，直接修改缓存\n\u003cul\u003e\n\u003cli\u003e优势：时效性强，缓存与数据库强一致\u003c/li\u003e\n\u003cli\u003e缺点：有代码侵入，耦合度高\u003c/li\u003e\n\u003cli\u003e场景：对一致性，时效性要求较高的缓存数据\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e异步通知：在修改数据库时发送事件通知，相关服务监听到通知后修改缓存数据\n\u003cul\u003e\n\u003cli\u003e优势：低耦合，可以同时通知多个缓存服务\u003c/li\u003e\n\u003cli\u003e缺点：时效性一般，可能存在中间不一致状态\u003c/li\u003e\n\u003cli\u003e场景：时效性要求一般，有多个服务需要同步\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/b3b47c9dd44a526e40dd810deb15808a/8abb25a2b116eaf0abcdb0ae98618474.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e基于MQ的异步通知，对业务代码仍然有一定侵入性\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/b3b47c9dd44a526e40dd810deb15808a/dc15605693d4169fc32a3e8e780bb3a0.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e基于Cannal的异步通知，可以做到几乎0侵入\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"41-缓存更新策略\"\u003e4.1 缓存更新策略\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e删除缓存而不是更新缓存\u003c/li\u003e\n\u003cli\u003e先删数据，后删缓存\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"42-缓存不一致处理\"\u003e4.2 缓存不一致处理\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e使用消息队列，把要删除和删除失败的key放入消息队列，利用重试机制，删除对应的key\n\u003cul\u003e\n\u003cli\u003e对代码有侵入性\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e数据库订阅+消息队列保证key被删除\n\u003cul\u003e\n\u003cli\u003e利用canal或其他服务监听binlog\u003c/li\u003e\n\u003cli\u003e复杂度提升\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e延时双删防止脏数据\n\u003cul\u003e\n\u003cli\u003e延迟时间需要具体的考量和测试\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e设置过期时间兜底\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"5-热key重建\"\u003e5 热key重建\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e使用互斥锁，保证只有一个线程重建，其他线程等待该线程重建完后，获取缓存数据即可。\u003c/li\u003e\n\u003cli\u003e不显示设置过期时间，而是设置逻辑过期字段，发现逻辑过期后，采用单独的线程构建缓存。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"6-大key问题\"\u003e6 大key问题\u003c/h1\u003e\n\u003cp\u003e单个简单key存储的value过大，hash、set、zset、list中存储过多元素。\u003c/p\u003e","title":"Redis补充"},{"content":"1 TCP基础 1.1 头部字段 序列号：建立时生成随机数，后续每发送一次数据加一，用于解决网络包乱序的问题 确认应答号：表示下一次「期待」收到的序列号，发送端收到这个确认应答后认为在这个序列号之前的数据都被正常接受，用来解决丢包问题 控制位： ACK：为1表示「确认应答」字段有效，除SYN包之外该位必须设置为1 RST：为1表示TCP连接异常，强制断开 SYN：为1时表示希望建立连接，并初始化「序列号」 FIN：为1时表示之后不会再有数据发送，表示希望断开连接 1.2 TCP的特点 面向连接：一对一建立连接，通过「源地址，源端口，目的地址，目的端口」确定唯一连接 可靠：TCP协议尽自己最大努力保证报文一定能够到达接收端 字节流：通过TCP传输的数据，可能会被操作系统拆分为多个TCP报文，如果接收方不知道「消息边界」就无法正确读取消息。并且 TCP 报文是「有序的」，当「前一个」TCP 报文没有收到的时候，即使它先收到了后面的 TCP 报文，那么也不能扔给应用层去处理，同时对「重复」的 TCP 报文会自动丢弃。 2 TCP三次握手 2.1 三次握手如何建立 首先，客户端和服务器都处于close状态，然后服务器主动监听某个端口，处于Listen状态。 客户端随机初始化序号，同时把SYN标识为设为1，表示SYN报文，把SYN送给服务端后，变换为SYN-SENT状态。 服务端收到客户端的SYN报文后，随机初始化自己的序号，同时把确认应答号设置为客户端初始序号+1，然后把SYN和ACK标识为设置为1，最后送给客户端，变换为SYN-RCVD状态。 客户端收到服务端报文后，向服务器回应最后一个应答报文，将ACK标识为设置为1，确认应答号填入服务器初始序号+1，这次报文可以携带数据，然后送给服务端，状态变化为ESTABLISHED。 服务器收到应答报文后，状态也设置为ESTABLISHED。 2.2 如何在Linux中查看TCP状态 netstat -napt\n2.3 为什么是三次握手？而不是两次、四次? 三次的原因： 三次可以阻止重复历史连接的初始化： 两次握手对于新旧TCP连接请提无法避免初始化步骤。 三次可以同步双方的初始序列号：可以保证双方初始的序列号被可靠的同步给对方，四次握手没有必要，服务器确认和初始化自己的两步可以合并为一步。 三次可以避免浪费资源：两次握手由于服务器没有中间状态，无法知道客户端是否收到自己回复的ACK，所以每收到一个SYN报文就需要建立一个连接，同一个连接由于网络阻塞而重发SYN报文时，服务端会产生资源浪费。 为什么每次建立TCP连接初始化序列号都要求不同： 为了防止历史报文被下一个相同四元组接受。 为了安全性， 防止黑客伪造TCP报文。 2.4 IP层即然会分片，为什么TCP还需要MSS呢？ MTU：指的是一个网络包的最大长度，以太网中一般为1500字节 MSS：除去IP和TCP头部之后，一个网络包能容纳的TCP数据的最大长度 当IP层有一个超过MTU大小的数据要发送时，IP层就要进行分片，但是当一个分片丢失时，整个IP报文就需要重传，因为IP层没有超时重传机制，所以为了达到最佳的传输效率，建立TCP连接时通常需要协商双方的MSS值，当TCP层发现报文超过MSS时，就会进行分片，保证在IP层形成的IP包长度不会大于MTU，所以也就不会分片了。\n2.5 三次握手信息丢失会发生什么 第一次握手丢失\n客户端触发超时重传，重传次数默认为5，超时重试时间从1s开始翻倍。 超过次数限制后断开连接 第二次握手丢失\n客户端和服务端都超时重传，各自超过重传次数上限后，就会断开连接，回到Close状态 第三次握手丢失\nACK报文不重传，服务端触发超时重传，超过次数限制后断开连接。 2.6 SYN攻击 攻击者伪造不同IP的tcp请求，打满服务器半连接队列。\nTCP三次握手时，Linux内核会维护两个队列\n半连接队列：SYN队列 全连接队列：accept队列 当服务器收到SYN报文时，会创建一个半连接对象，加入到内核的SYN对队列 发送SYN+ACK等待客户端响应 服务器收到客户端响应的ACK报文，从SYN队列取出半连接对象，构建一个新的连接对象放入全连接队列 应用通过调用accept()的socket接口，从全连接队列中取出连接对象。 避免方式：\n增大netdev_max_backlog：网卡接受数据包速度大于内核处理速度时，会有一个队列保存数据包，这个参数对应的就是队列长度\n增大半连接队列\n增大 net.ipv4.tcp_max_syn_backlog 增大 listen() 函数中的 backlog 增大 net.core.somaxconn 开启tcp-syncookies：开启后可以在不使用SYN半连接队列的情况下成功建立连接。\n当SYN队列满后，服务器收到SYN会根据算法算出一个cookie值 将cookie值放入第二次握手报文的序列号中 服务器收到应答报文时会检查ACK包的合法性，如果合法则放入全连接队列中，最后应用程序调用accept（）接口取出连接。 减少SYN+ACK重传次数：内核参数tcp_synack_retries\n3 TCP四次挥手 3.1 挥手过程 客户端打算关闭连接，发送FIN报文，进入FIN_WAIT_1状态 服务器收到报文后，发送ACK应答报文，服务器进入CLOSE_WAIT状态 客户端收到ACK报文进入FIN_WAIT_2状态 服务器处理完数据，发送FIN报文，进入LAST_ACK状态 客户端收到FIN报文，回应ACK报文，进入TIME_WAIT状态 服务器收到ACK报文后，进入CLOSE状态，服务端完成连接关闭动作 客户端经过2MSL后，自动进入CLOSE状态，客户端完成连接关闭动作 3.2 为什么需要四次挥手 关闭连接时，客户端向服务端发送 FIN 时，仅仅表示客户端不再发送数据了但是还能接收数据。 关闭连接时，客户端向服务端发送 FIN 时，仅仅表示客户端不再发送数据了但是还能接收数据。 特定情况下会变成三次挥手：被动关闭方「没有数据要发送」并且「开启了TCP延迟确认机制」，那么第二次和第三次挥手就会合并传输。 当有响应数据要发送时，ACK 会随着响应数据一起立刻发送给对方 当没有响应数据要发送时，ACK 将会延迟一段时间，以等待是否有响应数据可以一起发送 如果在延迟等待发送 ACK 期间，对方的第二个数据报文又到达了，这时就会立刻发送 ACK 3.3 挥手报文丢失会发生什么 第一次挥手丢失：客户端触发超时重传，超过tcp_orphan_retries定义的重传次数时，直接关闭TCP连接。服务器处于连接建立状态。 第二次挥手丢失：服务器ACK丢失，但是ACK报文不重传，所以客户端会触发超时重传机制，服务器处于CLOSE_WAIT状态。 正常使用close关闭连接，客户端收到第二次挥手后进入FIN_WAIT_2状态会默认等待60秒（tcp_fin_timeout可以控制close关闭的连接），超时自动关闭连接。 但是如果使用shutdown关闭连接（只关闭了发送反向），那么进入FIN_WAIT_2状态后就会死等（tcp_fin_timeout无法控制shutdown关闭的连接）。 第三次挥手丢失：服务端会触发超时重传机制，超过重试次数后关闭TCP连接，客户端处于FIN_WAIT_2有等待时常上线，超时没有收到第三次挥手报文会主动断开连接 第四次挥手丢失：服务器会触发超时重传机制，而客户端进入2MSL的TIME_WAIT状态，但是客户端每收到一个第三次挥手消息就会重置2MSL的时间，所以等服务器达到超时上限后发出最后一个报文，再过2MSL客户端会进入关闭状态。 3.4 TIME_WAIT状态 为什么要有TIME_WAIT状态：\n防止历史连接中的数据被后面相同四元组连接错误接受。 保证「被动关闭」一方能够被正确关闭。 TIME_WAIT过多，会占用系统资源，占用端口资源\n如果客户端（主动发起关闭连接方）的 TIME_WAIT 状态过多，占满了所有端口资源，那么就无法对「目的 IP+ 目的 PORT」都一样的服务端发起连接了，但是被使用的端口，还是可以继续对另外一个服务端发起连接的。 如果服务端（主动发起关闭连接方）的 TIME_WAIT 状态过多，并不会导致端口资源受限，因为服务端只监听一个端口，而且由于一个四元组唯一确定一个 TCP 连接，因此理论上服务端可以建立很多连接，但是 TCP 连接过多，会占用系统资源，比如文件描述符、内存资源、CPU 资源、线程资源等。 优化TIME_WAIT\n打开net.ipv4.tcp_tw_reuse 和 tcp_timestamps选项：复用处于TIME_WAIT状态的socket作为新的连接使用。 设置net.ipv4.tcp_max_tw_buckets：TIME_WAIT的连接超过这个值，系统会将后续的TIME_WAIT连接状态直接重置。 程序使用SO_LINGER，如果l_onoff为非 0， 且l_linger值为 0，那么调用close后，会立该发送一个RST标志给对端，该 TCP 连接将跳过四次挥手，也就跳过了TIME_WAIT状态，直接关闭。不提倡 服务器出现大量TIME_WAIT有什么原因\nTIME_WAIT 状态是主动关闭连接方才会出现的状态，所以如果服务器出现大量的 TIME_WAIT 状态的 TCP 连接，就是说明服务器主动断开了很多 TCP 连接。\nHTTP没有使用长连接，禁用Keep-Alive后，服务器会主动关闭连接，所以会出现大量TIME_WAIT。 HTTP长连接超时，长连接没有请求超过一定时间，服务器会主动关闭。（比如nginx提供的keepalive_timeout） HTTP长连接的请求数量达到上限，Web服务器会定义一个参数，表示一个HTTP长连接上能够请求的最大请求数量，超过数量后会主动关闭。 服务器出现大量CLOSE_WAIT有什么原因\nCLOSE_WAIT 状态是「被动关闭方」才会有的状态，而且如果「被动关闭方」没有调用 close 函数关闭连接，那么就无法发出 FIN 报文，从而无法使得 CLOSE_WAIT 状态的连接转变为 LAST_ACK 状态。当服务端出现大量 CLOSE_WAIT 状态的连接的时候，说明服务端的程序没有调用 close 函数关闭连接。\nTCP服务端流程\n创建服务端 socket，bind 绑定端口、listen 监听端口 将服务端 socket 注册到 epoll epoll_wait 等待连接到来，连接到来时，调用 accpet 获取已连接的 socket 将已连接的 socket 注册到 epoll epoll_wait 等待事件发生 对方连接关闭时，我方调用 close 可能导致服务端没有调用close的原因：\n第二步没做：没有将服务端 socket 注册到 epoll，这样有新连接到来时，服务端没办法感知这个事件，也就无法获取到已连接的 socket，那服务端自然就没机会对 socket 调用 close 函数了。\n第三步没做：有新连接到来时没有调用 accpet 获取该连接的 socket，导致当有大量的客户端主动断开了连接，而服务端没机会对这些 socket 调用 close 函数，从而导致服务端出现大量 CLOSE_WAIT 状态的连接。\n第四步没做：通过 accpet 获取已连接的 socket 后，没有将其注册到 epoll，导致后续收到 FIN 报文的时候，服务端没办法感知这个事件，那服务端就没机会调用 close 函数了。\n第六步没做：当发现客户端关闭连接后，服务端没有执行 close 函数，可能是因为代码漏处理，或者是在执行 close 函数之前，代码卡在某一个逻辑，比如发生死锁等等。\n通常都是代码问题，主要分析方向就是为什么没有调用close。\n3.5 建立连接后，有一方崩溃会发生什么？ 主机崩溃：TCP有保活机制，应用层可以自行实现心跳机制。如果没有开启保活机制，服务端会一直保持ESTABLISHED的TCP连接。\ntcp_keepalive_time=7200：表示保活时间是 7200 秒（2小时），也就 2 小时内如果没有任何连接相关的活动，则会启动保活机制； tcp_keepalive_intvl=75：表示每次检测间隔 75 秒； tcp_keepalive_probes=9：表示检测 9 次无响应，认为对方是不可达的，从而中断本次的连接。 应用程序若想使用 TCP 保活机制需要通过 socket 接口设置 SO_KEEPALIVE 选项才能够生效。（对端响应，重置保活时间；对端重启，回应RST报文；对端无响应，达到上限报告死亡）。\n进程崩溃：TCP 的连接信息是由内核维护的，所以当服务端的进程崩溃后，内核需要回收该进程的所有 TCP 连接资源，于是内核会发送第一次挥手 FIN 报文，后续的挥手过程也都是在内核完成，并不需要进程的参与，所以即使服务端的进程退出了，还是能与客户端完成 TCP 四次挥手的过程。\n客户端主机宕机：\n服务端发送数据：超时重传达到上限断开连接 服务器不发送数据 开启保活机制：探测到死亡后断开连接 一直存在保持ESTABLISHED状态。 4 TCP重传、滑动窗口、流量控制、拥塞控制 4.1 重传机制 超时重传：发送数据时，启动一个定时器，超过指定时间，没有收到ACK 确认报文，就重发该数据 RTO超时时间设置小于RTT（包往返时间时）会造成网络拥塞，当过于大于RTT时会没有效率，所以应当略大于RTT。 快速重传：收到三次相同的ACK，就开始重传ACK中期望的数据包 SACK：在TCP头部增加SACK选项，可以将已经收到的数据信息发送给发送方，从而发送方就不需要重传全部信息。 D-SACK：可以让「发送方」知道，是发出去的包丢了，还是接收方回应的 ACK 包丢了;可以知道是不是「发送方」的数据包被网络延迟了;可以知道网络中是不是把「发送方」的数据包给复制了。 4.2 滑动窗口 窗口大小就是指无需等待确认应答，而可以继续发送数据的最大值。\n对应累计应答模式，只要收到ACK报文，就表示之前的报文全部都被正确接受。\n窗口大小的确定：TCP头部有一个字段叫Window，接收段用来告诉发送端自己还有多少缓冲区可以接受数据，然后发送端根据接收端的能力发送数据，所以通常是由接收端确认窗口大小的。 接收窗口和发送窗口的大小是相等的吗？并不是完全相等，接收窗口的大小是约等于发送窗口的大小的。当接收方的应用进程读取数据的速度非常快的话，这样的话接收窗口可以很快的就空缺出来。那么新的接收窗口大小，是通过 TCP 报文中的 Windows 字段来告诉发送方。 4.3 流量控制 TCP 提供一种机制可以让「发送方」根据「接收方」的实际接收能力控制发送的数据量，这就是所谓的流量控制。\n操作系统缓冲区和滑动窗口的关系：实际上，发送窗口和接收窗口中所存放的字节数，都是放在操作系统内存缓冲区中的，而操作系统的缓冲区，会被操作系统调整。\n当接收方应用进程没办法及时读取缓冲区的内容时，接收方接受窗口会关闭 当接收方资源紧张，操作系统直接减少了接收缓冲区大小，应用程序又无法及时读取缓存数据，这是数据包会丢失，发送方可用窗口大小会变为负值。 为了防止这种情况发生，TCP 规定是不允许同时减少缓存又收缩窗口的，而是采用先收缩窗口，过段时间再减少缓存，这样就可以避免了丢包情况。 窗口关闭：如果窗口大小为0，就会阻止发送方给接受方出阿奴第数据，直到窗口非0为止。接收方向发送方通告窗口大小时，是通过 ACK 报文来通告的。\n窗口关闭后，处理完数据，发送的非零ACK报文丢失会出现死锁（相互等待）：TCP 为每个连接设有一个持续定时器，只要 TCP 连接一方收到对方的零窗口通知，就启动持续计时器。如果持续计时器超时，就会发送窗口探测 ( Window probe ) 报文，而对方在确认这个探测报文时，给出自己现在的接收窗口大小。 糊涂窗口综合症：如果接收方太忙了，来不及取走接收窗口里的数据，那么就会导致发送方的发送窗口越来越小。到最后，如果接收方腾出几个字节并告诉发送方现在有几个字节的窗口，而发送方会义无反顾地发送这几个字节，这就是糊涂窗口综合症。\n让接收方不通告小窗口给发送方：当「窗口大小」小于 min( MSS，缓存空间/2 ) ，也就是小于 MSS 与 1/2 缓存大小中的最小值时，就会向发送方通告窗口为 0，也就阻止了发送方再发数据过来。等到接收方处理了一些数据后，窗口大小 \u0026gt;= MSS，或者接收方缓存空间有一半可以使用，就可以把窗口打开让发送方发送数据过来。 让发送方避免发送小数据：使用 Nagle 算法，满足1）要等到窗口大小 \u0026gt;= MSS 并且 数据大小 \u0026gt;= MSS；2）收到之前发送数据的 ack 回包；二者之一就发送数据，否则一直囤积数据。 接收方得满足「不通告小窗口给发送方」+ 发送方开启 Nagle 算法，才能避免糊涂窗口综合症。\n4.4 拥塞控制 为什么要有拥塞控制呀，不是有流量控制了吗？\n流量控制是避免「发送方」的数据填满「接收方」的缓存，但是并不知道网络的中发生了什么。\n在网络出现拥堵时，如果继续发送大量数据包，可能会导致数据包时延、丢失等，这时 TCP 就会重传数据，但是一重传就会导致网络的负担更重，于是会导致更大的延迟以及更多的丢包，这个情况就会进入恶性循环被不断地放大\u0026hellip;.\n什么是拥塞窗口？和发送窗口有什么关系呢？\n拥塞窗口 cwnd是发送方维护的一个的状态变量，它会根据网络的拥塞程度动态变化的。\n发送窗口 swnd 和接收窗口 rwnd 是约等于的关系，加入了拥塞窗口的概念后，此时发送窗口的值是swnd = min(cwnd, rwnd)，也就是拥塞窗口和接收窗口中的最小值。只要网络中没有出现拥塞，cwnd 就会增大；但网络中出现了拥塞，cwnd 就减少。\n拥塞控制算法：cwnd初始大小为10，ssthresh初始大小为65535字节。\n慢启动：当发送方每收到一个 ACK，拥塞窗口 cwnd 的大小就会加 1。\n拥塞避免：当拥塞窗口 cwnd 「超过」慢启动门限 ssthresh 就会进入拥塞避免算法。每当收到一个 ACK 时，cwnd 增加 1/cwnd。\n拥塞发生：拥塞发生后触发超时重传机制，此时ssthresh 会设为 cwnd/2，cwnd 重置为 初始值，重新开始慢启动。\n快速恢复：拥塞发生后触发快速重传机制（快速重传和快速恢复算法一般同时使用，快速恢复算法是认为，你还能收到 3 个重复 ACK 说明网络也不那么糟糕，所以没有必要像 RTO 超时那么强烈），此时cwnd = cwnd/2 ，也就是设置为原来的一半；ssthresh = cwnd`；然后进入快速恢复算法：\n拥塞窗口 cwnd = ssthresh + 3 （ 3 的意思是确认有 3 个数据包被收到了）\n重传丢失的数据包；\n如果再收到重复的 ACK，那么 cwnd 增加 1；\n如果收到新数据的 ACK 后，把 cwnd 设置为第一步中的 ssthresh 的值，原因是该 ACK 确认了新的数据，说明从 duplicated ACK 时的数据都已收到，该恢复过程已经结束，可以回到恢复之前的状态了，也即再次进入拥塞避免状态。\n","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/new/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/tcp/","summary":"\u003ch2 id=\"1-tcp基础\"\u003e1 TCP基础\u003c/h2\u003e\n\u003ch4 id=\"11-头部字段\"\u003e1.1 头部字段\u003c/h4\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cul\u003e\n\u003cli\u003e序列号：建立时生成随机数，后续每发送一次数据加一，\u003cstrong\u003e用于解决网络包乱序的问题\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e确认应答号：表示下一次「期待」收到的序列号，发送端收到这个确认应答后认为在这个序列号之前的数据都被正常接受，\u003cstrong\u003e用来解决丢包问题\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e控制位：\n\u003cul\u003e\n\u003cli\u003eACK：为1表示「确认应答」字段有效，除SYN包之外该位必须设置为1\u003c/li\u003e\n\u003cli\u003eRST：为1表示TCP连接异常，强制断开\u003c/li\u003e\n\u003cli\u003eSYN：为1时表示希望建立连接，并初始化「序列号」\u003c/li\u003e\n\u003cli\u003eFIN：为1时表示之后不会再有数据发送，表示希望断开连接\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"12-tcp的特点\"\u003e1.2 TCP的特点\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e面向连接：一对一建立连接，通过「源地址，源端口，目的地址，目的端口」确定唯一连接\u003c/li\u003e\n\u003cli\u003e可靠：TCP协议尽自己最大努力保证报文一定能够到达接收端\u003c/li\u003e\n\u003cli\u003e字节流：通过TCP传输的数据，可能会被操作系统拆分为多个TCP报文，如果接收方不知道「消息边界」就无法正确读取消息。并且 TCP 报文是「有序的」，当「前一个」TCP 报文没有收到的时候，即使它先收到了后面的 TCP 报文，那么也不能扔给应用层去处理，同时对「重复」的 TCP 报文会自动丢弃。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-tcp三次握手\"\u003e2 TCP三次握手\u003c/h2\u003e\n\u003ch4 id=\"21-三次握手如何建立\"\u003e2.1 三次握手如何建立\u003c/h4\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cul\u003e\n\u003cli\u003e首先，客户端和服务器都处于\u003ccode\u003eclose\u003c/code\u003e状态，然后服务器主动监听某个端口，处于\u003ccode\u003eListen\u003c/code\u003e状态。\u003c/li\u003e\n\u003cli\u003e客户端随机初始化序号，同时把\u003ccode\u003eSYN\u003c/code\u003e标识为设为1，表示SYN报文，把SYN送给服务端后，变换为\u003ccode\u003eSYN-SENT\u003c/code\u003e状态。\u003c/li\u003e\n\u003cli\u003e服务端收到客户端的SYN报文后，随机初始化自己的序号，同时把确认应答号设置为客户端初始序号+1，然后把\u003ccode\u003eSYN\u003c/code\u003e和\u003ccode\u003eACK\u003c/code\u003e标识为设置为1，最后送给客户端，变换为\u003ccode\u003eSYN-RCVD\u003c/code\u003e状态。\u003c/li\u003e\n\u003cli\u003e客户端收到服务端报文后，向服务器回应最后一个应答报文，将ACK标识为设置为1，确认应答号填入服务器初始序号+1，这次报文可以携带数据，然后送给服务端，状态变化为\u003ccode\u003eESTABLISHED\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e服务器收到应答报文后，状态也设置为\u003ccode\u003eESTABLISHED\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"22-如何在linux中查看tcp状态\"\u003e2.2 如何在Linux中查看TCP状态\u003c/h4\u003e\n\u003cp\u003enetstat -napt\u003c/p\u003e\n\u003ch4 id=\"23-为什么是三次握手而不是两次四次\"\u003e2.3 为什么是三次握手？而不是两次、四次?\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e三次的原因：\n\u003cul\u003e\n\u003cli\u003e三次可以阻止重复\u003cstrong\u003e历史连接的初始化\u003c/strong\u003e： 两次握手对于新旧TCP连接请提无法避免初始化步骤。\u003c/li\u003e\n\u003cli\u003e三次可以同步双方的初始序列号：可以保证双方初始的序列号被可靠的同步给对方，四次握手没有必要，服务器确认和初始化自己的两步可以合并为一步。\u003c/li\u003e\n\u003cli\u003e三次可以避免浪费资源：两次握手由于服务器没有中间状态，无法知道客户端是否收到自己回复的ACK，所以每收到一个SYN报文就需要建立一个连接，同一个连接由于网络阻塞而重发SYN报文时，服务端会产生资源浪费。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e为什么每次建立TCP连接初始化序列号都要求不同：\n\u003cul\u003e\n\u003cli\u003e为了防止历史报文被下一个相同四元组接受。\u003c/li\u003e\n\u003cli\u003e为了安全性， 防止黑客伪造TCP报文。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"24-ip层即然会分片为什么tcp还需要mss呢\"\u003e2.4 IP层即然会分片，为什么TCP还需要MSS呢？\u003c/h4\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cul\u003e\n\u003cli\u003eMTU：指的是一个网络包的最大长度，以太网中一般为1500字节\u003c/li\u003e\n\u003cli\u003eMSS：除去IP和TCP头部之后，一个网络包能容纳的TCP数据的最大长度\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e当IP层有一个超过MTU大小的数据要发送时，IP层就要进行分片，但是当一个分片丢失时，整个IP报文就需要重传，因为IP层没有超时重传机制，所以为了达到最佳的传输效率，建立TCP连接时通常需要协商双方的MSS值，当TCP层发现报文超过MSS时，就会进行分片，保证在IP层形成的IP包长度不会大于MTU，所以也就不会分片了。\u003c/p\u003e\n\u003ch4 id=\"25-三次握手信息丢失会发生什么\"\u003e2.5 三次握手信息丢失会发生什么\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e第一次握手丢失\u003c/p\u003e","title":"TCP"},{"content":"创建型模式 在创建对象的同时，隐藏创建逻辑，不使用new直接实例化对象，程序判断需要创建哪些对象时更加灵活。\n1 单例模式 一个单例类在任何情况下只存在一个实例，构造方法私有，由自己创建一个静态变量存储实例，对外提供一个静态共有方法获取实例。\n只有一个实例，避免了开销 没有抽象层，难以拓展，与单一职责原则冲突。 1.1 常见写法 1.1.1 饿汉式，线程安全 类一加载就创建对象，比较常用，但是容易产生垃圾对象。\n线程安全，不加锁，执行效率高 缺点：不是懒加载，浪费内存空间 public class Singleton{ private Singleton(){} private final static Singleton instance = new Singleton(); public static Singleton getInstance(){ return instance; } } 使用反射破坏单例 public class Main{ public static void main(String[] args) throws Exception{ Constructor\u0026lt;Singleton\u0026gt; declaredConstructor = Singleton.class.getDeclaredConstructor(null); declaredConstructor.setAccessible(true); Singleton singleton = declaredConstructor.newInstance(); } } 1.1.2 懒汉式，线程不安全 public class Singleton{ private Singleton(){} private static Singleton instance; public static Singleton getInstance(){ if ( instance == null ) { instance = new Singleton(); } return instance; } } 多线程破坏单例 public class Main(){ public static void main(String[] args){ for(int i=0;i\u0026lt;3;i++){ new Thread(() -\u0026gt; { System.out.println(\u0026#34;multi thread created singleton:\u0026#34; + Singleton.getInstance()); }).start() } } } 1.1.3 懒汉式，线程安全 加锁\npublic class Singleton{ private Singleton(){} public static Singleton instance; public synchronized static Singleton getInstance(){ if( instance == null ){ instance = new Singleton(); } return instance; } } 1.1.4 双重锁校验 public class Singleton{ private Single(){} private volatile static Singleton instance; public static Singleton getInstance(){ if( instance == null ){ synchronized (Singleton.class){ if( instance == null ){ instance = new Singleton(); } } } return instance; } } 为什么要用volatile关键字？\nnew关键字不是原子操作：（1）在堆内存开辟内存空间、（2）调用构造方法初始化对象，（3）引用变量指向堆内存空间。\n编译器对代码优化后可能会进行指令重排，导致执行顺序为（1）、（3）、（2），当执行完（3）时，其他线程发现instance不等于null，返回没有被初始化的实例。\n1.1.5 静态内部类 懒加载，线程安全，效率高，实现简单\npublic class Singleton{ private Singleton(){} public static Singleton getInstance(){ return InnerClass.INSTANCE; } private static class InnerClass{ private final static Singleton INSTANCE = new Singleton(); } } 类的加载时机\u0026ndash;主动加载：\n遇到new、getstatic、putstatic、invokestatic时 使用java.lang.reflect对类进行反射时 初始化类发现其父类还没初始化时 虚拟器启动时，用户指定要执行的主类 使用JDK1.7的动态语言支持时，如果。。。 当gitInstance被调用时，InnerClass才在Singleton的运行时常量池里，吧符号引用换位直接引用，这时INSTANCE也才被真正的创建。JVM会保证一个类的初始化函数是同步的。\n1.1.6 枚举单例 public enum Singleton{ INSTANCE; public void doSomething(String str){ System.out.println(str); } } 简单、高效、线程安全、可以避免通过反射破坏枚举单例 2 简单工厂模式 工厂根据Client传入参数不同，返回不同抽象对象实例\n适用于创建对象较少的情况。 如果增加新的产品，需要修改工厂逻辑，违背开闭原则。 实例\nSpring中的BeanFactory使用简单工厂模式，根据传入一个唯一标识获得Bean对象。\n3 工厂模式 与简单工厂模式相比，定义了抽象工厂，将生产任务交给不同的派生类工厂，派生类实现生产接口，从而就不需要通过指定类型来创建特点对象了。\n针对一类产品，当有新的类别时，需要修改抽象工厂及派生类逻辑 4 抽象工厂模式 抽象工厂模式通过在抽象工厂内增加创建产品的接口，并在具体的派生类中实现新加产品的创建（前提是子工厂支持生成该商品，否则这个接口可以什么都不做）。\n5 建造者模式 6 原型模式 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/designmode/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/","summary":"\u003ch1 id=\"创建型模式\"\u003e创建型模式\u003c/h1\u003e\n\u003cp\u003e在创建对象的同时，隐藏创建逻辑，不使用new直接实例化对象，程序判断需要创建哪些对象时更加灵活。\u003c/p\u003e\n\u003ch1 id=\"1-单例模式\"\u003e1 单例模式\u003c/h1\u003e\n\u003cp\u003e一个单例类在任何情况下只存在一个实例，构造方法私有，由自己创建一个静态变量存储实例，对外提供一个静态共有方法获取实例。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e只有一个实例，避免了开销\u003c/li\u003e\n\u003cli\u003e没有抽象层，难以拓展，与\u003cstrong\u003e单一职责\u003c/strong\u003e原则冲突。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"11-常见写法\"\u003e1.1 常见写法\u003c/h2\u003e\n\u003ch3 id=\"111-饿汉式线程安全\"\u003e1.1.1 饿汉式，线程安全\u003c/h3\u003e\n\u003cp\u003e类一加载就创建对象，比较常用，但是容易产生垃圾对象。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e线程安全，不加锁，执行效率高\u003c/li\u003e\n\u003cli\u003e缺点：不是懒加载，浪费内存空间\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSingleton\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eSingleton\u003c/span\u003e\u003cspan class=\"p\"\u003e(){}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003efinal\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSingleton\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSingleton\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSingleton\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e使用反射破坏单例\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMain\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eConstructor\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSingleton\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edeclaredConstructor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSingleton\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetDeclaredConstructor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003edeclaredConstructor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetAccessible\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSingleton\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esingleton\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edeclaredConstructor\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"112-懒汉式线程不安全\"\u003e1.1.2 懒汉式，线程不安全\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSingleton\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eSingleton\u003c/span\u003e\u003cspan class=\"p\"\u003e(){}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSingleton\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSingleton\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSingleton\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e多线程破坏单例\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nf\"\u003eMain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003estatic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eThread\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;multi thread created singleton:\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSingleton\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"p\"\u003e}).\u003c/span\u003e\u003cspan class=\"na\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"113-懒汉式线程安全\"\u003e1.1.3 懒汉式，线程安全\u003c/h3\u003e\n\u003cp\u003e加锁\u003c/p\u003e","title":"创建型模式"},{"content":"操作系统 1 基础概念 1.1 操作系统功能 **进程和线程管理：**进程的创建、撤销、阻塞、唤醒，进程间的通信。 **存储管理：**内存的分配和管理、外存（磁盘）的分配和管理。 **文件管理：**文件的读写、创建及删除。 **设备管理：**完成设备的请求或释放，以及设备的启动等功能。 **网络管理：**操作系统负责管理计算机网络的使用，管理网络的配置、连接、通信、安全等。 **安全管理：**用户身份认证，访问控制、文件加密等。 1.2 用户态和内核态 用户态(User Mode) : 用户态运行的进程可以直接读取用户程序的数据，拥有较低的权限。当应用程序需要执行某些需要特殊权限的操作，例如读写磁盘、网络通信等，就需要向操作系统发起系统调用请求，进入内核态。\n内核态(Kernel Mode)：内核态运行的进程几乎可以访问计算机的任何资源包括系统的内存空间、设备、驱动程序等，不受限制，拥有非常高的权限。当操作系统接收到进程的系统调用请求时，就会从用户态切换到内核态，执行相应的系统调用，并将结果返回给进程，最后再从内核态切换回用户态。\n内核态相比用户态拥有更高的特权级别，因此能够执行更底层、更敏感的操作。不过，由于进入内核态需要付出较高的开销（需要进行一系列的上下文切换和权限检查），应该尽量减少进入内核态的次数，以提高系统的性能和稳定性。\n用户态和内核态的切换：\n系统调用：用户态进程主动切换 中断：当外围设备完成用户请求的操作后，会向 CPU 发出相应的中断信号，这时 CPU 会暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换。比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等。 异常：当 CPU 在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了内核态，比如缺页异常。 在系统的处理上，中断和异常类似，都是通过中断向量表来找到相应的处理程序进行处理。区别在于，中断来自处理器外部，不是由任何一条专门的指令造成，而异常是执行当前指令的结果。\n1.3 系统调用 我们运行的用户程序中，凡是与系统态级别的资源有关的操作（如文件管理、进程控制、内存管理等)，都必须通过系统调用方式向操作系统提出服务请求，并由操作系统代为完成。\n系统调用和普通库函数调用非常相似，只是系统调用由操作系统内核提供，运行于内核态，而普通的库函数调用由函数库或用户自己提供，运行于用户态。\n系统调用过程： 用户态发起系统调用，用户态权限不足，中断执行（Trap） CPU执行的程序终端，跳转到终端处理程序，内核程序开始执行。 内核处理后，主动出发Trap，再次发生中断，切换回用户态工作。 2 进程和线程 2.1 进程 进程（Process） 是指计算机中正在运行的一个程序实例。资源分配的基本单位。\nPCB是什么？\nPCB（Process Control Block） 即进程控制块，是操作系统中用来管理和跟踪进程的数据结构，每个进程都对应着一个独立的 PCB。你可以将 PCB 视为进程的大脑。\n当操作系统创建一个新进程时，会为该进程分配一个唯一的进程 ID，并且为该进程创建一个对应的进程控制块。当进程执行时，PCB 中的信息会不断变化，操作系统会根据这些信息来管理和调度进程。\nPCB 主要包含下面几部分的内容：\n进程的描述信息，包括进程的名称、标识符等等； 进程的调度信息，包括进程阻塞原因、进程状态（就绪、运行、阻塞等）、进程优先级（标识进程的重要程度）等等； 进程对资源的需求情况，包括 CPU 时间、内存空间、I/O 设备等等。 进程打开的文件信息，包括文件描述符、文件类型、打开模式等等。 处理机的状态信息（由处理机的各种寄存器中的内容组成的），包括通用寄存器、指令计数器、程序状态字 PSW、用户栈指针。 进程有哪些状态？（生命周期）\n创建状态(new)：进程正在被创建，尚未到就绪状态。 就绪状态(ready)：进程已处于准备运行状态，即进程获得了除了处理器之外的一切所需资源，一旦得到处理器资源(处理器分配的时间片)即可运行。 运行状态(running)：进程正在处理器上运行(单核 CPU 下任意时刻只有一个进程处于运行状态)。 阻塞状态(waiting)：又称为等待状态，进程正在等待某一事件而暂停运行如等待某资源为可用或等待 IO 操作完成。即使处理器空闲，该进程也不能运行。 结束状态(terminated)：进程正在从系统中消失。可能是进程正常结束或其他原因中断退出运行。 进程之间的通信\n管道/匿名管道(Pipes)：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。 有名管道(Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 先进先出(First In First Out) 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。 信号(Signal)：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生； 消息队列(Message Queuing)：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。 信号量(Semaphores)：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。 共享内存(Shared memory)：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。 套接字(Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。 进程调度算法\n先到先服务 短作业优先 时间片轮转调度 优先级调度 多级反馈队列调度 僵尸进程和孤儿进程\nLinux中：子进程通常通过fork()系统调用创建，该进程时原有进程的一个副本，子进程和父进程之间相互独立，各自拥有各自的PCB，即使父进程结束了，子进程也可以继续运行。\n当一个进程调用exit()结束自己生命时，内核会释放该进程所有资源，包括打开的文件、占用的内存，但是进程对应的PCB仍然存在与系统中。这些信息只有在父进程调用wait()或者waitpid()系统调用时才会被释放，以便让父进程得到子进程的系统状态。\n这样设计可以让父进程在子进程结束时得到子进程的状态信息，并且可以防止出现“僵尸进程”。\n**僵尸进程：**子进程终止，父进程仍在运行，父进程没有调用wait()或者waitpid()等系统调用来回去子进程状态信息，释放子进程占用的资源，导致子进程的PCB仍然存在与系统中，但是无法被进一步使用。为了避免，父进程需要及时调用wait()或waitpid()来回收子进程。 **孤儿进程：**一个进程的父进程已经终止或者不存在，但是该进程仍在运行。这就是孤儿进程。孤儿进程是由于父进程意外终止或未即使调用wait()或waitpid()系统调用来回收子进程呆滞的。为了避免孤儿进程占用系统资源，操作系统会将孤儿进程的附近下设置为init进程（进程号为1），由init进程来回收孤儿进程的资源。 Linux下可以用TOP查找僵尸进程，进程状态为Z即为僵尸进程，zombie表示僵尸进程数量。\n2.2 线程 线程（Thread） 也被称为轻量级进程，更加轻量。多个线程可以在同一个进程中同时执行，并且共享进程的资源比如内存空间、文件句柄、网络连接等。程序执行的最小单位。举例：你打开的微信里就有一个线程专门用来拉取别人发你的最新的消息。\n为什么需要线程？\n进程切换开销大 线程轻量，一个进程可以有多个线程 多个线程可以并发处理不同任务，更有效的利用了多处理器和多核计算机 同一进程之内线程共享内存和文件，相互通信无需调用内核 为什么要使用多线程？\n线程切换开销小，减少了上下文切换的开销 多线程可以提高并发能力和性能 线程之间同步的方法\n互斥锁（Mutex）：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。 读写锁（Read-Write Lock）：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。 信号量(Semaphore)：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。 屏障（Barrier）：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 CyclicBarrier 是这种机制。 事件(Event) :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。 ::线程状态::\n2.3 进程和线程的区别 线程是进程划分成的更小的运行单位,一个进程在其执行的过程中可以产生多个线程。 线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。 线程执行开销小，但不利于资源的管理和保护；而进程正相反。 3 死锁 死锁（Deadlock）描述的是这样一种情况：多个进程/线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于进程/线程被无限期地阻塞，因此程序不可能正常终止。\n3.1 产生死锁的四个条件 互斥：资源非共享，只能同时被一个进程占有 占有且等待：一个进程至少占有一个资源，并等待另一个资源，等待的资源被其他进程占有 非抢占：资源不能抢占 循环等待：有一组等待进程，循环等待 3.2 解决死锁的方法 预防：限制并发进程对资源的请求 避免：分配资源是提前做出预测 检测：发生死锁后，检测思索发生，并确定与死锁相关的进程和资源 解除：与检测搭配，将进程从死锁状态下解脱。 3.3 死锁预防 破坏互斥：使资源可以同时访问，能解决的情况有限 破坏非抢占：剥夺式调度算法，适用与主存资源和处理器资源分配 破坏占有且等待：静态分配，执行前申请到所有资源，降低了资源利用率 破坏循环等待：层次分配策略，在层次分配策略下，所有的资源被分成了多个层次，一个进程得到某一次的一个资源后，它只能再申请较高一层的资源；当一个进程要释放某层的一个资源时，必须先释放所占用的较高层的资源，按这种策略，是不可能出现循环等待链的，因为那样的话，就出现了已经申请了较高层的资源，反而去申请了较低层的资源，不符合层次分配策略。 3.4 死锁避免 我们将系统的状态分为 安全状态 和 不安全状态 ，每当在为申请者分配资源前先测试系统状态，若把系统资源分配给申请者会产生死锁，则拒绝分配，否则接受申请，并为它分配资源。\n银行家算法：死锁的避免(银行家算法)改善了 资源使用率低的问题 ，但是它要不断地检测每个进程对各类资源的占用和申请情况，以及做 安全性检查 ，需要花费较多的时间。 3.5 死锁检测 解决死锁问题的另一条途径是 死锁检测和解除 (这里突然联想到了乐观锁和悲观锁，感觉死锁的检测和解除就像是 乐观锁 ，分配资源时不去提前管会不会发生死锁了，等到真的死锁出现了再来解决嘛，而 死锁的预防和避免 更像是悲观锁，总是觉得死锁会出现，所以在分配资源的时候就很谨慎)。\n这种方法对资源的分配不加以任何限制，也不采取死锁避免措施，但系统 定时地运行一个 “死锁检测” 的程序，判断系统内是否出现死锁，如果检测到系统发生了死锁，再采取措施去解除它。\n检测步骤： 如果进程-资源分配图中无环路，则此时系统没有发生死锁 如果进程-资源分配图中有环路，且每个资源类仅有一个资源，则系统中已经发生了死锁。 如果进程-资源分配图中有环路，且涉及到的资源类有多个资源，此时系统未必会发生死锁。如果能在进程-资源分配图中找出一个 既不阻塞又非独立的进程 ，该进程能够在有限的时间内归还占有的资源，也就是把边给消除掉了，重复此过程，直到能在有限的时间内 消除所有的边 ，则不会发生死锁，否则会发生死锁。(消除边的过程类似于 拓扑排序) 3.6 死锁解除 立即结束所有进程的执行，重新启动操作系统：这种方法简单，但以前所在的工作全部作废，损失很大。 撤销涉及死锁的所有进程，解除死锁后继续运行：这种方法能彻底打破死锁的循环等待条件，但将付出很大代价，例如有些进程可能已经计算了很长时间，由于被撤销而使产生的部分结果也被消除了，再重新执行时还要再次进行计算。 逐个撤销涉及死锁的进程，回收其资源直至死锁解除。 抢占资源：从涉及死锁的一个或几个进程中抢占资源，把夺得的资源再分配给涉及死锁的进程直至死锁解除。 4 内存管理 内存的分配与回收：对进程所需的内存进行分配和释放，malloc 函数：申请内存，free 函数：释放内存。\n地址转换：将程序中的虚拟地址转换成内存中的物理地址。\n内存扩充：当系统没有足够的内存时，利用虚拟内存技术或自动覆盖技术，从逻辑上扩充内存。\n内存映射：将一个文件直接映射到进程的进程空间中，这样可以通过内存指针用读写内存的办法直接存取文件内容，速度更快。\n内存优化：通过调整内存分配策略和回收算法来优化内存使用效率。\n内存安全：保证进程之间使用内存互不干扰，避免一些恶意程序通过修改内存来破坏系统的安全性。\n4.1 内存碎片 内部内存碎片(Internal Memory Fragmentation，简称为内存碎片)：已经分配给进程使用但未被使用的内存。导致内部内存碎片的主要原因是，当采用固定比例比如 2 的幂次方进行内存分配时，进程所分配的内存可能会比其实际所需要的大。举个例子，一个进程只需要 65 字节的内存，但为其分配了 128（2^7） 大小的内存，那 63 字节的内存就成为了内部内存碎片。\n外部内存碎片(External Memory Fragmentation，简称为外部碎片)：由于未分配的连续内存区域太小，以至于不能满足任意进程所需要的内存分配请求，这些小片段且不连续的内存空间被称为外部碎片。也就是说，外部内存碎片指的是那些并未分配给进程但又不能使用的内存。我们后面介绍的分段机制就会导致外部内存碎片。\n4.2 内存管理方式 连续内存管理：为一个用户程序分配一个连续的内存空间，内存利用率一般不高。 块式管理 是早期计算机操作系统的一种连续内存管理方式，存在严重的内存碎片问题。块式管理会将内存分为几个固定大小的块，每个块中只包含一个进程。如果程序运行需要内存的话，操作系统就分配给它一块，如果程序运行只需要很小的空间的话，分配的这块内存很大一部分几乎被浪费了。这些在每个块中未被利用的空间，我们称之为内部内存碎片。除了内部内存碎片之外，由于两个内存块之间可能还会有外部内存碎片，这些不连续的外部内存碎片由于太小了无法再进行分配。 非连续内存管理：允许一个程序使用的内存分布在离散或者说不相邻的内存中，相对更加灵活一些。 段式管理：以段(—段连续的物理内存)的形式管理/分配物理内存。应用程序的虚拟地址空间被分为大小不等的段，段是有实际意义的，每个段定义了一组逻辑信息，例如有主程序段 MAIN、子程序段 X、数据段 D 及栈段 S 等。 页式管理：把物理内存分为连续等长的物理页，应用程序的虚拟地址空间也被划分为连续等长的虚拟页，是现代操作系统广泛使用的一种内存管理方式。 段页式管理机制：结合了段式管理和页式管理的一种内存管理机制，把物理内存先分成若干段，每个段又继续分成若干大小相等的页。 4.3 虚拟内存 虚拟内存(Virtual Memory) 是计算机系统内存管理非常重要的一个技术，本质上来说它只是逻辑存在的，是一个假想出来的内存空间，主要作用是作为进程访问主存（物理内存）的桥梁并简化内存管理。\n1. 虚拟内存主要提供了下面这些能力： 隔离进程：物理内存通过虚拟地址空间访问，虚拟地址空间与进程一一对应。每个进程都认为自己拥有了整个物理内存，进程之间彼此隔离，一个进程中的代码无法更改正在由另一进程或操作系统使用的物理内存。 提升物理内存利用率：有了虚拟地址空间后，操作系统只需要将进程当前正在使用的部分数据或指令加载入物理内存。 简化内存管理：进程都有一个一致且私有的虚拟地址空间，程序员不用和真正的物理内存打交道，而是借助虚拟地址空间访问物理内存，从而简化了内存管理。 多个进程共享物理内存：进程在运行过程中，会加载许多操作系统的动态库。这些库对于每个进程而言都是公用的，它们在内存中实际只会加载一份，这部分称为共享内存。 提高内存使用安全性：控制进程对物理内存的访问，隔离不同进程的访问权限，提高系统的安全性。 提供更大的可使用内存空间：可以让程序拥有超过系统物理内存大小的可用内存空间。这是因为当物理内存不够用时，可以利用磁盘充当，将物理内存页（通常大小为 4 KB）保存到磁盘文件（会影响读写速度），数据或代码页会根据需要在物理内存与磁盘之间移动。 2. 没有虚拟内存会发生什么事情？ 用户程序可以访问任意物理内存，可能会不小心操作到系统运行必需的内存，进而造成操作系统崩溃，严重影响系统的安全。\n同时运行多个程序容易崩溃。比如你想同时运行一个微信和一个 QQ 音乐，微信在运行的时候给内存地址 1xxx 赋值后，QQ 音乐也同样给内存地址 1xxx 赋值，那么 QQ 音乐对内存的赋值就会覆盖微信之前所赋的值，这就可能会造成微信这个程序会崩溃。\n程序运行过程中使用的所有数据或指令都要载入物理内存，根据局部性原理，其中很大一部分可能都不会用到，白白占用了宝贵的物理内存资源。\n3. 物理地址和虚拟地址 物理地址（Physical Address） 是真正的物理内存中地址，更具体点来说是内存地址寄存器中的地址。程序中访问的内存地址不是物理地址，而是 虚拟地址（Virtual Address） 。 操作系统一般通过 CPU 芯片中的一个重要组件 MMU(Memory Management Unit，内存管理单元) 将虚拟地址转换为物理地址，这个过程被称为 地址翻译/地址转换（Address Translation） 。 通过 MMU 将虚拟地址转换为物理地址后，再通过总线传到物理内存设备，进而完成相应的物理内存读写请求。 MMU 将虚拟地址翻译为物理地址的主要机制有两种: 分段机制 和 分页机制 。 4. 什么是虚拟地址空间和物理地址空间 虚拟地址空间是虚拟地址的集合，是虚拟内存的范围。每一个进程都有一个一致且私有的虚拟地址空间。 物理地址空间是物理地址的集合，是物理内存的范围。 5. 虚拟地址和物理地址之间如何进行映射 MMU 将虚拟地址翻译为物理地址的主要机制有 3 种:\n分段机制 分页机制 段页机制 其中，现代操作系统广泛采用分页机制，需要重点关注！\n4.4 分段机制 分段机制（Segmentation） 以段(一段连续的物理内存)的形式管理/分配物理内存。应用程序的虚拟地址空间被分为大小不等的段，段是有实际意义的，每个段定义了一组逻辑信息，例如有主程序段 MAIN、子程序段 X、数据段 D 及栈段 S 等。\n1. 具体的地址翻译过程如下： MMU 首先解析得到虚拟地址中的段号； 通过段号去该应用程序的段表中取出对应的段信息（找到对应的段表项）； 从段信息中取出该段的起始地址（物理地址）加上虚拟地址中的段内偏移量得到最终的物理地址。 段表中还存有诸如段长(可用于检查虚拟地址是否超出合法范围)、段类型（该段的类型，例如代码段、数据段等）等信息。\n2. 通过段号一定要找到对应的段表项吗？得到最终的物理地址后对应的物理内存一定存在吗？ 不一定。段表项可能并不存在：\n段表项被删除：软件错误、软件恶意行为等情况可能会导致段表项被删除。 段表项还未创建：如果系统内存不足或者无法分配到连续的物理内存块就会导致段表项无法被创建。 3. 分段机制为什么会导致内存外部碎片？ 分段机制容易出现外部内存碎片，即在段与段之间留下碎片空间(不足以映射给虚拟地址空间中的段)。从而造成物理内存资源利用率的降低。\n4.5 分页机制 分页机制（Paging） 把主存（物理内存）分为连续等长的物理页，应用程序的虚拟地址空间划也被分为连续等长的虚拟页。现代操作系统广泛采用分页机制。\n在分页机制下，应用程序虚拟地址空间中的任意虚拟页可以被映射到物理内存中的任意物理页上，因此可以实现物理内存资源的离散分配。分页机制按照固定页大小分配物理内存，使得物理内存资源易于管理，可有效避免分段机制中外部内存碎片的问题。\n在分页机制下，每个应用程序都会有一个对应的页表。\n分页机制下的虚拟地址由两部分组成：\n页号：通过虚拟页号可以从页表中取出对应的物理页号； 页内偏移量：物理页起始地址+页内偏移量=物理内存地址。 具体的地址翻译过程如下：\nMMU 首先解析得到虚拟地址中的虚拟页号； 通过虚拟页号去该应用程序的页表中取出对应的物理页号（找到对应的页表项）； 用该物理页号对应的物理页起始地址（物理地址）加上虚拟地址中的页内偏移量得到最终的物理地址。 2. 通过虚拟页号一定要找到对应的物理页号吗？找到了物理页号得到最终的物理地址后对应的物理页一定存在吗？ 不一定！可能会存在 页缺失 。也就是说，物理内存中没有对应的物理页或者物理内存中有对应的物理页但虚拟页还未和物理页建立映射（对应的页表项不存在）。\n硬性页缺失（Hard Page Fault）：物理内存中没有对应的物理页。于是，Page Fault Handler 会指示 CPU 从已经打开的磁盘文件中读取相应的内容到物理内存，而后交由 MMU 建立相应的虚拟页和物理页的映射关系。 软性页缺失（Soft Page Fault）：物理内存中有对应的物理页，但虚拟页还未和物理页建立映射。于是，Page Fault Handler 会指示 MMU 建立相应的虚拟页和物理页的映射关系。 发生上面这两种缺页错误的时候，应用程序访问的是有效的物理内存，只是出现了物理页缺失或者虚拟页和物理页的映射关系未建立的问题。如果应用程序访问的是无效的物理内存的话，还会出现 无效缺页错误（Invalid Page Fault） 。\n3. 单级页表有什么问题，为什么需要多级页表？ 以 32 位的环境为例，虚拟地址空间范围共有 2^32（4G）。假设 一个页的大小是 2^12（4KB），那页表项共有 4G / 4K = 2^20 个。每个页表项为一个地址，占用 4 字节，2^20 * 2^2 / 1024 * 1024= 4MB。也就是说一个程序啥都不干，页表大小就得占用 4M。\n系统运行的应用程序多起来的话，页表的开销还是非常大的。而且，绝大部分应用程序可能只能用到页表中的几项，其他的白白浪费了。\n为了解决这个问题，操作系统引入了 多级页表 ，多级页表对应多个页表，每个页表也前一个页表相关联。32 位系统一般为二级页表，64 位系统一般为四级页表。\n以二级页表为例进行介绍：二级列表分为一级页表和二级页表。一级页表共有 1024 个页表项，一级页表又关联二级页表，二级页表同样共有 1024 个页表项。二级页表中的一级页表项是一对多的关系，二级页表按需加载（只会用到很少一部分二级页表），进而节省空间占用。\n假设只需要 2 个二级页表，那两级页表的内存占用情况为: 4KB（一级页表占用） + 4KB * 2（二级页表占用） = 12 KB。\n多级页表属于时间换空间的典型场景，利用增加页表查询的次数减少页表占用的空间。\nTLB有什么用？使用TLB之后的地址翻译流程是怎样的？ 为了提高虚拟地址到物理地址的转换速度，操作系统在 页表方案 基础之上引入了 转址旁路缓存(Translation Lookaside Buffer，TLB，也被称为快表) 。\n在主流的 AArch64 和 x86-64 体系结构下，TLB 属于 (Memory Management Unit，内存管理单元) 内部的单元，本质上就是一块高速缓存（Cache），缓存了虚拟页号到物理页号的映射关系，你可以将其简单看作是存储着键（虚拟页号）值（物理页号）对的哈希表。\n使用 TLB 之后的地址翻译流程是这样的：\n用虚拟地址中的虚拟页号作为 key 去 TLB 中查询； 如果能查到对应的物理页的话，就不用再查询页表了，这种情况称为 TLB 命中（TLB hit)。 如果不能查到对应的物理页的话，还是需要去查询主存中的页表，同时将页表中的该映射表项添加到 TLB 中，这种情况称为 TLB 未命中（TLB miss)。 当 TLB 填满后，又要登记新页时，就按照一定的淘汰策略淘汰掉快表中的一个页。 换页机制有什么用 换页机制的思想是当物理内存不够用的时候，操作系统选择将一些物理页的内容放到磁盘上去，等要用到的时候再将它们读取到物理内存中。也就是说，换页机制利用磁盘这种较低廉的存储设备扩展的物理内存。\n这也就解释了一个日常使用电脑常见的问题：为什么操作系统中所有进程运行所需的物理内存即使比真实的物理内存要大一些，这些进程也是可以正常运行的，只是运行速度会变慢。\n这同样是一种时间换空间的策略，你用 CPU 的计算时间，页的调入调出花费的时间，换来了一个虚拟的更大的物理内存空间来支持程序的运行。\n常见的页面置换算法 最佳页面置换算法：优先选择淘汰的页面是以后永不使用的，或者是在最长时间内不再被访问的页面，这样可以保证获得最低的缺页率。只是理论最优的页面置换算法，可以作为衡量其他置换算法优劣的标准。 先进先出页面置换算法（FIFO） 最近最久未使用页面置换算法（LRU） 最少使用页面置换算法（LFU） 时钟页面置换算法（Clock） FIFO 页面置换算法性能为何不好？\n主要原因主要有二：\n经常访问或者需要长期存在的页面会被频繁调入调出：较早调入的页往往是经常被访问或者需要长期存在的页，这些页会被反复调入和调出。 存在 Belady 现象：被置换的页面并不是进程不会访问的，有时就会出现分配的页面数增多但缺页率反而提高的异常现象。出现该异常的原因是因为 FIFO 算法只考虑了页面进入内存的顺序，而没有考虑页面访问的频率和紧迫性。 哪一种页面置换算法实际用的比较多？\nLRU 算法是实际使用中应用的比较多，也被认为是最接近 OPT 的页面置换算法。\n不过，需要注意的是，实际应用中这些算法会被做一些改进，就比如 InnoDB Buffer Pool（ InnoDB 缓冲池，MySQL 数据库中用于管理缓存页面的机制）就改进了传统的 LRU 算法，使用了一种称为\u0026quot;Adaptive LRU\u0026quot;的算法（同时结合了 LRU 和 LFU 算法的思想）。\n分页机制和分段机制的共同点和区别 共同点：\n都是非连续内存管理的方式。 都采用了地址映射的方法，将虚拟地址映射到物理地址，以实现对内存的管理和保护。 区别：\n分页机制以页面为单位进行内存管理，而分段机制以段为单位进行内存管理。页的大小是固定的，由操作系统决定，通常为 2 的幂次方。而段的大小不固定，取决于我们当前运行的程序。 页是物理单位，即操作系统将物理内存划分成固定大小的页面，每个页面的大小通常是 2 的幂次方，例如 4KB、8KB 等等。而段则是逻辑单位，是为了满足程序对内存空间的逻辑需求而设计的，通常根据程序中数据和代码的逻辑结构来划分。 分段机制容易出现外部内存碎片，即在段与段之间留下碎片空间(不足以映射给虚拟地址空间中的段)。分页机制解决了外部内存碎片的问题，但仍然可能会出现内部内存碎片。 分页机制采用了页表来完成虚拟地址到物理地址的映射，页表通过一级页表和二级页表来实现多级映射；而分段机制则采用了段表来完成虚拟地址到物理地址的映射，每个段表项中记录了该段的起始地址和长度信息。 分页机制对程序没有任何要求，程序只需要按照虚拟地址进行访问即可；而分段机制需要程序员将程序分为多个段，并且显式地使用段寄存器来访问不同的段。 4.6 段页机制 结合了段式管理和页式管理的一种内存管理机制，把物理内存先分成若干段，每个段又继续分成若干大小相等的页。\n在段页式机制下，地址翻译的过程分为两个步骤：\n段式地址映射。 页式地址映射。 5 文件系统 文件系统主要负责管理和组织计算机存储设备上的文件和目录，其功能包括以下几个方面：\n存储管理：将文件数据存储到物理存储介质中，并且管理空间分配，以确保每个文件都有足够的空间存储，并避免文件之间发生冲突。 文件管理：文件的创建、删除、移动、重命名、压缩、加密、共享等等。 目录管理：目录的创建、删除、移动、重命名等等。 文件访问控制：管理不同用户或进程对文件的访问权限，以确保用户只能访问其被授权访问的文件，以保证文件的安全性和保密性。 5.1 软链接和硬链接的区别 在 Linux/类 Unix 系统上，文件链接（File Link）是一种特殊的文件类型，可以在文件系统中指向另一个文件。常见的文件链接类型有两种：\n1、硬链接（Hard Link）\n在 Linux/类 Unix 文件系统中，每个文件和目录都有一个唯一的索引节点（inode）号，用来标识该文件或目录。硬链接通过 inode 节点号建立连接，硬链接和源文件的 inode 节点号相同，两者对文件系统来说是完全平等的（可以看作是互为硬链接，源头是同一份文件），删除其中任何一个对另外一个没有影响，可以通过给文件设置硬链接文件来防止重要文件被误删。 只有删除了源文件和所有对应的硬链接文件，该文件才会被真正删除。 硬链接具有一些限制，不能对目录以及不存在的文件创建硬链接，并且，硬链接也不能跨越文件系统。 ln 命令用于创建硬链接。 2、软链接（Symbolic Link 或 Symlink）\n软链接和源文件的 inode 节点号不同，而是指向一个文件路径。 源文件删除后，软链接依然存在，但是指向的是一个无效的文件路径。 软连接类似于 Windows 系统中的快捷方式。 不同于硬链接，可以对目录或者不存在的文件创建软链接，并且，软链接可以跨越文件系统。 ln -s 命令用于创建软链接。 硬链接为什么不能跨文件系统？ 我们之前提到过，硬链接是通过 inode 节点号建立连接的，而硬链接和源文件共享相同的 inode 节点号。\n然而，每个文件系统都有自己的独立 inode 表，且每个 inode 表只维护该文件系统内的 inode。如果在不同的文件系统之间创建硬链接，可能会导致 inode 节点号冲突的问题，即目标文件的 inode 节点号已经在该文件系统中被使用。\n5.2 提高文件系统性能的方式有哪些？ 优化硬件：使用高速硬件设备（如 SSD、NVMe）替代传统的机械硬盘，使用 RAID（Redundant Array of Inexpensive Disks）等技术提高磁盘性能。\n选择合适的文件系统选型：不同的文件系统具有不同的特性，对于不同的应用场景选择合适的文件系统可以提高系统性能。\n运用缓存：访问磁盘的效率比较低，可以运用缓存来减少磁盘的访问次数。不过，需要注意缓存命中率，缓存命中率过低的话，效果太差。\n避免磁盘过度使用：注意磁盘的使用率，避免将磁盘用满，尽量留一些剩余空间，以免对文件系统的性能产生负面影响。\n对磁盘进行合理的分区：合理的磁盘分区方案，能够使文件系统在不同的区域存储文件，从而减少文件碎片，提高文件读写性能。\n5.3 常见磁盘调度算法 磁盘调度算法是操作系统中对磁盘访问请求进行排序和调度的算法，其目的是提高磁盘的访问效率。\n一次磁盘读写操作的时间由磁盘寻道/寻找时间、延迟时间和传输时间决定。磁盘调度算法可以通过改变到达磁盘请求的处理顺序，减少磁盘寻道时间和延迟时间。\n先来先服务算法（FCFS）：按照请求到达磁盘调度器的顺序进行处理，先到达的请求的先被服务。FCFS 算法实现起来比较简单，不存在算法开销。不过，由于没有考虑磁头移动的路径和方向，平均寻道时间较长。同时，该算法容易出现饥饿问题，即一些后到的磁盘请求可能需要等待很长时间才能得到服务。 最短寻道优先算法（SSTF）：也被称为最佳服务优先（Shortest Service Time First，SSTF）算法，优先选择距离当前磁头位置最近的请求进行服务。SSTF 算法能够最小化磁头的寻道时间，但容易出现饥饿问题，即磁头附近的请求不断被服务，远离磁头的请求长时间得不到响应。实际应用中，需要优化一下该算法的实现，避免出现饥饿问题。 扫描算法（SCAN）：也被称为电梯（Elevator）算法，基本思想和电梯非常类似。磁头沿着一个方向扫描磁盘，如果经过的磁道有请求就处理，直到到达磁盘的边界，然后改变移动方向，依此往复。SCAN 算法能够保证所有的请求得到服务，解决了饥饿问题。但是，如果磁头从一个方向刚扫描完，请求才到的话。这个请求就需要等到磁头从相反方向过来之后才能得到处理。 循环扫描算法（C-SCAN）：SCAN 算法的变体，只在磁盘的一侧进行扫描，并且只按照一个方向扫描，直到到达磁盘边界，然后回到磁盘起点，重新开始循环。 边扫描边观察算法（LOOK）：SCAN 算法中磁头到了磁盘的边界才改变移动方向，这样可能会做很多无用功，因为磁头移动方向上可能已经没有请求需要处理了。LOOK 算法对 SCAN 算法进行了改进，如果磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向，依此往复。也就是边扫描边观察指定方向上还有无请求，因此叫 LOOK。 均衡循环扫描算法（C-LOOK）：C-SCAN 只有到达磁盘边界时才能改变磁头移动方向，并且磁头返回时也需要返回到磁盘起点，这样可能会做很多无用功。C-LOOK 算法对 C-SCAN 算法进行了改进，如果磁头移动的方向上已经没有磁道访问请求了，就可以立即让磁头返回，并且磁头只需要返回到有磁道访问请求的位置即可。 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/operatingsystem/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","summary":"\u003ch1 id=\"操作系统\"\u003e操作系统\u003c/h1\u003e\n\u003ch1 id=\"1-基础概念\"\u003e1 基础概念\u003c/h1\u003e\n\u003ch2 id=\"11-操作系统功能\"\u003e1.1 操作系统功能\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e**进程和线程管理：**进程的创建、撤销、阻塞、唤醒，进程间的通信。\u003c/li\u003e\n\u003cli\u003e**存储管理：**内存的分配和管理、外存（磁盘）的分配和管理。\u003c/li\u003e\n\u003cli\u003e**文件管理：**文件的读写、创建及删除。\u003c/li\u003e\n\u003cli\u003e**设备管理：**完成设备的请求或释放，以及设备的启动等功能。\u003c/li\u003e\n\u003cli\u003e**网络管理：**操作系统负责管理计算机网络的使用，管理网络的配置、连接、通信、安全等。\u003c/li\u003e\n\u003cli\u003e**安全管理：**用户身份认证，访问控制、文件加密等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"12-用户态和内核态\"\u003e1.2 用户态和内核态\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e用户态(User Mode)\u003c/strong\u003e : 用户态运行的进程可以直接读取用户程序的数据，拥有较低的权限。当应用程序需要执行某些需要特殊权限的操作，例如读写磁盘、网络通信等，就需要向操作系统发起系统调用请求，进入内核态。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e内核态(Kernel Mode)\u003c/strong\u003e：内核态运行的进程几乎可以访问计算机的任何资源包括系统的内存空间、设备、驱动程序等，不受限制，拥有非常高的权限。当操作系统接收到进程的系统调用请求时，就会从用户态切换到内核态，执行相应的系统调用，并将结果返回给进程，最后再从内核态切换回用户态。\u003c/p\u003e\n\u003cp\u003e内核态相比用户态拥有更高的特权级别，因此能够执行更底层、更敏感的操作。不过，由于进入内核态需要付出较高的开销（需要进行一系列的上下文切换和权限检查），应该尽量减少进入内核态的次数，以提高系统的性能和稳定性。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e用户态和内核态的切换：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e系统调用：用户态进程主动切换\u003c/li\u003e\n\u003cli\u003e中断：当外围设备完成用户请求的操作后，会向 CPU 发出相应的中断信号，这时 CPU 会暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换。比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等。\u003c/li\u003e\n\u003cli\u003e异常：当 CPU 在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了内核态，比如缺页异常。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在系统的处理上，中断和异常类似，都是通过中断向量表来找到相应的处理程序进行处理。区别在于，中断来自处理器外部，不是由任何一条专门的指令造成，而异常是执行当前指令的结果。\u003c/p\u003e\n\u003ch2 id=\"13-系统调用\"\u003e1.3 系统调用\u003c/h2\u003e\n\u003cp\u003e我们运行的用户程序中，凡是与系统态级别的资源有关的操作（如文件管理、进程控制、内存管理等)，都必须通过系统调用方式向操作系统提出服务请求，并由操作系统代为完成。\u003c/p\u003e\n\u003cp\u003e系统调用和普通库函数调用非常相似，只是系统调用由操作系统内核提供，运行于内核态，而普通的库函数调用由函数库或用户自己提供，运行于用户态。\u003c/p\u003e\n\u003ch4 id=\"系统调用过程\"\u003e系统调用过程：\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003e用户态发起系统调用，用户态权限不足，中断执行（Trap）\u003c/li\u003e\n\u003cli\u003eCPU执行的程序终端，跳转到终端处理程序，内核程序开始执行。\u003c/li\u003e\n\u003cli\u003e内核处理后，主动出发Trap，再次发生中断，切换回用户态工作。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"2-进程和线程\"\u003e2 进程和线程\u003c/h1\u003e\n\u003ch2 id=\"21-进程\"\u003e2.1 进程\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e进程（Process）\u003c/strong\u003e 是指计算机中正在运行的一个程序实例。资源分配的基本单位。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePCB是什么？\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePCB（Process Control Block）\u003c/strong\u003e 即进程控制块，是操作系统中用来管理和跟踪进程的数据结构，每个进程都对应着一个独立的 PCB。你可以将 PCB 视为进程的大脑。\u003c/p\u003e\n\u003cp\u003e当操作系统创建一个新进程时，会为该进程分配一个唯一的进程 ID，并且为该进程创建一个对应的进程控制块。当进程执行时，PCB 中的信息会不断变化，操作系统会根据这些信息来管理和调度进程。\u003c/p\u003e\n\u003cp\u003ePCB 主要包含下面几部分的内容：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e进程的描述信息，包括进程的名称、标识符等等；\u003c/li\u003e\n\u003cli\u003e进程的调度信息，包括进程阻塞原因、进程状态（就绪、运行、阻塞等）、进程优先级（标识进程的重要程度）等等；\u003c/li\u003e\n\u003cli\u003e进程对资源的需求情况，包括 CPU 时间、内存空间、I/O 设备等等。\u003c/li\u003e\n\u003cli\u003e进程打开的文件信息，包括文件描述符、文件类型、打开模式等等。\u003c/li\u003e\n\u003cli\u003e处理机的状态信息（由处理机的各种寄存器中的内容组成的），包括通用寄存器、指令计数器、程序状态字 PSW、用户栈指针。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e进程有哪些状态？（生命周期）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/e147111c697de62856441ac85445b9a5/66fd0c5bd362da4e1f0561ec486ab4a0.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e","title":"操作系统"},{"content":"操作系统-面试重点问题 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/operatingsystem/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E9%9D%A2%E8%AF%95%E9%87%8D%E7%82%B9%E9%97%AE%E9%A2%98/","summary":"\u003ch1 id=\"操作系统-面试重点问题\"\u003e操作系统-面试重点问题\u003c/h1\u003e","title":"操作系统-面试重点问题"},{"content":"数据结构 1 线性数据结构 1.1 数组 1.2 链表 1.3 栈 1.4 队列 2 图 2.1 基本概念 2.2 图的存储 2.3 图的搜索 2.3.1 DFS public int[] findOrder(int numCourses, int[][] prerequisites) { // adjacency list Set\u0026lt;Integer\u0026gt;[] graph = new Set[numCourses]; for (int[] e : prerequisites) { // e[0] depends on e[1] // e[1] --\u0026gt; e[0] if (graph[e[1]] == null) { graph[e[1]] = new HashSet\u0026lt;\u0026gt;(); } graph[e[1]].add(e[0]); } List\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(numCourses); boolean[] globalVisited = new boolean[numCourses]; boolean[] localVisited = new boolean[numCourses]; // to check cycle for (int i = 0; i \u0026lt; numCourses; ++i) { if (!dfs(graph, i, globalVisited, localVisited, list)) { return new int[0]; } } // copy and reverse int[] result = new int[numCourses]; for (int i = 0; i \u0026lt; numCourses; ++i) { result[i] = list.get(numCourses - i - 1); } return result; } // return: can finish public boolean dfs(Set\u0026lt;Integer\u0026gt;[] graph, int node, boolean[] globalVisited, boolean[] localVisited, List\u0026lt;Integer\u0026gt; list) { if (localVisited[node]) return false; if (globalVisited[node]) return true; localVisited[node] = true; globalVisited[node] = true; Set\u0026lt;Integer\u0026gt; next = graph[node]; if (next != null) { for (Integer n : next) { if (!dfs(graph, n, globalVisited, localVisited, list)) { // return false and exit, no need to reset localVisited return false; } } } localVisited[node] = false; // reset list.add(node); return true; } 2.4 图的路径 2.4.1 弗洛伊德 class Solution { public int networkDelayTime(int[][] times, int N, int K) { // w[i][j]: time from [i] to [j], Integer.MAX_VALUE: inf int[][] w = new int[N+1][N+1]; for (int i = 1; i \u0026lt;= N; ++i) { Arrays.fill(w[i], Integer.MAX_VALUE); w[i][i] = 0; } for (int[] e : times) { int u = e[0], v = e[1], t = e[2]; w[u][v] = t; } for (int k = 1; k \u0026lt;= N; ++k) { for (int i = 1; i \u0026lt;= N; ++i) { for (int j = 1; j \u0026lt;= N; ++j) { int sum; if (w[i][k] == Integer.MAX_VALUE w[k][j] == Integer.MAX_VALUE) { sum = Integer.MAX_VALUE; } else { sum = w[i][k] + w[k][j]; } w[i][j] = Math.min(w[i][j], sum); } } } int max = -1; for (int j = 1; j \u0026lt;= N; ++j) { if (w[K][j] == Integer.MAX_VALUE) return -1; max = Math.max(max, w[K][j]); } return max; } } 2.4.2 Dijkstra class Solution { public int networkDelayTime(int[][] times, int N, int K) { // graph[i]: List\u0026lt;int[]\u0026gt;, [to node, w] List\u0026lt;int[]\u0026gt;[] graph = new List[N+1]; for (int i = 1; i \u0026lt;= N; ++i) { graph[i] = new LinkedList\u0026lt;\u0026gt;(); } for (int[] e : times) { int from = e[0], to = e[1], w = e[2]; graph[from].add(new int[]{to, w}); } // [distance, node] PriorityQueue\u0026lt;int[]\u0026gt; heap = new PriorityQueue\u0026lt;\u0026gt;((a, b) -\u0026gt; a[0] - b[0]); // node --\u0026gt; min distance HashMap\u0026lt;Integer, Integer\u0026gt; dist = new HashMap\u0026lt;\u0026gt;(); heap.offer(new int[]{0, K}); while (heap.size() \u0026gt; 0) { int[] n = heap.poll(); int distance = n[0]; int node = n[1]; if (dist.containsKey(node)) continue; // already determined dist.put(node, distance); // node determined for (int[] g : graph[node]) { int nextNode = g[0]; int w = g[1]; // K --\u0026gt; ... --\u0026gt; node --\u0026gt; nextNode if (dist.containsKey(nextNode)) continue; // alreay determined heap.offer(new int[]{distance + w, nextNode}); } } if (dist.size() != N) return -1; int max = -1; for (int d : dist.values()) { max = Math.max(max, d); } return max; } } 2.5 图的出入度问题 class Solution { public int[] findOrder(int numCourses, int[][] prerequisites) { Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; graph = new HashMap\u0026lt;\u0026gt;(); int[] indegree = new int[numCourses]; for (int[] e : prerequisites) { // e[0] depends on e[1] // e[1] --\u0026gt; e[0] int pre = e[1], cur = e[0]; List\u0026lt;Integer\u0026gt; list = graph.get(pre); if (list == null) { list = new LinkedList\u0026lt;\u0026gt;(); graph.put(pre, list); } list.add(cur); indegree[cur]++; } Queue\u0026lt;Integer\u0026gt; queue = new LinkedList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; numCourses; ++i) { if (indegree[i] == 0) { queue.add(i); } } int[] result = new int[numCourses]; int size = 0; while (queue.size() \u0026gt; 0) { int node = queue.poll(); result[size++] = node; List\u0026lt;Integer\u0026gt; next = graph.get(node); if (next != null) { for (int n : next) { indegree[n]--; if (indegree[n] == 0) { queue.offer(n); } } } } if (size != numCourses) return new int[0]; return result; } } 2.6 最小生成树 2.6.1 Kruskal class Solution { public int minimumCost(int N, int[][] connections) { // sort connections by cost from small to large Arrays.sort(connections, (a,b) -\u0026gt; a[2]-b[2]); int[] parent = new int[N+1]; for (int i = 1; i \u0026lt;= N; ++i) { parent[i] = i; } int cost = 0; for (int[] edge : connections) { if (union(edge[0], edge[1], parent)) { cost += edge[2]; } } // check if all the roots are the same int p = -1; for (int i = 1; i \u0026lt;= N; ++i) { int root = findRoot(i, parent); if (p == -1) { p = root; } else if (p != root) { return -1; } } return cost; } public int findRoot(int x, int[] parent) { while (x != parent[x]) { parent[x] = parent[parent[x]]; x = parent[x]; } return x; } public boolean union(int a, int b, int[] parent) { a = findRoot(a, parent); b = findRoot(b, parent); if (a == b) return false; parent[a] = b; return true; } } 2.6.2 Prim class Solution { public int minimumCost(int N, int[][] connections) { int INF = Integer.MAX_VALUE; // graph[i][j]: // INF: not reachable // x: distance int[][] graph = new int[N+1][N+1]; for (int i = 1; i \u0026lt;= N; ++i) { for (int j = 1; j \u0026lt;= N; ++j) { if (i == j) graph[i][j] = 0; else graph[i][j] = INF; } } for (int[] edge : connections) { int u = edge[0], v = edge[1], w = edge[2]; graph[u][v] = graph[v][u] = w; } // dist[i] // d: current min distance from one of added nodes // INF: distance is inf, not reachable int[] dist = new int[N+1]; Arrays.fill(dist, INF); // added nodes boolean[] added = new boolean[N+1]; // set node [1] as candidates dist[1] = 0; int cost = 0; for (int k = 0; k \u0026lt; N; ++k) { // N nodes to add // find node with min distance int min = INF; int node = -1; for (int i = 1; i \u0026lt;= N; ++i) { if (!added[i] \u0026amp;\u0026amp; dist[i] \u0026lt; min) { min = dist[i]; node = i; } } // no reachable node found if (node == -1) { return -1; } // add [node] cost += dist[node]; added[node] = true; // update dist[i] with distance from [node] to [i] for (int i = 1; i \u0026lt;= N; ++i) { if (added[i]) continue; if (graph[node][i] == INF) continue; dist[i] = Math.min(dist[i], graph[node][i]); } } return cost; } } 3 堆 3.1 概念 3.2 分类 3.3 存储 3.4 操作 3.5 排序 4 树 4.1 分类 4.2 存储 4.3 遍历 5 红黑树 5.1 概念与特点 红黑树是一种自平衡二叉查找树。JDK中，TreeMap、TreeSet以及HashMap都使用了红黑树。\n特点：\n节点非黑即红，黑色决定平衡，红色不决定平衡。 根节点总是黑色的。 每个叶子节点都是黑色的空节点。 如果节点是红色，那它的子节点一定是黑色（反之不一定），胡总和说不会有连续的红色节点。一个节点最多临时有三个节点，中间黑，左右红。 从任意节点到他的叶子节点或空子节点的每条路径，必定包含相同数量的而黑色节点。每一层都只有一个节点贡献了树高决定平衡性，也就是对应红黑树中的黑色节点。 红黑树高度不会超过2log(n+1)\n5.2 数据结构 建立在 BST 二叉搜索树的基础上，AVL、2-3 树、红黑树都是自平衡二叉树（统称 B-树）。但相比于 AVL 树，高度平衡所带来的时间复杂度，红黑树对平衡的控制要宽松一些，红黑树只需要保证黑色节点平衡即可。\npublic class Node { public Class\u0026lt;?\u0026gt; clazz; public Integer value; public Node parent; public Node left; public Node right; // AVL 树所需属性 public int height; // 红黑树所需属性 public Color color = Color.RED; } 5.3 平衡调整 左倾染色 染色时根据当前节点的爷爷节点，找到当前节点的父亲、叔叔节点 把父亲、叔叔节点染黑，爷爷节点染红。 爷爷节点染红是临时的，当平衡树高操作后，会把根节点染黑 右倾染色 同上\n左旋调整 一次左旋 右旋+左旋 右旋调整 一次右旋 左旋+右旋 6 布隆过滤器 6.1 原理及使用场景 使用一个较大的bit数组保存所有数据，每个元素只占用1bit。用于判断元素是否存在，结果具有概率性，加入的元素越多，误报的概率越大。\n原理：\n当加入一个元素时：使用布隆过滤器中的哈希函数堆元素值计算，得到哈希值，根据哈希值将对应下标设置为1。 当判断元素是否存在时：对给定元素再次计算，如果对应位为1，则存在，否则不存在。 布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。 使用场景\n判断是否存在：防止缓存穿透、邮箱的垃圾邮件过滤，黑名单功能等 去重：去除以及爬取过的url，对订单号去重 6.2 编码实现 import java.util.BitSet; public class MyBloomFilter { private static final int DEFAULT_SIZE = 2 \u0026lt;\u0026lt; 24; private static final int[] SEEDS = new int[]{3, 13, 46, 71, 91, 134}; private BitSet bits = new BitSet(DEFAULT_SIZE); private SimpleHash[] func = new SimpleHash[SEEDS.length]; public MyBloomFilter(){ for (int i = 0; i \u0026lt; SEEDS.length; i++) { func[i] = new SimpleHash(DEFAULT_SIZE, SEEDS[i]); } } public void add(Object value){ for(SimpleHash f : func){ bits.set(f.hash(value), true); } } public boolean contains(Object value){ boolean ret = true; for(SimpleHash f : func){ ret = ret \u0026amp;\u0026amp; bits.get(f.hash(value)); } return ret; } public static class SimpleHash { private int cap; private int seed; public SimpleHash(int cap, int seed) { this.cap = cap; this.seed = seed; } public int hash(Object value) { int h; if (value == null) return 0; return Math.abs(seed * (cap - 1) \u0026amp; ((h = value.hashCode()) ^ (h \u0026gt;\u0026gt;\u0026gt; 16))); } } } public static void main(String[] args) { String value1 = \u0026#34;abcdefg\u0026#34;; String value2 = \u0026#34;xxxxxxx\u0026#34;; MyBloomFilter filter = new MyBloomFilter(); System.out.println(filter.contains(value1)); System.out.println(filter.contains(value2)); filter.add(value1); filter.add(value2); System.out.println(filter.contains(value1)); System.out.println(filter.contains(value2)); } ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/algorithm/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","summary":"\u003ch1 id=\"数据结构\"\u003e数据结构\u003c/h1\u003e\n\u003ch1 id=\"1-线性数据结构\"\u003e1 线性数据结构\u003c/h1\u003e\n\u003ch2 id=\"11-数组\"\u003e1.1 数组\u003c/h2\u003e\n\u003ch2 id=\"12-链表\"\u003e1.2 链表\u003c/h2\u003e\n\u003ch2 id=\"13-栈\"\u003e1.3 栈\u003c/h2\u003e\n\u003ch2 id=\"14-队列\"\u003e1.4 队列\u003c/h2\u003e\n\u003ch1 id=\"2-图\"\u003e2 图\u003c/h1\u003e\n\u003ch2 id=\"21-基本概念\"\u003e2.1 基本概念\u003c/h2\u003e\n\u003ch2 id=\"22-图的存储\"\u003e2.2 图的存储\u003c/h2\u003e\n\u003ch2 id=\"23-图的搜索\"\u003e2.3 图的搜索\u003c/h2\u003e\n\u003ch3 id=\"231-dfs\"\u003e2.3.1 DFS\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003efindOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enumCourses\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[][]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eprerequisites\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e// adjacency list\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSet\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSet\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enumCourses\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eprerequisites\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// e[0] depends on e[1]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// e[1] --\u0026gt; e[0]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eHashSet\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]]\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eArrayList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumCourses\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eglobalVisited\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enumCourses\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elocalVisited\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enumCourses\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// to check cycle\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enumCourses\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eglobalVisited\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elocalVisited\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"c1\"\u003e// copy and reverse\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enumCourses\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enumCourses\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumCourses\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// return: can finish\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSet\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eglobalVisited\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elocalVisited\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elocalVisited\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eglobalVisited\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003elocalVisited\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eglobalVisited\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eSet\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eglobalVisited\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elocalVisited\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"c1\"\u003e// return false and exit, no need to reset localVisited\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003elocalVisited\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// reset\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"24-图的路径\"\u003e2.4 图的路径\u003c/h2\u003e\n\u003ch3 id=\"241-弗洛伊德\"\u003e2.4.1 弗洛伊德\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSolution\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003enetworkDelayTime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[][]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etimes\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// w[i][j]: time from [i] to [j], Integer.MAX_VALUE: inf\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[][]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eArrays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003efill\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eMAX_VALUE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etimes\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eMAX_VALUE\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eMAX_VALUE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                        \u003c/span\u003e\u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eMAX_VALUE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                        \u003c/span\u003e\u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eMAX_VALUE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"242-dijkstra\"\u003e2.4.2 Dijkstra\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSolution\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003enetworkDelayTime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[][]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etimes\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// graph[i]: List\u0026lt;int[]\u0026gt;, [to node, w]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u0026gt;[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etimes\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// [distance, node]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003ePriorityQueue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eheap\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ePriorityQueue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// node --\u0026gt; min distance\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eheap\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eoffer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eK\u003c/span\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eheap\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eheap\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epoll\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edistance\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003econtainsKey\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// already determined\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edistance\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// node determined\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enextNode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"c1\"\u003e// K --\u0026gt; ... --\u0026gt; node --\u0026gt; nextNode\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003econtainsKey\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enextNode\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// alreay determined\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003eheap\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eoffer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003edistance\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enextNode\u003c/span\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"25-图的出入度问题\"\u003e2.5 图的出入度问题\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSolution\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003efindOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enumCourses\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[][]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eprerequisites\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eMap\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eindegree\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enumCourses\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eprerequisites\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"c1\"\u003e// e[0] depends on e[1]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"c1\"\u003e// e[1] --\u0026gt; e[0]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epre\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eindegree\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"o\"\u003e]++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eQueue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eLinkedList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enumCourses\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eindegree\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enumCourses\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003epoll\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"o\"\u003e++]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"n\"\u003eindegree\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e]--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eindegree\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                        \u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eoffer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enumCourses\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"26-最小生成树\"\u003e2.6 最小生成树\u003c/h2\u003e\n\u003ch3 id=\"261-kruskal\"\u003e2.6.1 Kruskal\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSolution\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eminimumCost\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[][]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003econnections\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// sort connections by cost from small to large\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eArrays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econnections\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e]-\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eedge\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003econnections\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunion\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eedge\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eedge\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eedge\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// check if all the roots are the same\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efindRoot\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003efindRoot\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e]]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eunion\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efindRoot\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efindRoot\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"262-prim\"\u003e2.6.2 Prim\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSolution\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eminimumCost\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[][]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003econnections\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eINF\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eMAX_VALUE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// graph[i][j]:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e//     INF: not reachable\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e//     x: distance\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[][]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eINF\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eedge\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003econnections\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eedge\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eedge\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eedge\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// dist[i]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e//     d: current min distance from one of added nodes\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e//     INF: distance is inf, not reachable\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eArrays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003efill\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eINF\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// added nodes\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eadded\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// set node [1] as candidates\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// N nodes to add\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"c1\"\u003e// find node with min distance\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eINF\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eadded\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"c1\"\u003e// no reachable node found\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"c1\"\u003e// add [node]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"n\"\u003eadded\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"c1\"\u003e// update dist[i] with distance from [node] to [i]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eadded\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eINF\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003egraph\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"3-堆\"\u003e3 堆\u003c/h1\u003e\n\u003ch2 id=\"31-概念\"\u003e3.1 概念\u003c/h2\u003e\n\u003ch2 id=\"32-分类\"\u003e3.2 分类\u003c/h2\u003e\n\u003ch2 id=\"33-存储\"\u003e3.3 存储\u003c/h2\u003e\n\u003ch2 id=\"34-操作\"\u003e3.4 操作\u003c/h2\u003e\n\u003ch2 id=\"35-排序\"\u003e3.5 排序\u003c/h2\u003e\n\u003ch1 id=\"4-树\"\u003e4 树\u003c/h1\u003e\n\u003ch2 id=\"41-分类\"\u003e4.1 分类\u003c/h2\u003e\n\u003ch2 id=\"42-存储\"\u003e4.2 存储\u003c/h2\u003e\n\u003ch2 id=\"43-遍历\"\u003e4.3 遍历\u003c/h2\u003e\n\u003ch1 id=\"5-红黑树\"\u003e5 红黑树\u003c/h1\u003e\n\u003ch2 id=\"51-概念与特点\"\u003e5.1 概念与特点\u003c/h2\u003e\n\u003cp\u003e红黑树是一种自平衡二叉查找树。JDK中，TreeMap、TreeSet以及HashMap都使用了红黑树。\u003c/p\u003e","title":"数据结构"},{"content":"消息队列RabbitMQ 消息队列是一种消息中间件，不负责处理消息，仅负责消息的接受存储和转发.\nRabbitMQ特点：\n**消息传递模式：**支持多种消息传递模式，包括发布订阅、点对点和工作队列等。 **消息路由和交换机：**RabbitMQ引入了交换机（Exchange）概念，用于将消息路由到一个或者多个队列。允许根据消息内容、标签或者路由键进行灵活的消息路由。 **消息确认机制：**RabbitMQ支持消息确认机制，保证消息不会被重复消费。 **可扩展性：**RabbitMQ可以通过添加更多的节点和集群来增加吞吐量和可用性。 支持多种编程语言。 **消息持久性：**Rabbit允许消息和队列进行持久化设置，确保消息在RabbitMQ重启后不会丢失。 **灵活的插件系统：**RabbitMQ具有丰富的插件系统，可以拓展多种功能。 具有易于管理的Web界面。 为什么要使用消息队列\n流量削峰：队列缓存请求 应用解耦 异步处理 1 AMQP AMQP（Advanced Message Queuing Protocol）不是一个具体的消息中间件产品，而是一个协议规范，一种为面向消息的中间件设计的应用层协议。AMQP提供了一种统一的消息服务，是的不同程序之间可以通过消息队列进行通信。SpringBoot框架默认就提供了对AMQP协议的支持。\nAMQP 本质上是一个开放的标准，他不光可以被 RabbitMQ 实现，也可以被其他产品实现。通过这种标准的协议，实际上是可以在不同的消息中间件系统之间进行灵活的消息传递。只不过，目前具体实现这种标准的产品目前并不多，RabbitMQ 则是最有影响力的一个产品。因此，RabbitMQ 成了 AMQP 协议事实上的代表。SpringBoot 框架默认提供的 AMQP 协议支持底层也是基于 RabbitMQ 产品实现的。\nAMQP 协议的三层：\nModule Layer:协议最高层，主要定义了一些客户端调用的命令，客户端可以用这些命令实现自己的业务逻辑。 Session Layer:中间层，主要负责客户端命令发送给服务器，再将服务端应答返回客户端，提供可靠性同步机制和错误处理。 TransportLayer:最底层，主要传输二进制数据流，提供帧的处理、信道复用、错误检测和数据表示等。 AMQP 模型的三大组件：\n交换器 (Exchange)：消息代理服务器中用于把消息路由到队列的组件。 队列 (Queue)：用来存储消息的数据结构，位于硬盘或内存中。 绑定 (Binding)：一套规则，告知交换器消息应该将消息投递给哪个队列。 2 RabbitMQ各组件及其功能 **Broker：**RabbitMQ服务器，接受客户端连接，实现AMQP实体服务 **Virtual Host：**虚拟主机，实现逻辑隔离，用于隔离不同环境或不同应用的消息流。每个虚拟主机都有自己的Exchange和Queue。 **Connection：**连接，管理和维护RabbitMQ服务器的TCP链接，生产者和消费者通过这个连接与Broker建立物理网络连接（RabbitMQ消息基于TCP进行传输）。 **Channel：**信道，是在Connection中创建的轻量级通道，客户端可以建立多个信道，可以减小建立TCP Connection的开销，信道数量没有限制。 **Exchange：**交换机，负责接受来自生产者的消息，并将其路由到一个或多个队列。有direct、topic、fanout、headers四种模式。 **Queue：**队列是消息的存储位置，每个队列都有唯一的名称。 **Binding：**绑定，是Exchange和Queue之间的关联规则，定义了消息如何从交换机路由到特定队列。 此外生产者和消费者也是消息队列中的核心组件，生产者负责发送消息到Exchange或者Queue，消费者负责从Queue中订阅和处理消息。\n生产者：生产者是消息的发送方，负责产生并发送消息到 RabbitMQ。生产者通常将消息发送到交换机（Exchange）。 消费者：消费者是消息的接收方，负责从队列中获取消息并进行处理。消费者通过订阅队列来接收消息。 消息：消息是生产者和消费者之间传递的数据单元。消息通常包含消息体和可选的属性，如路由键等。 3 RabbitMQ中交换机类型 Direct Exchange：根据消息的路由键（Routing Key）将消息发送到与之完全匹配的队列。 Topic Exchange：根据消息的路由键与队列绑定时指定的路由键模式匹配程度，将消息进行路由到一个或多个队列。路由键可以使用通配符（*【匹配一个单词】，#【匹配零个或多个单词】）。 Headers Exchange：根据消息的表头信息决定消息的路由，而不是路由键，当消息的表头与绑定规则完全匹配时，才会被路由到该队列。 消费方指定的headers中需要有一个x-match键 all：所有键匹配才可以接受消息 any：只要有键值对匹配成功，就可以接受消息 Fanout Exchange：广播路由，用于发布/订阅模式。 Default Exchange：默认实现的交换机，不需要手动创建。当消息被发布到默认交换机时，路由键会被解释为队列的名称，实现点对点通信。 4 RabbitMQ工作原理 AMQP协议模型有三部分组成：生产者、消费者和服务端。\n执行流程：\n生产者连接到服务端，建立连接，开启信道 生产者声明交换器和队列，设置相关属性，并通过路由关键词将交换器和队列进行绑定 消费者建立连接，开启信道，监听消息 生产者发送消息 虚拟主机根据路由关键词选择路由，发送道不同的消息队列 消费者拿到消息进行消费 5 RabbitMQ工作模式 Simple模式：一对一。 Work Queue工作队列模式：生产者发送消息到Queue，多个消费者同时消费，消息会均匀分配给多个消费者。 发布订阅模式：生产者发送消息到Queue，所有的消费者都会消费同一个消息。 路由模式：在发布订阅模式上增加了路由键，根据路由键判断将消息转发到哪些Queue中。 主题模式：在路由模式基础上，添加了模糊匹配的功能。 6 消息持久化 RabbitMQ 允许消息的持久化，以确保即使在 RabbitMQ 服务器重新启动后，消息也不会丢失。RabbitMQ 可以通过以下方式实现消息的持久化：\n消息持久化：在 RabbitMQ 中，只需要在发送消息时，将delivery_mode属性设置为 2，就可以将消息标记为持久化。 队列持久化：在 RabbitMQ 中声明队列时，也可以将队列声明为持久化。RabbitMQ 中的队列分为三种不同类型经典队列，仲裁队列和流式队列。其中，经典队列需要将durable属性设置为true。而仲裁队列和流式队列默认必须持久化保存。 交换机持久化：与经典队列类似，RabbitMQ 也可以在声明交换机时，将交换机的 durable 属性设置为true，这样就可以将交换机标记为持久化。 RabbitMQ 的持久化机制会对其性能产生影响。因此，需要根据具体的业务场景和需求来权衡是否需要持久化以及需要哪种类型的持久化。\n7 如何保证RabbitMQ消息的顺序性 拆分多个queue，对同一数据的操作放在一个队列中 只是用一个队列和一个消费者 8 有哪些情况会发生消息丢失，如何保证不丢失 生产者发送丢失： 原因：网络问题，代码问题 解决：发布确认机制，生产者设置信道为confirm模式，broker收到消息会发送确认消息给生产者 或者开启AMQP事务处理，但是这个方式是同步的，会阻塞，不推荐 RabbitMQ存储丢失 原因：消息没有持久化，网络问题 解决：消息回退（设置mandatory参数，消息不可达时返回给生产者）、持久化 消费者丢失 原因：消费端宕机或消息处理异常 解决：手动ack确认 9 Rabbit如何保证消息被消费 消费端配置手动ACK确认机制 结合数据库进行状态标记 在新增场景，可以采用数据库唯一约束 在更新场景，可以考虑乐观锁+版本号 插入记录时 ，在业务代码中检查 利用一个去重表（可以基于Redis实现，并利用TTL设置过期时间），插入成功的进入消费流程，失败的查看是否被消费，被消费则返回成功，没有则进行延时消费。 10 Rabbit中如何进行事务处理 RabbitMQ 提供了事务处理机制，允许生产者在发送消息时将操作包装在一个事务中，以确保消息的可靠性传递。在 RabbitMQ 中，事务是通过通道（Channel）来实现的。可以通过以下步骤进行事务处理：\n开启事务：在生产者端，可以通过调用 Channel 的 tx_select 方法来开启一个事务。这将启动一个新的事务，并将所有后续的消息发布操作放在该事务内。 发送消息：接下来在事务中，可以正常发送消息。如果消息发送失败，事务会自动回滚。 提交事务：如果事务中所有消息发送成功后，需要提交事务。可以通过调用 Channel 的tx_commit方法提交事务。 处理异常：如果在事务过程中发生异常，可以使用 try/catch 快来捕获异常。然后在异常处理过程中，调用 Channel 的 tx_rollback 方法来回滚 RabbitMQ 相关的事务操作。 需要注意的是，RabbitMQ 的事务处理是基于存储过程的，它可以保证在事务中的操作要么全部成功，要么全部失败。但是，由于 RabbitMQ 是一个异步的消息队列系统，事务处理可能会对其性能产生影响。因此，需要根据具体的应用场景和需求来权衡是否需要使用事务以及如何使用事务。\n11 如何解决消息堆积问题 产生堆积的原因：\n消费者处理速度慢 队列容量小 网络故障 消费者故障 队列使用不当 消息太大 业务逻辑复杂且耗时 生产速度大于消费速度 解决方案：\n增加消费者数量，水平拓展 提高消费者处理效率，代码调优、增加资源 消息预取限制 增加队列容量 采用死信队列等容错机制 对大型消息进行分片 优化业务逻辑 12 死信队列 死信队列是 RabbitMQ 提供的一种特殊序列，处理那些无法被正常消费的消息。有三种情况会产生死信：\n消息被消费者明确拒绝。 消息达到预设的过期时间仍没有消费者消费。 消息由于队列已经达到最大长度限制而被丢弃。 在 RabbitMQ 中，实现死信队列只需要给正常队列增加三个核心参数即可：\ndead-letter-exchange：指定当前队列对应的死信队列 dead-letter-routing-key：指定消息转入死信队列时的路由键 message-ttl：消息在队列中的过期时间。 接下来，就可以往正常队列中发送消息。如果消息满足了某些条件，就会成为死信，并被重新发送到对应的死信队列中。而此时，RabbitMQ 会在消息的头部添加一些与死信相关的补充信息，例如时间、成为死信的原因、原队列等。应用程序可以按需处理这些补充的信息。\n最后，死信队列中的消息都是正常业务处理失败的消息，应用程序需要创建一个消费者来专门处理这些被遗漏的消息。例如记录日志、发送警报等。这样才能保证业务数据的完整性。\n13 延时队列 延迟队列指的是存储对应的延迟消息，消息被发送以后，并不想让消费者立刻拿到消息，而是等待特定时间后，消费者才能拿到这个消息进行消费。\nRabbitMQ 本身是没有延迟队列的，要实现延迟消息，一般有两种方式：\n通过 RabbitMQ 本身队列的特性来实现，需要使用 RabbitMQ 的死信交换机（Exchange）和消息的存活时间 TTL（Time To Live）。 在 RabbitMQ 3.5.7 及以上的版本提供了一个插件（rabbitmq-delayed-message-exchange）来实现延迟队列功能。同时，插件依赖 Erlang/OPT 18.0 及以上。 也就是说，AMQP 协议以及 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过 TTL 和 DLX 模拟出延迟队列的功能。 14 优先级队列 RabbitMQ 自 V3.5.0 有优先级队列实现，优先级高的队列会先被消费。 可以通过x-max-priority参数来实现优先级队列。不过，当消费速度大于生产速度且 Broker 没有堆积的情况下，优先级显得没有意义。\n15 集群 RabbitMQ 支持两种主要类型的集群：普通集群（Classic Cluster）和镜像集群（Mirrored Cluster）。他们之间有一些重要的区别：\n普通集群： 这种模式使用Erlang语言天生具备的集群方式搭建。这种集群模式下，集群的各个节点之间只会有相同的元数据，即队列结构，而消息不会进行冗余，只存在一个节点中。消费时，如果消费的不是存有数据的节点， RabbitMQ会临时在节点之间进行数据传输，将消息从存有数据的节点传输到消费的节点。很显然，这种集群模式的消息可靠性不是很高。因为如果其中有个节点服务宕机了，那这个节点上的数据就无法消费了，需要等到这个节点服务恢复后才能消费，而这时，消费者端已经消费过的消息就有可能给不了服务端正确应答，服务起来后，就会再次消费这些消息，造成这部分消息重复消费。 另外，如果消息没有做持久化，重启就消息就会丢失。并且，这种集群模式也不支持高可用，即当某一个节点服务挂了后，需要手动重启服务，才能保证这一部分消息能正常消费。所以这种集群模式只适合一些对消息安全性不是很高的场景。而在使用这种模式时，消费者应该尽量的连接上每一个节点，减少消息在集群中的传输。 镜像集群：这种模式是在普通集群模式基础上的一种增强方案，这也就是RabbitMQ的官方HA高可用方案。需要在搭建了普通集群之后再补充搭建。其本质区别在于，这种模式会在镜像节点中间主动进行消息同步，而不是在客户端拉取消息时临时同步。并且在集群内部有一个算法会选举产生master和slave，当一个master挂了后，也会自动选出一个来。从而给整个集群提供高可用能力。这种模式的消息可靠性更高，因为每个节点上都存着全量的消息。而他的弊端也是明显的，集群内部的网络带宽会被这种同步通讯大量的消耗，进而降低整个集群的性能。这种模式下，队列数量最好不要过多 总的来说，普通集群适用于对性能要求高，但可以接受数据丢失的情况。而镜像集群则适用于对数据持久性和可用性有更高要求，并愿意付出一些性能代价的场景。\n","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/messagequeue/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97rabbitmq/","summary":"\u003ch1 id=\"消息队列rabbitmq\"\u003e消息队列RabbitMQ\u003c/h1\u003e\n\u003cp\u003e消息队列是一种消息中间件，不负责处理消息，仅负责消息的接受存储和转发.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRabbitMQ特点：\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e**消息传递模式：**支持多种消息传递模式，包括发布订阅、点对点和工作队列等。\u003c/li\u003e\n\u003cli\u003e**消息路由和交换机：**RabbitMQ引入了交换机（Exchange）概念，用于将消息路由到一个或者多个队列。允许根据消息内容、标签或者路由键进行灵活的消息路由。\u003c/li\u003e\n\u003cli\u003e**消息确认机制：**RabbitMQ支持消息确认机制，保证消息不会被重复消费。\u003c/li\u003e\n\u003cli\u003e**可扩展性：**RabbitMQ可以通过添加更多的节点和集群来增加吞吐量和可用性。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e支持多种编程语言。\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e**消息持久性：**Rabbit允许消息和队列进行持久化设置，确保消息在RabbitMQ重启后不会丢失。\u003c/li\u003e\n\u003cli\u003e**灵活的插件系统：**RabbitMQ具有丰富的插件系统，可以拓展多种功能。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e具有易于管理的Web界面。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003e为什么要使用消息队列\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e流量削峰：队列缓存请求\u003c/li\u003e\n\u003cli\u003e应用解耦\u003c/li\u003e\n\u003cli\u003e异步处理\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"1-amqp\"\u003e1 AMQP\u003c/h1\u003e\n\u003cp\u003eAMQP（Advanced Message Queuing Protocol）不是一个具体的消息中间件产品，而是一个协议规范，一种为面向消息的中间件设计的应用层协议。AMQP提供了一种统一的消息服务，是的不同程序之间可以通过消息队列进行通信。SpringBoot框架默认就提供了对AMQP协议的支持。\u003c/p\u003e\n\u003cp\u003eAMQP 本质上是一个开放的标准，他不光可以被 RabbitMQ 实现，也可以被其他产品实现。通过这种标准的协议，实际上是可以在不同的消息中间件系统之间进行灵活的消息传递。只不过，目前具体实现这种标准的产品目前并不多，RabbitMQ 则是最有影响力的一个产品。因此，RabbitMQ 成了 AMQP 协议事实上的代表。SpringBoot 框架默认提供的 AMQP 协议支持底层也是基于 RabbitMQ 产品实现的。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAMQP 协议的三层\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eModule Layer\u003c/strong\u003e:协议最高层，主要定义了一些客户端调用的命令，客户端可以用这些命令实现自己的业务逻辑。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSession Layer\u003c/strong\u003e:中间层，主要负责客户端命令发送给服务器，再将服务端应答返回客户端，提供可靠性同步机制和错误处理。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTransportLayer\u003c/strong\u003e:最底层，主要传输二进制数据流，提供帧的处理、信道复用、错误检测和数据表示等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eAMQP 模型的三大组件\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e交换器 (Exchange)\u003c/strong\u003e：消息代理服务器中用于把消息路由到队列的组件。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e队列 (Queue)\u003c/strong\u003e：用来存储消息的数据结构，位于硬盘或内存中。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e绑定 (Binding)\u003c/strong\u003e：一套规则，告知交换器消息应该将消息投递给哪个队列。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"2-rabbitmq各组件及其功能\"\u003e2 RabbitMQ各组件及其功能\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/ba56f7e9446b0c1fbcd3cb484cdeb034/d73d41db6f0cbb3ada3c83c874e2e118.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e**Broker：**RabbitMQ服务器，接受客户端连接，实现AMQP实体服务\u003c/li\u003e\n\u003cli\u003e**Virtual Host：**虚拟主机，实现逻辑隔离，用于隔离不同环境或不同应用的消息流。每个虚拟主机都有自己的Exchange和Queue。\u003c/li\u003e\n\u003cli\u003e**Connection：**连接，管理和维护RabbitMQ服务器的TCP链接，生产者和消费者通过这个连接与Broker建立物理网络连接（\u003cstrong\u003eRabbitMQ消息基于TCP进行传输\u003c/strong\u003e）。\u003c/li\u003e\n\u003cli\u003e**Channel：**信道，是在Connection中创建的轻量级通道，\u003cstrong\u003e客户端可以建立多个信道，可以减小建立TCP Connection的开销，信道数量没有限制\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e**Exchange：**交换机，负责接受来自生产者的消息，并将其路由到一个或多个队列。有direct、topic、fanout、headers四种模式。\u003c/li\u003e\n\u003cli\u003e**Queue：**队列是消息的存储位置，每个队列都有唯一的名称。\u003c/li\u003e\n\u003cli\u003e**Binding：**绑定，是Exchange和Queue之间的关联规则，定义了消息如何从交换机路由到特定队列。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e此外生产者和消费者也是消息队列中的核心组件，生产者负责发送消息到Exchange或者Queue，消费者负责从Queue中订阅和处理消息。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e生产者：生产者是消息的发送方，负责产生并发送消息到 RabbitMQ。生产者通常将消息发送到交换机（Exchange）。\u003c/li\u003e\n\u003cli\u003e消费者：消费者是消息的接收方，负责从队列中获取消息并进行处理。消费者通过订阅队列来接收消息。\u003c/li\u003e\n\u003cli\u003e消息：消息是生产者和消费者之间传递的数据单元。消息通常包含消息体和可选的属性，如路由键等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"3-rabbitmq中交换机类型\"\u003e3 RabbitMQ中交换机类型\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDirect Exchange\u003c/strong\u003e：根据消息的路由键（Routing Key）将消息发送到与之完全匹配的队列。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/ba56f7e9446b0c1fbcd3cb484cdeb034/0e1a89def6ace6972683467974c45afe.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e","title":"消息队列RabbitMQ"},{"content":"结构性模式 通过类和接口间的继承和引用关系船舰结构复杂的对象。\n1 适配器模式 当需要将两个不同接口的类进行通信时，在不修改这两个类的前提下，我们可以用中间件完成衔接过程。这个中间件就是适配器，适配器模式就是将一个类的接口，转换为客户期望的另一个接口，让原本不兼容的接口完成无缝对接。\n类适配器\n通过类的继承实现适配，继承Target的接口，继承Adaptee的实现\n对象适配器\n通过类对象的组合实现适配\ntarget：定义Client真正需要的接口。 Adaptee：其中定义了一个已经存在的接口，也就是我们需要进行适配的接口。 Adapter：对Adaptee和Target的接口进行适配，保证对target中接口的调用可以间接转换为对Adaptee中接口的调用。 优点：\n提高了类的复用 组合若干关联对象对外提供统一服务接口 扩展性、灵活性号 缺点：\n过多使用适配器模式容易导致代码功能和逻辑意义混淆。\n部分语言对继承的限制，可能至多只能适配一个适配者类么日期目标类必须是抽象类。\n2 桥接模式 3 组合模式 4 装饰模式 5 外观模式 6 享元模式 7 代理模式 代理模式本质是一个中间件，主要目的时解耦合服务提供者和使用者。\n使用者通过代理间接访问服务提供者，便于后者的封装和控制。\nRealSubject：真正的目标对象 Proxy：目标对象的代理，负责控制和管理目标对象，并间接传递外部对目标对象的访问 Remote Proxy：对本地的请求以及参数进行序列化，向远程对象发送请求，并对响应结果进行反序列化，将最终结果反馈给调用者。 Virtual Proxy：当目标对象创建开销比较大时，可以使用延迟或者异步的方式创建目标对象 Protection Proxy：细化对目标对象访问权限的控制 静态代理和动态代理的区别 动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要整堆每个目标类都创建一个代理类。\n静态代理中，一旦新增方法，目标对象和代理对象都要修改。\nJVM中，静态代理在编译时就将接口、实现类、代理类编译成class文件，动态代理是在运行时动态生成字节码文件，加载到JVM中的。\n","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/designmode/%E7%BB%93%E6%9E%84%E6%80%A7%E6%A8%A1%E5%BC%8F/","summary":"\u003ch1 id=\"结构性模式\"\u003e结构性模式\u003c/h1\u003e\n\u003cp\u003e通过类和接口间的继承和引用关系船舰结构复杂的对象。\u003c/p\u003e\n\u003ch1 id=\"1-适配器模式\"\u003e1 适配器模式\u003c/h1\u003e\n\u003cp\u003e当需要将两个不同接口的类进行通信时，在不修改这两个类的前提下，我们可以用中间件完成衔接过程。这个中间件就是适配器，适配器模式就是将一个类的接口，转换为客户期望的另一个接口，让原本不兼容的接口完成无缝对接。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e类适配器\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e通过类的继承实现适配，继承Target的接口，继承Adaptee的实现\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/24da818bf179debeee0a9368b38bcbbf/47d4dcc89f79756b815ee92f96475904.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e对象适配器\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e通过类对象的组合实现适配\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/24da818bf179debeee0a9368b38bcbbf/0b52900c742b74c759a96a823454dd99.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etarget：定义Client真正需要的接口。\u003c/li\u003e\n\u003cli\u003eAdaptee：其中定义了一个已经存在的接口，也就是我们需要进行适配的接口。\u003c/li\u003e\n\u003cli\u003eAdapter：对Adaptee和Target的接口进行适配，保证对target中接口的调用可以间接转换为对Adaptee中接口的调用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e优点：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e提高了类的复用\u003c/li\u003e\n\u003cli\u003e组合若干关联对象对外提供统一服务接口\u003c/li\u003e\n\u003cli\u003e扩展性、灵活性号\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e缺点：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e过多使用适配器模式容易导致代码功能和逻辑意义混淆。\u003c/p\u003e\n\u003cp\u003e部分语言对继承的限制，可能至多只能适配一个适配者类么日期目标类必须是抽象类。\u003c/p\u003e\n\u003ch1 id=\"2-桥接模式\"\u003e2 桥接模式\u003c/h1\u003e\n\u003ch1 id=\"3-组合模式\"\u003e3 组合模式\u003c/h1\u003e\n\u003ch1 id=\"4-装饰模式\"\u003e4 装饰模式\u003c/h1\u003e\n\u003ch1 id=\"5-外观模式\"\u003e5 外观模式\u003c/h1\u003e\n\u003ch1 id=\"6-享元模式\"\u003e6 享元模式\u003c/h1\u003e\n\u003ch1 id=\"7-代理模式\"\u003e7 代理模式\u003c/h1\u003e\n\u003cp\u003e代理模式本质是一个中间件，主要目的时解耦合服务提供者和使用者。\u003c/p\u003e\n\u003cp\u003e使用者通过代理间接访问服务提供者，便于后者的封装和控制。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/24da818bf179debeee0a9368b38bcbbf/b1f6473aba8ebef2823b915fccb6458a.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRealSubject：真正的目标对象\u003c/li\u003e\n\u003cli\u003eProxy：目标对象的代理，负责控制和管理目标对象，并间接传递外部对目标对象的访问\n\u003cul\u003e\n\u003cli\u003eRemote Proxy：对本地的请求以及参数进行序列化，向远程对象发送请求，并对响应结果进行反序列化，将最终结果反馈给调用者。\u003c/li\u003e\n\u003cli\u003eVirtual Proxy：当目标对象创建开销比较大时，可以使用延迟或者异步的方式创建目标对象\u003c/li\u003e\n\u003cli\u003eProtection Proxy：细化对目标对象访问权限的控制\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"静态代理和动态代理的区别\"\u003e静态代理和动态代理的区别\u003c/h2\u003e\n\u003cp\u003e动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要整堆每个目标类都创建一个代理类。\u003c/p\u003e\n\u003cp\u003e静态代理中，一旦新增方法，目标对象和代理对象都要修改。\u003c/p\u003e\n\u003cp\u003eJVM中，静态代理在编译时就将接口、实现类、代理类编译成class文件，动态代理是在运行时动态生成字节码文件，加载到JVM中的。\u003c/p\u003e","title":"结构性模式"},{"content":"行为型模式 通过类之间不同的通信方式实现不同行为。\n1 访问者模式 2 模板模式 3 策略模式 属于对象的行为模式，针对一组算法，将每一个算法封装到具有共同接口的独立类中，使得他们可以相互替换。\n4 状态模式 5 观察者模式 Subject：抽象被观察对象，仅提供注册和删除观察者对象的接口声明。 ConcreteSubject：具体被观察对象，该对象中收集了所有需要被通知的观察者，可以动态增删集合中的观察者，当状态发生变化时，会通知所有观察者对象。 Observer：抽象观察者，为所有观察者定义获得通知的同一接口。 ConcreteObserver：观察者对象，关注对象为Subject，能接受Subject变化是发出的通知并更新自身状态 优点：\n被观察者和观察者之间时抽象耦合的 耦合度较低，两者之间关联仅在于消息通知 被观察者者无需关心他的观察者 支持广播通信 缺点：\n观察者只知道被观察对象发生了变化，不知道过程和原因 观察者同时可能是被观察者，消息链路可能过长 如果观察者和被观察者之间产生循环依赖，会导致无限循环 6 备忘录模式 7 中介者模式 8 迭代器模式 9 解释器模式 10 装饰器模式 对现有类对象进行包装，在不改变类对象和定义情况下，添加额外功能。\n是一种对象结构型模式。\nComponent：对象的接口类，定义装饰对象和被装饰对象的共同接口\nConcreteComponent：被装饰对象的定义\nDecorator：装饰对象的抽象类，持有一个具体被修饰的对象，并实现接口类继承的公共接口\nConcreteDecorator：具体的装饰器，负责王被装饰对象添加额外功能。\nfinal修饰的类无法使用继承来拓展对象行为，此时可以使用装饰模式进行拓展。\n11 命令模式 12 责任链模式 一个请求沿着一条链传递，直到该链上某个处理者处理它为止。\n当程序需要使用不同方法处理不同种类请求时，而且请求类型和顺序预先未知时。使用责任链模式，收到请求后，按顺序询问每个处理者是否能够处理\n","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/designmode/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/","summary":"\u003ch1 id=\"行为型模式\"\u003e行为型模式\u003c/h1\u003e\n\u003cp\u003e通过类之间不同的通信方式实现不同行为。\u003c/p\u003e\n\u003ch1 id=\"1-访问者模式\"\u003e1 访问者模式\u003c/h1\u003e\n\u003ch1 id=\"2-模板模式\"\u003e2 模板模式\u003c/h1\u003e\n\u003ch1 id=\"3-策略模式\"\u003e3 策略模式\u003c/h1\u003e\n\u003cp\u003e属于对象的行为模式，针对一组算法，将每一个算法封装到具有共同接口的独立类中，使得他们可以相互替换。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/2f6a2191a3e20c61993374dbccd58378/7c2f78b4a0c07e5e8af59a26dc4431bc.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003ch1 id=\"4-状态模式\"\u003e4 状态模式\u003c/h1\u003e\n\u003ch1 id=\"5-观察者模式\"\u003e5 观察者模式\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/2f6a2191a3e20c61993374dbccd58378/93f17120004fadf5563f064a8b66cb6c.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSubject：抽象被观察对象，仅提供注册和删除观察者对象的接口声明。\u003c/li\u003e\n\u003cli\u003eConcreteSubject：具体被观察对象，该对象中收集了所有需要被通知的观察者，可以动态增删集合中的观察者，当状态发生变化时，会通知所有观察者对象。\u003c/li\u003e\n\u003cli\u003eObserver：抽象观察者，为所有观察者定义获得通知的同一接口。\u003c/li\u003e\n\u003cli\u003eConcreteObserver：观察者对象，关注对象为Subject，能接受Subject变化是发出的通知并更新自身状态\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e优点：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e被观察者和观察者之间时抽象耦合的\u003c/li\u003e\n\u003cli\u003e耦合度较低，两者之间关联仅在于消息通知\u003c/li\u003e\n\u003cli\u003e被观察者者无需关心他的观察者\u003c/li\u003e\n\u003cli\u003e支持广播通信\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e缺点：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e观察者只知道被观察对象发生了变化，不知道过程和原因\u003c/li\u003e\n\u003cli\u003e观察者同时可能是被观察者，消息链路可能过长\u003c/li\u003e\n\u003cli\u003e如果观察者和被观察者之间产生循环依赖，会导致无限循环\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"6-备忘录模式\"\u003e6 备忘录模式\u003c/h1\u003e\n\u003ch1 id=\"7-中介者模式\"\u003e7 中介者模式\u003c/h1\u003e\n\u003ch1 id=\"8-迭代器模式\"\u003e8 迭代器模式\u003c/h1\u003e\n\u003ch1 id=\"9-解释器模式\"\u003e9 解释器模式\u003c/h1\u003e\n\u003ch1 id=\"10-装饰器模式\"\u003e10 装饰器模式\u003c/h1\u003e\n\u003cp\u003e对现有类对象进行包装，在不改变类对象和定义情况下，添加额外功能。\u003c/p\u003e\n\u003cp\u003e是一种对象结构型模式。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/2f6a2191a3e20c61993374dbccd58378/6cb5c3dc06d00c74cf896f6860a2d2d7.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003eComponent：对象的接口类，定义装饰对象和被装饰对象的共同接口\u003c/p\u003e\n\u003cp\u003eConcreteComponent：被装饰对象的定义\u003c/p\u003e\n\u003cp\u003eDecorator：装饰对象的抽象类，持有一个具体被修饰的对象，并实现接口类继承的公共接口\u003c/p\u003e\n\u003cp\u003eConcreteDecorator：具体的装饰器，负责王被装饰对象添加额外功能。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003efinal修饰的类无法使用继承来拓展对象行为，此时可以使用装饰模式进行拓展。\u003c/strong\u003e\u003c/p\u003e\n\u003ch1 id=\"11-命令模式\"\u003e11 命令模式\u003c/h1\u003e\n\u003ch1 id=\"12-责任链模式\"\u003e12 责任链模式\u003c/h1\u003e\n\u003cp\u003e一个请求沿着一条链传递，直到该链上某个处理者处理它为止。\u003c/p\u003e\n\u003cp\u003e当程序需要使用不同方法处理不同种类请求时，而且请求类型和顺序预先未知时。使用责任链模式，收到请求后，按顺序询问每个处理者是否能够处理\u003c/p\u003e","title":"行为型模式"},{"content":"计算机网络 1 分层模型 OSI七层模型：\n口诀：物联网书会使用 优点：概念结构清楚，理论完整 缺点：复杂不实用、某些功能在多个层中重复出现。 TCP/IP四层模型：\n为什么要分层？\n使得各层之间独立。 提高灵活性和可替换性（高内聚低耦合）。 大问题化小，复杂问题分解。 2 常见网络协议 应用层：\nHTTP SMTP POP3/IMAP FTP Telnet SSH RTP DNS 传输层：\nTCP UDP 网络层：\nIP ARP ICMP NAT OSFP RIP BGP 3 HTTP 3.1 从输入URL到页面展示发生了什么？ 过程：\n用户输入URL。 浏览器查找域名IP地址（通过DNS：浏览器缓存、路由器缓存、DNS缓存）。 浏览器根据IP地址和端口号，向目标服务器发起TCP连接请求。 浏览器与服务器建立TCP连接，并发送HTTP请求报文。 服务器收到报文进行处理请求，并返回HTTP响应报文给浏览器。 浏览器收到HTTP响应报文后，解析响应体中的内容，并进行网页渲染，同时根据HTML中其他资源URL再次发起HTTP请求，直到网页完全加载显示。 浏览器在不需要和服务器通信时，可主动关闭TCP连接，或者等待服务器关闭请求。 使用到的协议：DNS、TCP、IP、OPSF、ARP、HTTP\n3.2 HTTP和HTTPS的区别 URL前缀不同（http和https） 端口号不同（80和443） 安全性，HTTPS大于HTTP 资源消耗：HTTP优于HTTPS SEO搜索引擎优化：优先显示HTTPS网页 ::HTTPS中的S如何实现？::\n3.3 HTTP/1.0和HTTP/1.1区别 1.1实现了长连接 1.1加入了大量状态码 1.1有更多的缓存控制机制 1.1支持断点续传 3.4 HTTP/1.1和HTTP/2.0区别 2.0实现了多路复用 2.0使用二进制帧传输（1.1使用文本格式报文） 2.0支持对头部压缩（1.1仅 支持对body压缩） 2.0支持服务器推送，可以减少客户端请求次数。 3.5 HTTP/2.0和HTTP/3.0区别 传输协议：3.0基于QUIC（UDP升级版），提供与TLS/SSL相当的安全性 连接建立：2.0需要经过TCP三次握手外加一个TLS安全握手，需约3个RTT；而3.0由于QUIC的特性，仅需要0个或1个RTT。 队头阻塞：2.0复用一个TCP连接，一旦包丢失，会阻塞所有HTTP请求。3.0一个连接有多个不同的数据流，互不影响。 错误恢复：3.0具有更快的恢复和重传机制，2.0需要依赖于TCP的错误恢复机制。 安全加密：2.0使用TLS协议进行加密，3.0基于QUIC协议，内置加密和身份验证机制，可以提供更强的安全性。 3.6 HTTP是不保存状态的协议，那么如何保存用户状态？ Session机制：通过服务端记录用户状态，时间限制到后销毁Session\nCookie中加入Session ID跟踪。\nSession 的主要作用就是通过服务端记录用户的状态。 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。\nCookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。相对来说 Session 安全性更高。如果使用 Cookie 的一些敏感信息不要写入 Cookie 中，最好能将 Cookie 信息加密然后使用到的时候再去服务器端解密。\n3.7 GET和POST区别 语义：GET用于查询和获取、POST用于创建和修改 幂等：GET是幂等的，POST不是幂等的 格式：GET将参数放在URL中，POST将参数放在请求体中 缓存：GET适合缓存，POST不适合缓存，由于幂等的原因 安全性：都不安全，但是GET更不安全 4 WebSocket WebSocket是一种基于TCP连接的全双工通信协议。应用层协议，用于弥补HTTP在持久通信能力上的补足，仅需一次握手就可以创建持久性连接，并进行双向数据传输。\n工作过程\n客户端向服务端发送一个HTTP请求，包含Upgrade:websocket和Sec-webSocket-Key等字段； 服务器收到请求，如果服务器支持，则回复101状态码，表示升级到WebSocket协议 连接建立，双向传输，数据以帧的形式传输，每条消息可能会被划分为多个帧。 客户端或服务器主动发送关闭帧，接收方回复关闭帧关闭TCP连接。 Socket建立后，通过心跳机制保持连接稳定性和活跃性。\nWebSocket和Http的区别\n通信：websocket是双向实时的，而http只能由客户端主动发起。 前缀：websocket使用ww://或wws:// 扩展：websocket支持扩展 网络开销：websocket数据格式轻量，开销更小。 Websocket与SSE区别\nSSE基于HTTP协议，不需要特殊协议或服务器即可实现工作；WebSocket需要单独的服务器处理协议 SSE单向通信，只能由服务端向客户端。WebSocket全双工。 SSE实现简单，开发成本低；WebSocket传输数据需要做二次解析。 SSE默认支持断线重连，WebSocket需要自己实现。 SSE只能传送文本消息，二进制数据需要编码后传送，WebSocket默认支持传送二进制数据。 如何选择：对于游戏、即时通信以及需要双向近乎实时更新的场景，拥有双向通道更具吸引力。站内信、未读消息数、状态更新、股票行情、监控数量等场景，SEE 不管是从实现的难易和成本上都更加有优势。此外，SSE 具有 WebSocket 在设计上缺乏的多种功能，例如：自动重新连接、事件 ID 和发送任意事件的能力。 5 TCP \u0026amp; UDP TCP UDP 是否面向连接 是 否 是否可靠 是 否 是否有状态 是 否 传输效率 较慢 较快 传输形式 字节流 数据报文段 首部开销 20~60bytes 8bytes 支持广播/多播 否 是 5.1 TCP三次握手 过程： 客户端发送SYN(SEQ=X)标志的数据包到服务器，然后客户端进入SYN_SEND状态等待确认； 服务端发送带有SYN+ACK(SEQ=Y, ACK=X+1)标志的数据包到用户端，然后进入SYN_RECV状态； 客户端发送带有ACK(ACK=y+1)标志的数据包给服务端，然后客户端和服务端进入ESTABLISHED状态。 为什么要三次握手： 第一次握手：S确认接受正常、对方发送正常； 第二次握手：C确认发送、接受正常，对方发送、接收正常； 第三次握手：S确认对方接受正常，自己发送正常。 两次握手服务端无法确认自己消息是否被接受，四次效率较低。\n第二次握手传回了ACK为什么还要传回SYN？ ACK表示服务端确认收到客户端消息，SYN是为了建立并确认从服务端到客户端的通信。\n为什么两次握手不可以？\n避免历史连接： 假设客户端发起连接，但是该请求因为网络阻塞，没有到达服务器，此时客户端尝试重写发起，但是随后历史请求到达服务器，服务器建立连接并发送数据，客户端发现这个数据并不是此时需要的，于是RST终止连接，过了一段时间后，新的请求才到达服务器，建立起真正需要的连接。这种情况下，两次握手由于没有中间的服务器状态，无法过滤历史连接，会造成资源浪费。 **同步双方序列号：**TCP的可靠传输是基于序列号的，而双方相互确认序列号，都需要向对方发送序列号并得到确认，进一步可以优化为3次握手，而两次握手只能确认一方的序列号被对方接受。 **避免资源浪费：**与第一种情况类似（第一种情况时旧的请求先到，这种情况是旧的请求后到，导致建立无用的空连接）。 为什么不使用四次握手？\n双方建立起一个可靠的TCP连接，需要相互确认序列号，而服务器确认客户端序列号时，可以同时把自己的序列号也送出，可以减少开销。\n为什么每次建立TCP连接时，初始化的序列号都要求不一样？\n为了防止在网络中阻塞的历史报文被新的连接接受，导致数据错乱。\n为了防止黑客伪造相同序列号的TCP报文被对方接受。\n5.2 TCP四次挥手 过程： C发送FIN(SEQ=X)标志的数据包到服务端，用来关闭客户端到服务端的数据传送。客户端进入FIN-WAIT-1状态 S收到FIN(SEQ=X)标志数据包，发送ACK(ACK=X+1)标志的数据包到客户端，服务端进入CLOSE-WAIT状态，客户端进入FIN-WAIT-2状态。 服务端发送一个FIN(SEQ=Y)标志的数据包到客户端，请求关闭连接，然后服务器进入LAST-ACK状态。 客户端发送ACK(ACK=Y+1)标志的数据包给服务端，然后客户端进入TIME-WAIT状态，服务端收到后，进入CLOSE状态。此时客户端等待2MSL后依然没有收到回复，就证明服务端正常关闭，客户端关闭连接。 为什么要四次挥手： TCP全双工，任何一方发出结束通知后，会进入半关闭状态，当另一方没有数据传输时，发出关闭通知，释放连接。\n为什么不能把服务器发送的ACK和FIN结合起来，变成三次挥手？ 全双工，服务器可能还有数据要传送给客户端。\n第二次挥手时服务器的ACK没有送达客户端怎么办？ 客户端会重新发送FIN请求。\n为什么第四次挥手客户端需要等待2*MSL（报文最长寿命）后才进入CLOSE状态？ 第四次挥手时，客户端发送给服务器的 ACK 有可能丢失，如果服务端因为某些原因而没有收到 ACK 的话，服务端就会重发 FIN，如果客户端在 2*MSL 的时间内收到了 FIN，就会重新发送 ACK 并再次等待 2MSL，防止 Server 没有收到 ACK 而不断重发 FIN。\n5.3 可靠传输 RTT：数据发送时刻到接收到确认的时刻的差值，也就是包往返时间。\nRTO：Retransmission Timeout 超时重传时间，应该略大于报文往返 RTT 的值。\n5.3.1 重传机制 基于序列号与确认应答。\n超时重传：发送数据报时，设定定时器，超过RTO后，重新发送数据，并将RTO加倍，两次超时说明网络环境较差，不宜频繁发生。 快速重传：接收方收到不按顺序传递的报文，会重复对已收到的连续报文发送确认消息，发送方连续收到三个重复的ACK后，进行重传。 SACK：选择性确认，TCP头部增加SACK选项，发送方可以收到接收方已收到的数据范围，连续收单三次相同的ACK后，进行重传，但是仅重传缺失部分。 D-SACK：重复选择性确认，可以让发送方知道是数据包丢失还是接收方的ACK包丢失。 5.3.2 滑动窗口 窗口大小指的是，无需等待确认应答，而可以继续发送数据的最大值。\n途中接收方的ACK如果丢失，可以通过下一个ACK来进行确认，也就是累计确认。\n发送方窗口\n接收方窗口\n接收窗口和发送窗口是约等于关系。\n通常窗口的大小是由接收方的窗口大小决定的。TCP头中有一个字段叫Window，这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据接收端的处理能力来发送数据。\n5.3.3 流量控制 发送方收到ACK确认后，才可以进行窗口的移动，使得发送方可以根据接收方的实际接受能力控制发送的数据量。 TCP规定不可以同时减少缓存和收缩窗口，应先收缩窗口，后减少缓存（与操作系统的缓冲区有关） 窗口大小为0时，就会阻止发送方给接收方传递数据，知道窗口变为非零。这就是窗口关闭。针对窗口非零的通知报文丢失的问题，接收方在接收到窗口关闭的通知后，会进行发送窗口探测报文。 如果接收方腾出几个字节并告诉发送方现在有几个字节的窗口，而发送方会义无反顾地发送这几个字节，这就是糊涂窗口综合症。解决方式：发送方使用Nagle算法，延时处理，接收方不通知小窗口。 5.3.4 拥塞控制 **慢启动：**当发送方每收到一个 ACK，拥塞窗口 cwnd 的大小就会加 1（表现到每一轮数据发送和拥塞窗口大小关系上是指数增加），直到达到慢启动门限（ssthresh，slow start threshold）。 **拥塞避免：**每当收到一个 ACK 时，cwnd 增加 1/cwnd（表现到每一轮数据发送和拥塞窗口大小关系上是线性增加）。 拥塞发生： 发生超时重传时，会使用拥塞发生算法，ssthresh设置为cwnd/2，cwnd重置为1； 发生快速重传时，会将cwnd设置为cwnd/2，然后再将ssthresh设置为cwnd当前的大小，随后进入快速恢复算法。 快速恢复： 拥塞窗口cwnd = ssthresh+3； 重传丢失的数据包； 如果再收到重复的ACK，那么cwnd增加1； 如果收到新数据的ACK，那么把cwnd设置为ssthresh值，因为该ACK确认了丢失数据已经收到，恢复结束，进入拥塞避免状态。 5.4 ARQ协议 自动重传请求（Automatic Repeat-reQuest，ARQ）是 OSI 模型中数据链路层和传输层的错误纠正协议之一。它通过使用确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后一段时间之内没有收到确认信息（Acknowledgements，就是我们常说的 ACK），它通常会重新发送，直到收到确认或者重试超过一定的次数。\nARQ 包括停止等待 ARQ 协议和连续 ARQ 协议。\n6 Ping PING 命令是一种常用的网络诊断工具，经常用来测试网络中主机之间的连通性和网络延迟。\nPING 命令的输出结果通常包括以下几部分信息：\nICMP Echo Request（请求报文）信息：序列号、TTL（Time to Live）值。 目标主机的域名或 IP 地址：输出结果的第一行。 往返时间（RTT，Round-Trip Time）：从发送 ICMP Echo Request（请求报文）到接收到 ICMP Echo Reply（响应报文）的总时间，用来衡量网络连接的延迟。 统计结果（Statistics）：包括发送的 ICMP 请求数据包数量、接收到的 ICMP 响应数据包数量、丢包率、往返时间（RTT）的最小、平均、最大和标准偏差值。 如果 PING 对应的目标主机无法得到正确的响应，则表明这两个主机之间的连通性存在问题（有些主机或网络管理员可能禁用了对 ICMP 请求的回复，这样也会导致无法得到正确的响应）。如果往返时间（RTT）过高，则表明网络延迟过高。\nPing工作原理\nPING 基于网络层的 ICMP（Internet Control Message Protocol，互联网控制报文协议），其主要原理就是通过在网络上发送和接收 ICMP 报文实现的。\nICMP 报文中包含了类型字段，用于标识 ICMP 报文类型。ICMP 报文的类型有很多种，但大致可以分为两类：\n查询报文类型：向目标主机发送请求并期望得到响应。 差错报文类型：向源主机发送错误信息，用于报告网络中的错误情况。 PING 用到的 ICMP Echo Request（类型为 8 ） 和 ICMP Echo Reply（类型为 0） 属于查询报文类型 。\nPING 命令会向目标主机发送 ICMP Echo Request。 如果两个主机的连通性正常，目标主机会返回一个对应的 ICMP Echo Reply。 7 DNS DNS（Domain Name System）域名管理系统，是当用户使用浏览器访问网址之后，使用的第一个重要协议。DNS 要解决的是域名和 IP 地址的映射问题。\n目前 DNS 的设计采用的是分布式、层次数据库结构，DNS 是应用层协议，它可以在 UDP 或 TCP 协议之上运行，端口为 53 。\nDNS服务器有哪些\nDNS 服务器自底向上可以依次分为以下几个层级(所有 DNS 服务器都属于以下四个类别之一):\n根 DNS 服务器。根 DNS 服务器提供 TLD 服务器的 IP 地址。目前世界上只有 13 组根服务器，我国境内目前仍没有根服务器。 顶级域 DNS 服务器（TLD 服务器）。顶级域是指域名的后缀，如com、org、net和edu等。国家也有自己的顶级域，如uk、fr和ca。TLD 服务器提供了权威 DNS 服务器的 IP 地址。 权威 DNS 服务器。在因特网上具有公共可访问主机的每个组织机构必须提供公共可访问的 DNS 记录，这些记录将这些主机的名字映射为 IP 地址。 本地 DNS 服务器。每个 ISP（互联网服务提供商）都有一个自己的本地 DNS 服务器。当主机发出 DNS 请求时，该请求被发往本地 DNS 服务器，它起着代理的作用，并将该请求转发到 DNS 层次结构中。严格说来，不属于 DNS 层级结构。 DNS解析过程\n迭代 递归 DNS劫持\nDNS 劫持是一种网络攻击，它通过修改 DNS 服务器的解析结果，使用户访问的域名指向错误的 IP 地址，从而导致用户无法访问正常的网站，或者被引导到恶意的网站。DNS 劫持有时也被称为 DNS 重定向、DNS 欺骗或 DNS 污染。\n8 ARP ARP 协议，全称 地址解析协议（Address Resolution Protocol），它解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。\nMAC地址长度为6字节（48bit）\nMAC 地址具有可携带性、永久性，身份证号永久地标识一个人的身份，不论他到哪里都不会改变。而 IP 地址不具有这些性质，当一台设备更换了网络，它的 IP 地址也就可能发生改变，也就是它在互联网中的定位发生了变化。\n最后，记住，MAC 地址有一个特殊地址：FF-FF-FF-FF-FF-FF（全 1 地址），该地址表示广播地址。\n工作原理 ARP 协议工作时有一个大前提，那就是 ARP 表。\n在一个局域网内，每个网络设备都自己维护了一个 ARP 表，ARP 表记录了某些其他网络设备的 IP 地址-MAC 地址映射关系，该映射关系以 \u0026lt;IP, MAC, TTL\u0026gt; 三元组的形式存储。其中，TTL 为该映射关系的生存周期，典型值为 20 分钟，超过该时间，该条目将被丢弃。\nA. 同一局域网内： A 检查自己ARP表，没找到B A构造ARP查询分组（包括A的IP、MAC，B的IP、广播MAC），广播到局域网 局域网内其他设备检查自己IP是否与查询IP相同：相同则返回ARP响应（B的IP、MAC、A的IP、MAC），并在自己的ARP表中构造映射，否则丢弃。 A提取信息加入到自己ARP表中。 B. 不同局域网内MAC寻址： A查表找目标路由器，没找到 与局域网内相同的方式寻找目标路由器MAC地址。 A收到目标路由器MAC，构造IP数据报，单播发给路由器 路由器查ARP表，没找到B 路由器用ARP找B 路由器重新封装IP数据报，单播给B。 9 NAT NAT 协议（Network Address Translation） 的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。具体地说，在一个小的子网（局域网，Local Area Network，LAN）内，各主机使用的是同一个 LAN 下的 IP 地址，但在该 LAN 以外，在广域网（Wide Area Network，WAN）中，需要一个统一的 IP 地址来标识该 LAN 在整个 Internet 上的位置。\n路由器内部运行NAT协议，维护NAT转换表。\n主机10.0.0.1向 IP 地址为128.119.40.186的 Web 服务器（端口 80）发送了 HTTP 请求（如请求页面）。此时，主机10.0.0.1将随机指派一个端口，如3345，作为本次请求的源端口号，将该请求发送到路由器中（目的地址将是128.119.40.186，但会先到达10.0.0.4）。 10.0.0.4即路由器的 LAN 接口收到10.0.0.1的请求。路由器将为该请求指派一个新的源端口号，如5001，并将请求报文发送给 WAN 接口138.76.29.7。同时，在 NAT 转换表中记录一条转换记录138.76.29.7:5001——10.0.0.1:3345。 请求报文到达 WAN 接口，继续向目的主机128.119.40.186发送。 之后，将会有如下响应发生：\n主机128.119.40.186收到请求，构造响应报文，并将其发送给目的地138.76.29.7:5001。 响应报文到达路由器的 WAN 接口。路由器查询 NAT 转换表，发现138.76.29.7:5001在转换表中有记录，从而将其目的地址和目的端口转换成为10.0.0.1:3345，再发送到10.0.0.4上。 被转换的响应报文到达路由器的 LAN 接口，继而被转发至目的地10.0.0.1。 总结 NAT 协议的特点，有以下几点：\nNAT 协议通过对 WAN 屏蔽 LAN，有效地缓解了 IPv4 地址分配压力。 LAN 主机 IP 地址的变更，无需通告 WAN。 WAN 的 ISP 变更接口地址时，无需通告 LAN 内主机。 LAN 主机对 WAN 不可见，不可直接寻址，可以保证一定程度的安全性。 10 IP IP（Internet Protocol，网际协议） 是 TCP/IP 协议中最重要的协议之一，属于网络层的协议，主要作用是定义数据包的格式、对数据包进行路由和寻址，以便它们可以跨网络传播并到达正确的目的地。\n目前 IP 协议主要分为两种，一种是过去的 IPv4，另一种是较新的 IPv6，目前这两种协议都在使用，但后者已经被提议来取代前者。\n当网络设备发送 IP 数据包时，数据包中包含了 源 IP 地址 和 目的 IP 地址 。源 IP 地址用于标识数据包的发送方设备或域，而目的 IP 地址则用于标识数据包的接收方设备或域。这类似于一封邮件中同时包含了目的地地址和回邮地址。\nIPv4和IPv6 IPv4（Internet Protocol version 4） 是目前广泛使用的 IP 地址版本，其格式是四组由点分隔的数字，例如：123.89.46.72。IPv4 使用 32 位地址作为其 Internet 地址，这意味着共有约 42 亿（ 2^32）个可用 IP 地址。\nIPv6 地址使用更复杂的格式，该格式使用由单或双冒号分隔的一组数字和字母，例如：2001:0db8:85a3:0000:0000:8a2e:0370:7334 。IPv6 使用 128 位互联网地址，这意味着有 2^128（3 开头的 39 位数字，恐怖如斯） 个可用 IP 地址。\nIPv6优势： 无状态地址自动配置（Stateless Address Autoconfiguration，简称 SLAAC）：主机可以直接通过根据接口标识和网络前缀生成全局唯一的 IPv6 地址，而无需依赖 DHCP（Dynamic Host Configuration Protocol）服务器，简化了网络配置和管理。\nNAT（Network Address Translation，网络地址转换） 成为可选项：IPv6 地址资源充足，可以给全球每个设备一个独立的地址。\n对标头结构进行了改进：IPv6 标头结构相较于 IPv4 更加简化和高效，减少了处理开销，提高了网络性能。\n可选的扩展头：允许在 IPv6 标头中添加不同的扩展头（Extension Headers），用于实现不同类型的功能和选项。\nICMPv6（Internet Control Message Protocol for IPv6）：IPv6 中的 ICMPv6 相较于 IPv4 中的 ICMP 有了一些改进，如邻居发现、路径 MTU 发现等功能的改进，从而提升了网络的可靠性和性能。\n11 网络攻击 IP欺骗 SYN Flood UDP Flood Http Flood DNS Flood TCP重置攻击 中间人劫持 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/networks/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","summary":"\u003ch1 id=\"计算机网络\"\u003e计算机网络\u003c/h1\u003e\n\u003ch1 id=\"1-分层模型\"\u003e1 分层模型\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eOSI七层模型：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/76dc9725b7bfb139393871234d619c6c/4678df4aa40bd122affa3ea51dd59b09.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e口诀：\u003cstrong\u003e物联网书会使用\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e优点：概念结构清楚，理论完整\u003c/li\u003e\n\u003cli\u003e缺点：复杂不实用、某些功能在多个层中重复出现。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eTCP/IP四层模型：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/76dc9725b7bfb139393871234d619c6c/6899e058ede579c02b961b0321f67565.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e为什么要分层？\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使得各层之间独立。\u003c/li\u003e\n\u003cli\u003e提高灵活性和可替换性（高内聚低耦合）。\u003c/li\u003e\n\u003cli\u003e大问题化小，复杂问题分解。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"2-常见网络协议\"\u003e2 常见网络协议\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003e应用层：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHTTP\u003c/li\u003e\n\u003cli\u003eSMTP\u003c/li\u003e\n\u003cli\u003ePOP3/IMAP\u003c/li\u003e\n\u003cli\u003eFTP\u003c/li\u003e\n\u003cli\u003eTelnet\u003c/li\u003e\n\u003cli\u003eSSH\u003c/li\u003e\n\u003cli\u003eRTP\u003c/li\u003e\n\u003cli\u003eDNS\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e传输层：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTCP\u003c/li\u003e\n\u003cli\u003eUDP\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e网络层：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIP\u003c/li\u003e\n\u003cli\u003eARP\u003c/li\u003e\n\u003cli\u003eICMP\u003c/li\u003e\n\u003cli\u003eNAT\u003c/li\u003e\n\u003cli\u003eOSFP\u003c/li\u003e\n\u003cli\u003eRIP\u003c/li\u003e\n\u003cli\u003eBGP\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"3-http\"\u003e3 HTTP\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/76dc9725b7bfb139393871234d619c6c/d32d5c681e7549dee4d3dbb4173d3c65.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003ch2 id=\"31-从输入url到页面展示发生了什么\"\u003e3.1 从输入URL到页面展示发生了什么？\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e过程：\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e用户输入URL。\u003c/li\u003e\n\u003cli\u003e浏览器查找域名IP地址（通过DNS：浏览器缓存、路由器缓存、DNS缓存）。\u003c/li\u003e\n\u003cli\u003e浏览器根据IP地址和端口号，向目标服务器发起TCP连接请求。\u003c/li\u003e\n\u003cli\u003e浏览器与服务器建立TCP连接，并发送HTTP请求报文。\u003c/li\u003e\n\u003cli\u003e服务器收到报文进行处理请求，并返回HTTP响应报文给浏览器。\u003c/li\u003e\n\u003cli\u003e浏览器收到HTTP响应报文后，解析响应体中的内容，并进行网页渲染，同时根据HTML中其他资源URL再次发起HTTP请求，直到网页完全加载显示。\u003c/li\u003e\n\u003cli\u003e浏览器在不需要和服务器通信时，可主动关闭TCP连接，或者等待服务器关闭请求。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003e使用到的协议：DNS、TCP、IP、OPSF、ARP、HTTP\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"32-http和https的区别\"\u003e3.2 HTTP和HTTPS的区别\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eURL前缀不同（http和https）\u003c/li\u003e\n\u003cli\u003e端口号不同（80和443）\u003c/li\u003e\n\u003cli\u003e安全性，HTTPS大于HTTP\u003c/li\u003e\n\u003cli\u003e资源消耗：HTTP优于HTTPS\u003c/li\u003e\n\u003cli\u003eSEO搜索引擎优化：优先显示HTTPS网页\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e::HTTPS中的S如何实现？::\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"33-http10和http11区别\"\u003e3.3 HTTP/1.0和HTTP/1.1区别\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e1.1实现了长连接\u003c/li\u003e\n\u003cli\u003e1.1加入了大量状态码\u003c/li\u003e\n\u003cli\u003e1.1有更多的缓存控制机制\u003c/li\u003e\n\u003cli\u003e1.1支持断点续传\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"34-http11和http20区别\"\u003e3.4 HTTP/1.1和HTTP/2.0区别\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e2.0实现了多路复用\u003c/li\u003e\n\u003cli\u003e2.0使用二进制帧传输（1.1使用文本格式报文）\u003c/li\u003e\n\u003cli\u003e2.0支持对头部压缩（1.1仅 支持对body压缩）\u003c/li\u003e\n\u003cli\u003e2.0支持服务器推送，可以减少客户端请求次数。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"35-http20和http30区别\"\u003e3.5 HTTP/2.0和HTTP/3.0区别\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e传输协议\u003c/strong\u003e：3.0基于QUIC（UDP升级版），提供与TLS/SSL相当的安全性\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e连接建立\u003c/strong\u003e：2.0需要经过TCP三次握手外加一个TLS安全握手，需约3个RTT；而3.0由于QUIC的特性，仅需要0个或1个RTT。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e队头阻塞\u003c/strong\u003e：2.0复用一个TCP连接，一旦包丢失，会阻塞所有HTTP请求。3.0一个连接有多个不同的数据流，互不影响。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e错误恢复\u003c/strong\u003e：3.0具有更快的恢复和重传机制，2.0需要依赖于TCP的错误恢复机制。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e安全加密\u003c/strong\u003e：2.0使用TLS协议进行加密，3.0基于QUIC协议，内置加密和身份验证机制，可以提供更强的安全性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"36-http是不保存状态的协议那么如何保存用户状态\"\u003e3.6 HTTP是不保存状态的协议，那么如何保存用户状态？\u003c/h2\u003e\n\u003cp\u003eSession机制：通过服务端记录用户状态，时间限制到后销毁Session\u003c/p\u003e","title":"计算机网络"},{"content":"软件设计原则与UML类图 1 软件设计原则 开闭原则（Open Closed Principle， OCP）：对扩展开发，对修改关闭 单一职责原则（Single Responsibility Principle， SRP）：一个类只负责一个功能领域中的相应职责 里氏替换原则（Liskov Substitution Principle， LSP）：所有引用基类的地方必须能透明地使用其子类对象 依赖倒置原则（Dependency Inversion Principle， DIP）：依赖于抽象，不能依赖于具体实现 接口隔离原则（Interface Segregation Principle，ISP）：类之间地依赖关系应该建立在最小的接口上 合成/聚合复用原则（Composite/Aggregate Reuse Principle，C/ARP）：尽量使用合成/聚合，而不是用过继承达到复用的目的 最少知识原则（Least Knowledge Principle，LKP）或迪米特法则（Law of Demeter， LOD）：一个软件实体应当尽可能少的与其他实体发生相互作用。 2 UML类图 3 Spring使用了哪些设计模式 工厂设计模式：Spring使用工厂模式通过Beanfactory、ApplictionContext创建Bean对象 代理设计模式：Spring AOP功能的实现 单例设计模式：Spring中的Bean默认都是单例的 模板方法模式：Spring中jdbcTemplate、hibernateTemplate等以Template结尾对数据库操作的类 包装器设计模式： 观察者模式：Spring事件驱动模型 适配器模式：Spring AOP的增强或者通知使用到了适配器模式，Spring MVC中也使用了适配器模式适配Controller 4 JDK使用了哪些设计模式 桥接模式 适配器模式 组合模式 装饰器模式 享元模式 代理模式 抽象工厂模式 建造者模式 工厂方法 原型模式 单例模式 责任链模式 命令模式 解释器模型 中介者模式 备忘录模式 空对象模式 观察者模式 状态模式 策略模式 模板方法模式 访问者模式 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/designmode/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8Euml%E7%B1%BB%E5%9B%BE/","summary":"\u003ch1 id=\"软件设计原则与uml类图\"\u003e软件设计原则与UML类图\u003c/h1\u003e\n\u003ch1 id=\"1-软件设计原则\"\u003e1 软件设计原则\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e开闭原则（Open Closed Principle， OCP）：对扩展开发，对修改关闭\u003c/li\u003e\n\u003cli\u003e单一职责原则（Single Responsibility Principle， SRP）：一个类只负责一个功能领域中的相应职责\u003c/li\u003e\n\u003cli\u003e里氏替换原则（Liskov Substitution Principle， LSP）：所有引用基类的地方必须能透明地使用其子类对象\u003c/li\u003e\n\u003cli\u003e依赖倒置原则（Dependency Inversion Principle， DIP）：依赖于抽象，不能依赖于具体实现\u003c/li\u003e\n\u003cli\u003e接口隔离原则（Interface Segregation Principle，ISP）：类之间地依赖关系应该建立在最小的接口上\u003c/li\u003e\n\u003cli\u003e合成/聚合复用原则（Composite/Aggregate Reuse Principle，C/ARP）：尽量使用合成/聚合，而不是用过继承达到复用的目的\u003c/li\u003e\n\u003cli\u003e最少知识原则（Least Knowledge Principle，LKP）或迪米特法则（Law of Demeter， LOD）：一个软件实体应当尽可能少的与其他实体发生相互作用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"2-uml类图\"\u003e2 UML类图\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/9cf5f1f02dffef4762ecb406ddcdd463/c3eacacee458e492a10fde1b3ee909b8.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003ch1 id=\"3-spring使用了哪些设计模式\"\u003e3 Spring使用了哪些设计模式\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e工厂设计模式：Spring使用工厂模式通过Beanfactory、ApplictionContext创建Bean对象\u003c/li\u003e\n\u003cli\u003e代理设计模式：Spring AOP功能的实现\u003c/li\u003e\n\u003cli\u003e单例设计模式：Spring中的Bean默认都是单例的\u003c/li\u003e\n\u003cli\u003e模板方法模式：Spring中jdbcTemplate、hibernateTemplate等以Template结尾对数据库操作的类\u003c/li\u003e\n\u003cli\u003e包装器设计模式：\u003c/li\u003e\n\u003cli\u003e观察者模式：Spring事件驱动模型\u003c/li\u003e\n\u003cli\u003e适配器模式：Spring AOP的增强或者通知使用到了适配器模式，Spring MVC中也使用了适配器模式适配Controller\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"4-jdk使用了哪些设计模式\"\u003e4 JDK使用了哪些设计模式\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e桥接模式\u003c/li\u003e\n\u003cli\u003e适配器模式\u003c/li\u003e\n\u003cli\u003e组合模式\u003c/li\u003e\n\u003cli\u003e装饰器模式\u003c/li\u003e\n\u003cli\u003e享元模式\u003c/li\u003e\n\u003cli\u003e代理模式\u003c/li\u003e\n\u003cli\u003e抽象工厂模式\u003c/li\u003e\n\u003cli\u003e建造者模式\u003c/li\u003e\n\u003cli\u003e工厂方法\u003c/li\u003e\n\u003cli\u003e原型模式\u003c/li\u003e\n\u003cli\u003e单例模式\u003c/li\u003e\n\u003cli\u003e责任链模式\u003c/li\u003e\n\u003cli\u003e命令模式\u003c/li\u003e\n\u003cli\u003e解释器模型\u003c/li\u003e\n\u003cli\u003e中介者模式\u003c/li\u003e\n\u003cli\u003e备忘录模式\u003c/li\u003e\n\u003cli\u003e空对象模式\u003c/li\u003e\n\u003cli\u003e观察者模式\u003c/li\u003e\n\u003cli\u003e状态模式\u003c/li\u003e\n\u003cli\u003e策略模式\u003c/li\u003e\n\u003cli\u003e模板方法模式\u003c/li\u003e\n\u003cli\u003e访问者模式\u003c/li\u003e\n\u003c/ul\u003e","title":"软件设计原则与UML类图"},{"content":"零碎知识点 1 Java 原子类中，CAS是如何保证原子性的？ 原子类中，用volatile修饰value，并使用unsafe类获取到value的地址偏移量，在执行更新操作时，使用unsafe类执行compareAndSwap操作，而该方法是一个Native方法，底层是通过汇编指令CMPXCHG加上Lock前缀，保证内存区域只允许一个线程访问。\n2 运行时多态和编译时多态 运行时多态：通过基类或者抽象类、虚函数等调用具体实例的方法，在运行时才可以确定具体方法，这种情况时运行时多态。\n编译时多态：函数的重载、模板类等，在编译时即可确定具体的方法，这种情况是编译时多态。\n3 B树的具体应用 降低磁盘IO？\n4 C++和Java的堆栈有什么区别 栈内存更快，但是堆内存更加灵活。\n编译期间没有办法确定堆空间上的内存分配情况，堆上分配的内存需要回收（C++需要程序员手动回收，而Java有自动垃圾回收机制）；而栈内存的内存回收由系统管理。\nC++的对象既可以创建在堆上，也可以创建在栈上，Java绝大多数对象都创建在堆上。Java中的栈一般情况只存储引用和基本变量。\nC++用alloca申请栈内存，new申请堆内存，malloc申请自由存储区，此外还有全局（静态）存储区用于存储全局变量和静态变量，常量存储区存储常量。\n注意：栈中申请的内存都需要使用指针指向，Java也是如此，只不过对程序员屏蔽掉了指针。\n5 C++的内存分布 由上至下分别是：栈、堆、全局区、常量区、代码区。\n堆区内存向上增长，栈区内存向下增长。\nhttps://blog.csdn.net/qq_72982923/article/details/132197354\n6 Java中的对象内存分配 栈上内存分配：当对象的生命周期与入栈的方法一致时，JVM的对象逃逸分析会让该对象直接在栈上进行空间分配，从而减少GC压力\n堆上内存分配：对象优先在eden区分配，大对象直接进入老年代，eden区对象经过GC后，如果存活，则存入survivor区并增加年龄，当年龄达到阈值，会进入老年代（注意：当survivor区内存不足时，会动态调整年龄阈值，将对象送入老年代）。老年代空间分配担保机制：指的是minorGC前会计算老年代剩余空间和年轻代中的对象大小，如果空间不足，则触发一次FullGC，如果垃圾回收后空间不足则会触发OOM。\n7 进程的内存分配 内核区（用户不可读写）高地址段\n栈（向下增长）\n堆（向上增长）\n数据段\n代码段\nhttps://blog.csdn.net/xyxzlsld666/article/details/132393872\n8 Redis中的ListPack是什么 listpack：…\n：4字节，表示listpack占用字节数\n：2字节，元素个数\n：entry\n：1字节，结束标志，0xFF\nentry：\n：编码类型\n：元素数据\n：entry长度，最高位作为标记位，表示是否为element的最后一个字节，并采用大端存储方式。\n=\nListPack中Entry改为记录自身长度，从而避免了ziplist的连锁更新问题。\n反向查询：通过读取前一个元素的字节，逐步向前读取至element-tot-len最后一个字节，得到偏移值，从而访问上一个元素。\nhttps://blog.csdn.net/ldw201510803006/article/details/122420585\nhttps://blog.csdn.net/Orange_pa/article/details/127847964\n9 进程之间的通信方式 10 进程之间如何通过管道通信 进程间的通信方式——pipe（管道）-CSDN博客\n11 RPC 12 发送数据后TCP层面发生的事情 ","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/","summary":"\u003ch1 id=\"零碎知识点\"\u003e零碎知识点\u003c/h1\u003e\n\u003ch1 id=\"1-java-原子类中cas是如何保证原子性的\"\u003e1 Java 原子类中，CAS是如何保证原子性的？\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e原子类中，用volatile修饰value，并使用unsafe类获取到value的地址偏移量，在执行更新操作时，使用unsafe类执行compareAndSwap操作，而该方法是一个Native方法，底层是通过汇编指令CMPXCHG加上Lock前缀，保证内存区域只允许一个线程访问。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"2-运行时多态和编译时多态\"\u003e2 运行时多态和编译时多态\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e运行时多态：通过基类或者抽象类、虚函数等调用具体实例的方法，在运行时才可以确定具体方法，这种情况时运行时多态。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e编译时多态：函数的重载、模板类等，在编译时即可确定具体的方法，这种情况是编译时多态。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"3-b树的具体应用\"\u003e3 B树的具体应用\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e降低磁盘IO？\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"4-c和java的堆栈有什么区别\"\u003e4 C++和Java的堆栈有什么区别\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e栈内存更快，但是堆内存更加灵活。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e编译期间没有办法确定堆空间上的内存分配情况，堆上分配的内存需要回收（C++需要程序员手动回收，而Java有自动垃圾回收机制）；而栈内存的内存回收由系统管理。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eC++的对象既可以创建在堆上，也可以创建在栈上，Java绝大多数对象都创建在堆上。Java中的栈一般情况只存储引用和基本变量。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eC++用alloca申请栈内存，new申请堆内存，malloc申请自由存储区，此外还有全局（静态）存储区用于存储全局变量和静态变量，常量存储区存储常量。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注意：栈中申请的内存都需要使用指针指向，Java也是如此，只不过对程序员屏蔽掉了指针。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"5-c的内存分布\"\u003e5 C++的内存分布\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e由上至下分别是：栈、堆、全局区、常量区、代码区。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e堆区内存向上增长，栈区内存向下增长。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://blog.csdn.net/qq_72982923/article/details/132197354\"\u003ehttps://blog.csdn.net/qq_72982923/article/details/132197354\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"6-java中的对象内存分配\"\u003e6 Java中的对象内存分配\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e栈上内存分配：当对象的生命周期与入栈的方法一致时，JVM的对象逃逸分析会让该对象直接在栈上进行空间分配，从而减少GC压力\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e堆上内存分配：对象优先在eden区分配，大对象直接进入老年代，eden区对象经过GC后，如果存活，则存入survivor区并增加年龄，当年龄达到阈值，会进入老年代（注意：当survivor区内存不足时，会动态调整年龄阈值，将对象送入老年代）。老年代空间分配担保机制：指的是minorGC前会计算老年代剩余空间和年轻代中的对象大小，如果空间不足，则触发一次FullGC，如果垃圾回收后空间不足则会触发OOM。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"7-进程的内存分配\"\u003e7 进程的内存分配\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e内核区（用户不可读写）高地址段\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e栈（向下增长）\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e堆（向上增长）\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e数据段\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e代码段\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://blog.csdn.net/xyxzlsld666/article/details/132393872\"\u003ehttps://blog.csdn.net/xyxzlsld666/article/details/132393872\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"8-redis中的listpack是什么\"\u003e8 Redis中的ListPack是什么\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003elistpack：\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e…\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003e：4字节，表示listpack占用字节数\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003e：2字节，元素个数\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003e：entry\u003c/p\u003e","title":"零碎知识点"},{"content":"1 TCP/IP网络模型 应用层：工作在用户态，有HTTP、FTP、Telnet、DNS、SMTP协议。 传输层：为应用层提供网络支持作用，有TCP和UDP协议。 网络层：负责实际的传输工作，将数据从一个设备传输到另一个设备，有IP协议等。 网络接口层：为网络层提供**“链路级别”**的传输服务，负责在以太网、Wifi这样的底层网络上发送原始数据包，工作在网卡这个层次，使用MAC地址标识网络上的设备。 网络接口层的传输单位是帧（frame），IP 层的传输单位是包（packet），TCP 层的传输单位是段（segment），HTTP 的传输单位则是消息或报文（message）。但这些名词并没有什么本质的区分，可以统称为数据包。\n2 从键入网址到网页显示，期间发生了什么？ 浏览器解析URL，生成HTTP请求\n通过DNS查询真实地址：浏览器先查看自身缓存，然后询问操作系统，操作系统查看自身缓存，然后查看hosts文件，最后询问本地DNS服务器。DNS有轮询和递归两种访问策略，DNS客户端和本地服务器之间是递归策略，而本地服务器和其他DNS服务器之间是迭代轮询。\n将HTTP数据报文的传输工作交给操作协调的协议栈。\n应用程序调用socket库，委托协议栈工作。 协议栈的上半部分有两块，分别是负责收发数据的 TCP 和 UDP 协议，这两个传输协议会接受应用层的委托执行收发数据的操作。 协议栈的下面一半是用 IP 协议控制网络包收发操作，在互联网上传数据时，数据会被切分成一块块的网络包，而将网络包发送给对方的操作就是由 IP 负责的。 此外 IP 中还包括 ICMP 协议和 ARP 协议。 ICMP 用于告知网络包传送过程中产生的错误以及各种控制信息。 ARP 用于根据 IP 地址查询相应的以太网 MAC 地址。 IP 下面的网卡驱动程序负责控制网卡硬件，而最下面的网卡则负责完成实际的收发操作，也就是对网线中的信号执行发送和接收操作。 通过网卡传输二进制数据\n交换机和路由器转发数据包\n服务端层层拆包\n返回响应走相同流程，浏览器收到响应后渲染页面\n3 Linux系统是如何收发网络包的？ 应用程序需要通过系统调用，来跟 Socket 层进行数据交互； Socket 层的下面就是传输层、网络层和网络接口层； 最下面的一层，则是网卡驱动程序和硬件网卡设备； 接收网络包 NAPI机制：当网络包到达时，通过DMA技术写入置顶内存，接着网卡向CPU发起硬件中断，CPU根据中断表调用注册的中断处理函数，硬件中断处理函数首先暂时屏蔽中断，表示已经知道内存中有数据了，下次收到数据包直接写入内存，不需要通知CPU，最后发起软中断，软中断轮询处理数据，当最后一个数据不足指定大小时，恢复刚刚屏蔽的中断。\n数据包首先进入网络接口层，检查合法性，不合法则丢弃，合法则找出网络包的上层协议类型（IPv4或IPv6）然后去掉帧头和帧尾，交给网络层。 网络层取出IP包，判断下一步走向（转发或处理），如果是处理则判断上层协议类型是TCP还是UDP，去掉IP头部后交给传输层。 传输层取出TCP或UDP头部，根据四元组（源IP、源端口、目的IP、目的端口）作为标识，找出对应的Socket，并把数据放入Socket的缓冲接收区。 应用层调用Socket接口，将内核Socket接收缓冲区数据拷贝至应用层缓冲区，唤醒用户进程。 发送网络包 应用程序调用Socket发送数据包接口，发生系统调用，从用户态切换为内核态，内核神器一个内核态的sk_buff，将爱过你用户待发送的数据加入到发送缓冲区。\n网络协议栈从Socket发送缓冲区取出sk_buff，按照TCP/IP协议栈从上到下逐层处理。\n如果是TCP协议，测绘拷贝一个sk_buff副本，因为sk_buff后续调用网络层到最终发送完成时，会被释放掉，而TCP支持丢失重传，所以在收到ACK之前sk_buff不能被删除，所以内核实际上每次调用网卡发送时，实际上传出去的是拷贝，直到收到ACK才删除。\n对sk_buff填充TCP头部（sk_buff可以表示各个层的数据）\n当接收报文时，从网卡驱动开始，通过协议栈层层往上传送数据报，通过增加 skb-\u0026gt;data 的值，来逐步剥离协议首部。\n当要发送报文时，创建 sk_buff 结构体，数据缓存区的头部预留足够的空间，用来填充各层首部，在经过各下层协议时，通过减少 skb-\u0026gt;data 的值来增加协议首部。\n然后交给网络层，在网络层里会做这些工作：选取路由（确认下一跳的 IP）、填充 IP 头、netfilter 过滤、对超过 MTU 大小的数据包进行分片。处理完这些工作后会交给网络接口层处理。\n网络接口层会通过 ARP 协议获得下一跳的 MAC 地址，然后对 sk_buff 填充帧头和帧尾，接着将 sk_buff 放到网卡的发送队列中。\n这一些工作准备好后，会触发「软中断」告诉网卡驱动程序，这里有新的网络包需要发送，驱动程序会从发送队列中读取 sk_buff，将这个 sk_buff 挂到 RingBuffer 中，接着将 sk_buff 数据映射到网卡可访问的内存 DMA 区域，最后触发真实的发送。\n当数据发送完成以后，其实工作并没有结束，因为内存还没有清理。当发送完成的时候，网卡设备会触发一个硬中断来释放内存，主要是释放 sk_buff 内存和清理 RingBuffer 内存。\n最后，当收到这个 TCP 报文的 ACK 应答时，传输层就会释放原始的 sk_buff 。\n发送网络数据的时候，涉及几次内存拷贝操作？\n调用发送数据的系统调用的时候，内核会申请一个内核态的 sk_buff 内存，将用户待发送的数据拷贝到 sk_buff 内存，并将其加入到发送缓冲区。 在使用 TCP 传输协议的情况下，从传输层进入网络层的时候，每一个 sk_buff 都会被克隆一个新的副本出来。副本 sk_buff 会被送往网络层，等它发送完的时候就会释放掉，然后原始的 sk_buff 还保留在传输层，目的是为了实现 TCP 的可靠传输，等收到这个数据包的 ACK 时，才会释放原始的 sk_buff 。 当 IP 层发现 sk_buff 大于 MTU 时才需要进行。会再申请额外的 sk_buff，并将原来的 sk_buff 拷贝为多个小的 sk_buff。 参考资料 图解网络介绍 | 小林coding (xiaolincoding.com)\nDNS解析原理:递归 VS 迭代 - 简书 (jianshu.com)\n","permalink":"https://roaraeonliou.github.io/posts/interviewnotes/new/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/","summary":"\u003ch2 id=\"1-tcpip网络模型\"\u003e1 TCP/IP网络模型\u003c/h2\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cul\u003e\n\u003cli\u003e应用层：工作在用户态，有HTTP、FTP、Telnet、DNS、SMTP协议。\u003c/li\u003e\n\u003cli\u003e传输层：为应用层提供网络支持作用，有TCP和UDP协议。\u003c/li\u003e\n\u003cli\u003e网络层：负责实际的传输工作，将数据从一个设备传输到另一个设备，有IP协议等。\u003c/li\u003e\n\u003cli\u003e网络接口层：为网络层提供**“链路级别”**的传输服务，负责在以太网、Wifi这样的底层网络上发送原始数据包，工作在网卡这个层次，使用MAC地址标识网络上的设备。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e网络接口层的传输单位是帧（frame），IP 层的传输单位是包（packet），TCP 层的传输单位是段（segment），HTTP 的传输单位则是消息或报文（message）。但这些名词并没有什么本质的区分，可以统称为数据包。\u003c/p\u003e\n\u003ch2 id=\"2-从键入网址到网页显示期间发生了什么\"\u003e2 从键入网址到网页显示，期间发生了什么？\u003c/h2\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器解析URL，生成HTTP请求\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e通过DNS查询真实地址：浏览器先查看自身缓存，然后询问操作系统，操作系统查看自身缓存，然后查看hosts文件，最后询问本地DNS服务器。DNS有轮询和递归两种访问策略，DNS客户端和本地服务器之间是递归策略，而本地服务器和其他DNS服务器之间是迭代轮询。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e将HTTP数据报文的传输工作交给操作协调的协议栈。\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cul\u003e\n\u003cli\u003e应用程序调用socket库，委托协议栈工作。\u003c/li\u003e\n\u003cli\u003e协议栈的上半部分有两块，分别是负责收发数据的 TCP 和 UDP 协议，这两个传输协议会接受应用层的委托执行收发数据的操作。\u003c/li\u003e\n\u003cli\u003e协议栈的下面一半是用 IP 协议控制网络包收发操作，在互联网上传数据时，数据会被切分成一块块的网络包，而将网络包发送给对方的操作就是由 IP 负责的。\n\u003cul\u003e\n\u003cli\u003e此外 IP 中还包括 \u003ccode\u003eICMP\u003c/code\u003e 协议和 \u003ccode\u003eARP\u003c/code\u003e 协议。\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eICMP\u003c/code\u003e 用于告知网络包传送过程中产生的错误以及各种控制信息。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eARP\u003c/code\u003e 用于根据 IP 地址查询相应的以太网 MAC 地址。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eIP 下面的网卡驱动程序负责控制网卡硬件，而最下面的网卡则负责完成实际的收发操作，也就是对网线中的信号执行发送和接收操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e通过网卡传输二进制数据\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e交换机和路由器转发数据包\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e服务端层层拆包\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e返回响应走相同流程，浏览器收到响应后渲染页面\u003c/p\u003e","title":"计算机网络基础"},{"content":"Preparation Github Account Needed: First, you need a github account. If you don\u0026rsquo;t have, don\u0026rsquo;t know, and don\u0026rsquo;t even ask google how to do, just see this blog HOW TO GET A GITHUB ACCOUNT. Two Special Repository Needed: Your need to create your github.io repository and fork SlothBlog repository, the forked repository we will call it \u0026ldquo;shadow repo\u0026rdquo; in the following content. We also prepare a guide book for this step here. Two Branch Needed: Please make sure that your github.io repository have \u0026ldquo;main\u0026rdquo; branch and \u0026ldquo;static\u0026rdquo; branch, and each of them have at least one commit. Simple Guide Generate a GitHub token, and make sure that this token have enough authority.Then open the setting page of shadow repo, add two repository secret for actions.\nFor the first one, name it \u0026ldquo;BLOG_TOKEN\u0026rdquo; or any other you like, and copy your generated GitHub token in the secret box. For the second one, name it \u0026ldquo;USERNAME\u0026rdquo; or anything you like, and type your github account name in the secret box.\nClone the shadow repository to your computer.\nIf you do not following the 1st step to set secret name, now you need to config the .github/workflow/afterPush.yml, this is the github action file.\nConfig the config/config.yaml\nReplace \u0026lsquo;github_user\u0026rsquo; with your github username in the Basic/HttpBasePath field.\nSet up your name in the GlobalHeaderConfig/Author field.\nConfig the config/hugo.yaml\nReplace \u0026lsquo;github_user\u0026rsquo; with your github username in the baseURL field.\nAnd if you want to make this blog more custom, you can visit the hugo official wiki .\nWrite your markdown blog in content/posts, and push it to the main branch of shadow repo, you will get you static blog website in \u0026ldquo;your_github_username.github.io\u0026rdquo;.\n","permalink":"https://roaraeonliou.github.io/tutorial/how_to_build_this_blog_website/","summary":"\u003ch3 id=\"preparation\"\u003ePreparation\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eGithub Account Needed:\u003c/strong\u003e First, you need a github account. If you don\u0026rsquo;t have, don\u0026rsquo;t know, and don\u0026rsquo;t even ask google how to do, just see this blog \u003ca href=\"/tutorial/how_to_get_a_github_account\"\u003eHOW TO GET A GITHUB ACCOUNT\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTwo Special Repository Needed:\u003c/strong\u003e Your need to create your github.io repository and fork  \u003ca href=\"https://github.com/roaraeonliou/SlothBlog\"\u003eSlothBlog\u003c/a\u003e repository, the forked repository we will call it \u003cstrong\u003e\u0026ldquo;shadow repo\u0026rdquo;\u003c/strong\u003e in the following content. We also prepare a guide book for this step \u003ca href=\"/tutorial/how_to_create_a_repostory\"\u003ehere\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTwo Branch Needed:\u003c/strong\u003e Please make sure that your github.io repository have \u0026ldquo;main\u0026rdquo; branch and \u0026ldquo;static\u0026rdquo; branch, and each of them have at least one commit.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"simple-guide\"\u003eSimple Guide\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eGenerate a GitHub token, and make sure that this token have enough authority.Then open the setting page of shadow repo, add two repository secret for actions.\u003c/p\u003e","title":"How to build this blog website"},{"content":"Create Repository Create the io repository\nClick create repository button, and chose \u0026ldquo;new repository\u0026rdquo;.\nEnter the repository name, which must match the \u0026ldquo;username.github.io\u0026rdquo; format, and don\u0026rsquo;t forget replace the \u0026ldquo;username\u0026rdquo; with yours.\nScroll all the way down, and click the \u0026ldquo;create repository\u0026rdquo; button. Fork the RoaraeonLiou/SlothBlog repository.\n","permalink":"https://roaraeonliou.github.io/tutorial/how_to_create_a_repostory/","summary":"\u003ch3 id=\"create-repository\"\u003eCreate Repository\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eCreate the io repository\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eClick create repository button, and chose \u0026ldquo;new repository\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/670e6b16a224f3d86c91c74ac7f2e5e3/40231d7cb1a52b11fa3758a32d17a14e.png\" alt=\"image-20240627222219019\"  /\u003e\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eEnter the repository name, which must match the \u0026ldquo;username.github.io\u0026rdquo; format, and don\u0026rsquo;t forget replace the \u0026ldquo;username\u0026rdquo; with yours.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/670e6b16a224f3d86c91c74ac7f2e5e3/2cf9229c3ff4e36e84f3e446667bf6b3.png\" alt=\"image-20240627222442905\"  /\u003e\n\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003eScroll all the way down, and click the \u0026ldquo;create repository\u0026rdquo; button.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFork the \u003ca href=\"https://github.com/RoaraeonLiou/SlothBlog\"\u003eRoaraeonLiou/SlothBlog\u003c/a\u003e repository.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/670e6b16a224f3d86c91c74ac7f2e5e3/490f1a9305b8576fa52f39d3814a0b48.png\" alt=\"image-20240627222915830\"  /\u003e\n\u003c/p\u003e","title":"How to create a repository"},{"content":"Get a Github Account Here is the link of GitHub , click it and sign up a github account.\nIf you really don\u0026rsquo;t know how to do it, no worry, just follow me.\nClick sign up button\nClick the continue button\nSet password\nSet username\nClick the continue button all the way, and follow the guidance of github to verify your account.\nWhen you finish the 5th step, you will receive an email, which contains the code that you need to fill in the boxes shown in the following picture.\nGod job, my sweety baby! Now you already have a github account!\n","permalink":"https://roaraeonliou.github.io/tutorial/how_to_get_a_github_account/","summary":"\u003ch3 id=\"get-a-github-account\"\u003eGet a Github Account\u003c/h3\u003e\n\u003cp\u003eHere is the link of \u003ca href=\"https://github.com/\"\u003eGitHub\u003c/a\u003e , click it and sign up a github account.\u003c/p\u003e\n\u003cp\u003eIf you really don\u0026rsquo;t know how to do it, no worry, just follow me.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eClick sign up button\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/a740f8806e53c74af7add0d048655bba/3c587c959ec46dd831f877877da952e0.png\" alt=\"image-20240627220250267\"  /\u003e\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eClick the continue button\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/a740f8806e53c74af7add0d048655bba/67b1d3d6814e28135a2910e0480297e2.png\" alt=\"image-20240627220430552\"  /\u003e\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSet password\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/a740f8806e53c74af7add0d048655bba/0afd9a2735963bee9b185ce60873ab40.png\" alt=\"image-20240627220608513\"  /\u003e\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSet username\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/a740f8806e53c74af7add0d048655bba/459803a7850f0938408c0f72aed17d59.png\" alt=\"image-20240627221334221\"  /\u003e\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eClick the continue button all the way, and follow the guidance of github to verify your account.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWhen you finish the 5th step, you will receive an email, which contains the code that you need to fill in the boxes shown in the following picture.\u003c/p\u003e","title":"How to get a github account"},{"content":"Organization See Content Organization.\n. └── content ├── posts | ├── firstpost.md // \u0026lt;- https://xxx.github.io/posts/firstpost/ | ├── happy | | └── ness.md // \u0026lt;- https://xxx.github.io/posts/happy/ness/ | └── secondpost.md // \u0026lt;- https://xxx.github.io/posts/secondpost/ └── docs ├── first.md // \u0026lt;- https://xxx.github.io/docs/first/ └── second.md // \u0026lt;- https://xxx.github.io/docs/second/ Header If you want to do some basic settings for your blog, you can add your own header definition.\nFields Basic Header Fields +++ title = \u0026#34;title\u0026#34; description = \u0026#34;write your description\u0026#34; author = \u0026#34;rltea\u0026#34; slug = \u0026#34;define_your_slug\u0026#34; draft = false date = \u0026#34;2024-06-25\u0026#34; lastmod = \u0026#34;2024-06-28\u0026#34; url = \u0026#34;/posts/new_blog\u0026#34; tags = [\u0026#34;new\u0026#34;, \u0026#34;blog\u0026#34;] include_tags = [\u0026#34;test\u0026#34;, \u0026#34;old\u0026#34;] exclude_tags = [\u0026#34;sloth\u0026#34;] categories = [\u0026#34;new\u0026#34;, \u0026#34;blog\u0026#34;] include_categories = [\u0026#34;old\u0026#34;, \u0026#34;test\u0026#34;] exclude_categories = [\u0026#34;sloth\u0026#34;] status = \u0026#34;update\u0026#34; +++ blog content As shown in above, between the two \u0026ldquo;+++\u0026rdquo; lines, there are the header information of one markdown blog file which in toml format. You can also define the header in yaml format enclosed in \u0026ldquo;---\u0026rdquo;, or write directly in json format.\nIt is worth noting that these header fields can be omitted, because our blog-processor will process the \u0026ldquo;raw\u0026rdquo; markdown file and add a extra header to it.\nNow we will introduce the function of each field:\ntitle: The title of this blog, the default value is the filename.\ndescription: The description of the content.\nauthor: The author of this blog.\ndate: The created date of this blog, but you can change it any you want.\nslug: The token to appear in the tail of the URL.\nurl: The full path to the content from the web root.\ndraft: If set this as true, this file will not generate a web page, the default value is false.\nlastmod: Last modified time.\ntags: Tag list. If this value is set, it will overwrite the tags defined in the directory-level header information.\ninclude_tags: A list of additional tags. This value will be merged with tags, i.e., the union is taken.\nexclude_tags: A list of tags to exclude. This value will be subtracted from tags.\ncategories: Carerogy list. If this value is set, it will overwrite the categories defined in the directory-level header information.\ninclude_categories: A list of additional categories. This value will be merged with categories, i.e., the union is taken.\nexclude_categories: A list of categories to exclude. This value will be subtracted from categories.\nstatus: This value is mainly used to maintain whether the blog file has been modified. As long as this value is different from the last setting, the blog file will be weakly updated when submitted (updated content, local image files with the same name are not generated repeatedly). When the value is set to \u0026ldquo;update\u0026rdquo;, the blog file will be strongly updated when submitted (the content and the associated local image files are resubmitted).\nOther Fields type: The type of this blog, if the value is \u0026ldquo;special\u0026rdquo;, this blog will not be listed.\ncover: The cover of this blog.\nplaceholder: Used for search box.\nlayout: Used for special pages.\nDirectory-level Header File We support directory-level header files. Assume that you create the following .headers.toml file in the content/posts/section directory. When all markdown files in this directory (excluding subdirectories) are processed, the header information defined in this file will be added. The header field in the markdown takes precedence over the header field at the directory level.\ntags = [\u0026#34;test\u0026#34;, \u0026#34;old\u0026#34;] categories = [\u0026#34;test\u0026#34;, \u0026#34;old\u0026#34;] Content See markdown guide.\n","permalink":"https://roaraeonliou.github.io/tutorial/organize_blogs/","summary":"\u003ch2 id=\"organization\"\u003eOrganization\u003c/h2\u003e\n\u003cp\u003eSee \u003ca href=\"https://www.gohugo.org/doc/content/organization/\"\u003eContent Organization\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"err\"\u003e└──\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003econtent\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"err\"\u003e├──\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eposts\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"err\"\u003e├──\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efirstpost\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emd\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c1\"\u003e// \u0026lt;- https://xxx.github.io/posts/firstpost/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"err\"\u003e├──\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehappy\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"err\"\u003e└──\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eness\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emd\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"c1\"\u003e// \u0026lt;- https://xxx.github.io/posts/happy/ness/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e   \u003c/span\u003e\u003cspan class=\"err\"\u003e└──\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esecondpost\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emd\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// \u0026lt;- https://xxx.github.io/posts/secondpost/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"err\"\u003e└──\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edocs\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"err\"\u003e├──\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emd\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"c1\"\u003e// \u0026lt;- https://xxx.github.io/docs/first/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"err\"\u003e└──\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emd\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"c1\"\u003e// \u0026lt;- https://xxx.github.io/docs/second/\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"header\"\u003eHeader\u003c/h2\u003e\n\u003cp\u003eIf you want to do some basic settings for your blog, you can add your own header definition.\u003c/p\u003e\n\u003ch3 id=\"fields\"\u003eFields\u003c/h3\u003e\n\u003ch4 id=\"basic-header-fields\"\u003eBasic Header Fields\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-markdown\" data-lang=\"markdown\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e+++\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etitle = \u0026#34;title\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edescription = \u0026#34;write your description\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eauthor = \u0026#34;rltea\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eslug = \u0026#34;define_your_slug\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edraft = false\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edate = \u0026#34;2024-06-25\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003elastmod = \u0026#34;2024-06-28\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eurl = \u0026#34;/posts/new_blog\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etags = [\u0026#34;new\u0026#34;, \u0026#34;blog\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003einclude_tags = [\u0026#34;test\u0026#34;, \u0026#34;old\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eexclude_tags = [\u0026#34;sloth\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecategories = [\u0026#34;new\u0026#34;, \u0026#34;blog\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003einclude_categories = [\u0026#34;old\u0026#34;, \u0026#34;test\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eexclude_categories = [\u0026#34;sloth\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003estatus = \u0026#34;update\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e+++\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eblog content\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAs shown in above, between the two \u0026ldquo;\u003ccode\u003e+++\u003c/code\u003e\u0026rdquo; lines, there are the header information of one markdown blog file which in toml format. You can also define the header in yaml format enclosed in \u0026ldquo;\u003ccode\u003e---\u003c/code\u003e\u0026rdquo;, or write directly in json format.\u003c/p\u003e","title":"How to organize the blogs"},{"content":"Giscus comment We use the github app giscus to make the comment function works.\nYou need to install this app to your username.github.io repository, and than configure it in giscus app page, enter your io repository, and choose a mapping rule(we suggest the Discussion title contains page \u0026lt;title\u0026gt; mapping rule).\nCopy the generated script, copy it in layouts/partials/comment.html.\n","permalink":"https://roaraeonliou.github.io/tutorial/support%20_comment/","summary":"\u003ch3 id=\"giscus-comment\"\u003eGiscus comment\u003c/h3\u003e\n\u003cp\u003eWe use the github app \u003ca href=\"https://github.com/marketplace/giscus\"\u003egiscus\u003c/a\u003e  to make the comment function works.\u003c/p\u003e\n\u003cp\u003eYou need to install this app to your username.github.io repository, and than configure it in \u003ca href=\"https://giscus.app/\"\u003egiscus app page\u003c/a\u003e, enter your io repository, and choose a mapping rule(we suggest the \u003ccode\u003eDiscussion title contains page \u0026lt;title\u0026gt;\u003c/code\u003e mapping rule).\u003c/p\u003e\n\u003cp\u003eCopy the generated script, copy it in \u003ccode\u003elayouts/partials/comment.html\u003c/code\u003e.\u003c/p\u003e","title":"Support Comment"},{"content":"Support Latex According to the hugo official document of release v0.122.0, we already make the mathematics support as defalut if you use the default theme PaperMod.\nIf you want to use other themes, make sure that you have set the following config in config/hugo.yaml.\nmarkup: goldmark: extensions: passthrough: delimiters: block: - - \\[ - \\] - - $$ - $$ inline: - - \\( - \\) - - $ - $ enable: true params: math: true And create the layouts/partials/math.html file which content as follow:\n\u0026lt;script id=\u0026#34;MathJax-script\u0026#34; async src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; MathJax = { tex: { displayMath: [[\u0026#39;\\\\[\u0026#39;, \u0026#39;\\\\]\u0026#39;], [\u0026#39;$$\u0026#39;, \u0026#39;$$\u0026#39;]], // block inlineMath: [[\u0026#39;\\\\(\u0026#39;, \u0026#39;\\\\)\u0026#39;], [\u0026#39;$\u0026#39;, \u0026#39;$\u0026#39;]] // inline } }; \u0026lt;/script\u0026gt; After that, add the following code in the layouts/_default/baseof.html of your customized theme.\n\u0026lt;head\u0026gt; ... {{ if .Param \u0026#34;math\u0026#34; }} {{ partialCached \u0026#34;math.html\u0026#34; . }} {{ end }} ... \u0026lt;/head\u0026gt; Now your static blog webstie can support the mathematics, for more information please see the hugo official document of release v0.122.0.\nHere are some examples of block and inline formulas:\n$$ \\begin{array}{c} A={\\left[ a_{ij}\\right]_{m \\times n}},B={\\left[ b_{ij}\\right]_{n \\times s}} \\\\ c_{ij}= \\sum \\limits_{k=1}^{{n}}a_{ik}b_{kj} \\\\ C=AB=\\left[ c_{ij}\\right]_{m \\times s} = \\left[ \\sum \\limits_{k=1}^{n}a_{ik}b_{kj}\\right]_{m \\times s} \\end{array} $$This is a sample of inline formula: $\\left(x-1\\right)\\left(x+3\\right) $\n","permalink":"https://roaraeonliou.github.io/tutorial/support_latex/","summary":"\u003ch2 id=\"support-latex\"\u003eSupport Latex\u003c/h2\u003e\n\u003cp\u003eAccording to the \u003ca href=\"https://gohugo.io/content-management/mathematics/\"\u003ehugo official document of release v0.122.0\u003c/a\u003e, we already make the mathematics support as defalut if you use the default theme PaperMod.\u003c/p\u003e\n\u003cp\u003eIf you want to use other themes, make sure that you have set the following config in \u003ccode\u003econfig/hugo.yaml\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003emarkup\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003egoldmark\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003eextensions\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003epassthrough\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003edelimiters\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e\u003cspan class=\"nt\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e- - \u003cspan class=\"l\"\u003e\\[\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e- \u003cspan class=\"l\"\u003e\\]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e- - \u003cspan class=\"l\"\u003e$$\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e- \u003cspan class=\"l\"\u003e$$\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e\u003cspan class=\"nt\"\u003einline\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e- - \u003cspan class=\"l\"\u003e\\(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e- \u003cspan class=\"l\"\u003e\\)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e- - \u003cspan class=\"l\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e- \u003cspan class=\"l\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003eenable\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003emath\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd create the \u003ccode\u003elayouts/partials/math.html\u003c/code\u003e file which content as follow:\u003c/p\u003e","title":"Support Latex"}]