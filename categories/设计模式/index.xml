<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>设计模式 on RLTEA BLOG</title>
    <link>https://roaraeonliou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on RLTEA BLOG</description>
    <image>
      <title>RLTEA BLOG</title>
      <url>https://roaraeonliou.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://roaraeonliou.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.134.3</generator>
    <language>en</language>
    <lastBuildDate>Thu, 26 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://roaraeonliou.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>创建型模式</title>
      <link>https://roaraeonliou.github.io/posts/interviewnotes/designmode/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://roaraeonliou.github.io/posts/interviewnotes/designmode/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;创建型模式&#34;&gt;创建型模式&lt;/h1&gt;
&lt;p&gt;在创建对象的同时，隐藏创建逻辑，不使用new直接实例化对象，程序判断需要创建哪些对象时更加灵活。&lt;/p&gt;
&lt;h1 id=&#34;1-单例模式&#34;&gt;1 单例模式&lt;/h1&gt;
&lt;p&gt;一个单例类在任何情况下只存在一个实例，构造方法私有，由自己创建一个静态变量存储实例，对外提供一个静态共有方法获取实例。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有一个实例，避免了开销&lt;/li&gt;
&lt;li&gt;没有抽象层，难以拓展，与&lt;strong&gt;单一职责&lt;/strong&gt;原则冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;11-常见写法&#34;&gt;1.1 常见写法&lt;/h2&gt;
&lt;h3 id=&#34;111-饿汉式线程安全&#34;&gt;1.1.1 饿汉式，线程安全&lt;/h3&gt;
&lt;p&gt;类一加载就创建对象，比较常用，但是容易产生垃圾对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程安全，不加锁，执行效率高&lt;/li&gt;
&lt;li&gt;缺点：不是懒加载，浪费内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;使用反射破坏单例&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Constructor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;declaredConstructor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getDeclaredConstructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;declaredConstructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setAccessible&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singleton&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;declaredConstructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;newInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;112-懒汉式线程不安全&#34;&gt;1.1.2 懒汉式，线程不安全&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;多线程破坏单例&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;multi thread created singleton:&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;113-懒汉式线程安全&#34;&gt;1.1.3 懒汉式，线程安全&lt;/h3&gt;
&lt;p&gt;加锁&lt;/p&gt;</description>
    </item>
    <item>
      <title>结构性模式</title>
      <link>https://roaraeonliou.github.io/posts/interviewnotes/designmode/%E7%BB%93%E6%9E%84%E6%80%A7%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://roaraeonliou.github.io/posts/interviewnotes/designmode/%E7%BB%93%E6%9E%84%E6%80%A7%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;结构性模式&#34;&gt;结构性模式&lt;/h1&gt;
&lt;p&gt;通过类和接口间的继承和引用关系船舰结构复杂的对象。&lt;/p&gt;
&lt;h1 id=&#34;1-适配器模式&#34;&gt;1 适配器模式&lt;/h1&gt;
&lt;p&gt;当需要将两个不同接口的类进行通信时，在不修改这两个类的前提下，我们可以用中间件完成衔接过程。这个中间件就是适配器，适配器模式就是将一个类的接口，转换为客户期望的另一个接口，让原本不兼容的接口完成无缝对接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类适配器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过类的继承实现适配，继承Target的接口，继承Adaptee的实现&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/24da818bf179debeee0a9368b38bcbbf/47d4dcc89f79756b815ee92f96475904.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对象适配器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过类对象的组合实现适配&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/24da818bf179debeee0a9368b38bcbbf/0b52900c742b74c759a96a823454dd99.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;target：定义Client真正需要的接口。&lt;/li&gt;
&lt;li&gt;Adaptee：其中定义了一个已经存在的接口，也就是我们需要进行适配的接口。&lt;/li&gt;
&lt;li&gt;Adapter：对Adaptee和Target的接口进行适配，保证对target中接口的调用可以间接转换为对Adaptee中接口的调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提高了类的复用&lt;/li&gt;
&lt;li&gt;组合若干关联对象对外提供统一服务接口&lt;/li&gt;
&lt;li&gt;扩展性、灵活性号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;过多使用适配器模式容易导致代码功能和逻辑意义混淆。&lt;/p&gt;
&lt;p&gt;部分语言对继承的限制，可能至多只能适配一个适配者类么日期目标类必须是抽象类。&lt;/p&gt;
&lt;h1 id=&#34;2-桥接模式&#34;&gt;2 桥接模式&lt;/h1&gt;
&lt;h1 id=&#34;3-组合模式&#34;&gt;3 组合模式&lt;/h1&gt;
&lt;h1 id=&#34;4-装饰模式&#34;&gt;4 装饰模式&lt;/h1&gt;
&lt;h1 id=&#34;5-外观模式&#34;&gt;5 外观模式&lt;/h1&gt;
&lt;h1 id=&#34;6-享元模式&#34;&gt;6 享元模式&lt;/h1&gt;
&lt;h1 id=&#34;7-代理模式&#34;&gt;7 代理模式&lt;/h1&gt;
&lt;p&gt;代理模式本质是一个中间件，主要目的时解耦合服务提供者和使用者。&lt;/p&gt;
&lt;p&gt;使用者通过代理间接访问服务提供者，便于后者的封装和控制。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/24da818bf179debeee0a9368b38bcbbf/b1f6473aba8ebef2823b915fccb6458a.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RealSubject：真正的目标对象&lt;/li&gt;
&lt;li&gt;Proxy：目标对象的代理，负责控制和管理目标对象，并间接传递外部对目标对象的访问
&lt;ul&gt;
&lt;li&gt;Remote Proxy：对本地的请求以及参数进行序列化，向远程对象发送请求，并对响应结果进行反序列化，将最终结果反馈给调用者。&lt;/li&gt;
&lt;li&gt;Virtual Proxy：当目标对象创建开销比较大时，可以使用延迟或者异步的方式创建目标对象&lt;/li&gt;
&lt;li&gt;Protection Proxy：细化对目标对象访问权限的控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;静态代理和动态代理的区别&#34;&gt;静态代理和动态代理的区别&lt;/h2&gt;
&lt;p&gt;动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要整堆每个目标类都创建一个代理类。&lt;/p&gt;
&lt;p&gt;静态代理中，一旦新增方法，目标对象和代理对象都要修改。&lt;/p&gt;
&lt;p&gt;JVM中，静态代理在编译时就将接口、实现类、代理类编译成class文件，动态代理是在运行时动态生成字节码文件，加载到JVM中的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>行为型模式</title>
      <link>https://roaraeonliou.github.io/posts/interviewnotes/designmode/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://roaraeonliou.github.io/posts/interviewnotes/designmode/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;行为型模式&#34;&gt;行为型模式&lt;/h1&gt;
&lt;p&gt;通过类之间不同的通信方式实现不同行为。&lt;/p&gt;
&lt;h1 id=&#34;1-访问者模式&#34;&gt;1 访问者模式&lt;/h1&gt;
&lt;h1 id=&#34;2-模板模式&#34;&gt;2 模板模式&lt;/h1&gt;
&lt;h1 id=&#34;3-策略模式&#34;&gt;3 策略模式&lt;/h1&gt;
&lt;p&gt;属于对象的行为模式，针对一组算法，将每一个算法封装到具有共同接口的独立类中，使得他们可以相互替换。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/2f6a2191a3e20c61993374dbccd58378/7c2f78b4a0c07e5e8af59a26dc4431bc.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;4-状态模式&#34;&gt;4 状态模式&lt;/h1&gt;
&lt;h1 id=&#34;5-观察者模式&#34;&gt;5 观察者模式&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/2f6a2191a3e20c61993374dbccd58378/93f17120004fadf5563f064a8b66cb6c.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Subject：抽象被观察对象，仅提供注册和删除观察者对象的接口声明。&lt;/li&gt;
&lt;li&gt;ConcreteSubject：具体被观察对象，该对象中收集了所有需要被通知的观察者，可以动态增删集合中的观察者，当状态发生变化时，会通知所有观察者对象。&lt;/li&gt;
&lt;li&gt;Observer：抽象观察者，为所有观察者定义获得通知的同一接口。&lt;/li&gt;
&lt;li&gt;ConcreteObserver：观察者对象，关注对象为Subject，能接受Subject变化是发出的通知并更新自身状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被观察者和观察者之间时抽象耦合的&lt;/li&gt;
&lt;li&gt;耦合度较低，两者之间关联仅在于消息通知&lt;/li&gt;
&lt;li&gt;被观察者者无需关心他的观察者&lt;/li&gt;
&lt;li&gt;支持广播通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观察者只知道被观察对象发生了变化，不知道过程和原因&lt;/li&gt;
&lt;li&gt;观察者同时可能是被观察者，消息链路可能过长&lt;/li&gt;
&lt;li&gt;如果观察者和被观察者之间产生循环依赖，会导致无限循环&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;6-备忘录模式&#34;&gt;6 备忘录模式&lt;/h1&gt;
&lt;h1 id=&#34;7-中介者模式&#34;&gt;7 中介者模式&lt;/h1&gt;
&lt;h1 id=&#34;8-迭代器模式&#34;&gt;8 迭代器模式&lt;/h1&gt;
&lt;h1 id=&#34;9-解释器模式&#34;&gt;9 解释器模式&lt;/h1&gt;
&lt;h1 id=&#34;10-装饰器模式&#34;&gt;10 装饰器模式&lt;/h1&gt;
&lt;p&gt;对现有类对象进行包装，在不改变类对象和定义情况下，添加额外功能。&lt;/p&gt;
&lt;p&gt;是一种对象结构型模式。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/2f6a2191a3e20c61993374dbccd58378/6cb5c3dc06d00c74cf896f6860a2d2d7.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;Component：对象的接口类，定义装饰对象和被装饰对象的共同接口&lt;/p&gt;
&lt;p&gt;ConcreteComponent：被装饰对象的定义&lt;/p&gt;
&lt;p&gt;Decorator：装饰对象的抽象类，持有一个具体被修饰的对象，并实现接口类继承的公共接口&lt;/p&gt;
&lt;p&gt;ConcreteDecorator：具体的装饰器，负责王被装饰对象添加额外功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;final修饰的类无法使用继承来拓展对象行为，此时可以使用装饰模式进行拓展。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;11-命令模式&#34;&gt;11 命令模式&lt;/h1&gt;
&lt;h1 id=&#34;12-责任链模式&#34;&gt;12 责任链模式&lt;/h1&gt;
&lt;p&gt;一个请求沿着一条链传递，直到该链上某个处理者处理它为止。&lt;/p&gt;
&lt;p&gt;当程序需要使用不同方法处理不同种类请求时，而且请求类型和顺序预先未知时。使用责任链模式，收到请求后，按顺序询问每个处理者是否能够处理&lt;/p&gt;</description>
    </item>
    <item>
      <title>软件设计原则与UML类图</title>
      <link>https://roaraeonliou.github.io/posts/interviewnotes/designmode/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8Euml%E7%B1%BB%E5%9B%BE/</link>
      <pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://roaraeonliou.github.io/posts/interviewnotes/designmode/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8Euml%E7%B1%BB%E5%9B%BE/</guid>
      <description>&lt;h1 id=&#34;软件设计原则与uml类图&#34;&gt;软件设计原则与UML类图&lt;/h1&gt;
&lt;h1 id=&#34;1-软件设计原则&#34;&gt;1 软件设计原则&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;开闭原则（Open Closed Principle， OCP）：对扩展开发，对修改关闭&lt;/li&gt;
&lt;li&gt;单一职责原则（Single Responsibility Principle， SRP）：一个类只负责一个功能领域中的相应职责&lt;/li&gt;
&lt;li&gt;里氏替换原则（Liskov Substitution Principle， LSP）：所有引用基类的地方必须能透明地使用其子类对象&lt;/li&gt;
&lt;li&gt;依赖倒置原则（Dependency Inversion Principle， DIP）：依赖于抽象，不能依赖于具体实现&lt;/li&gt;
&lt;li&gt;接口隔离原则（Interface Segregation Principle，ISP）：类之间地依赖关系应该建立在最小的接口上&lt;/li&gt;
&lt;li&gt;合成/聚合复用原则（Composite/Aggregate Reuse Principle，C/ARP）：尽量使用合成/聚合，而不是用过继承达到复用的目的&lt;/li&gt;
&lt;li&gt;最少知识原则（Least Knowledge Principle，LKP）或迪米特法则（Law of Demeter， LOD）：一个软件实体应当尽可能少的与其他实体发生相互作用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-uml类图&#34;&gt;2 UML类图&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/roaraeonliou/roaraeonliou.github.io/static/9cf5f1f02dffef4762ecb406ddcdd463/c3eacacee458e492a10fde1b3ee909b8.png&#34; alt=&#34;image.png&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;3-spring使用了哪些设计模式&#34;&gt;3 Spring使用了哪些设计模式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;工厂设计模式：Spring使用工厂模式通过Beanfactory、ApplictionContext创建Bean对象&lt;/li&gt;
&lt;li&gt;代理设计模式：Spring AOP功能的实现&lt;/li&gt;
&lt;li&gt;单例设计模式：Spring中的Bean默认都是单例的&lt;/li&gt;
&lt;li&gt;模板方法模式：Spring中jdbcTemplate、hibernateTemplate等以Template结尾对数据库操作的类&lt;/li&gt;
&lt;li&gt;包装器设计模式：&lt;/li&gt;
&lt;li&gt;观察者模式：Spring事件驱动模型&lt;/li&gt;
&lt;li&gt;适配器模式：Spring AOP的增强或者通知使用到了适配器模式，Spring MVC中也使用了适配器模式适配Controller&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-jdk使用了哪些设计模式&#34;&gt;4 JDK使用了哪些设计模式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;桥接模式&lt;/li&gt;
&lt;li&gt;适配器模式&lt;/li&gt;
&lt;li&gt;组合模式&lt;/li&gt;
&lt;li&gt;装饰器模式&lt;/li&gt;
&lt;li&gt;享元模式&lt;/li&gt;
&lt;li&gt;代理模式&lt;/li&gt;
&lt;li&gt;抽象工厂模式&lt;/li&gt;
&lt;li&gt;建造者模式&lt;/li&gt;
&lt;li&gt;工厂方法&lt;/li&gt;
&lt;li&gt;原型模式&lt;/li&gt;
&lt;li&gt;单例模式&lt;/li&gt;
&lt;li&gt;责任链模式&lt;/li&gt;
&lt;li&gt;命令模式&lt;/li&gt;
&lt;li&gt;解释器模型&lt;/li&gt;
&lt;li&gt;中介者模式&lt;/li&gt;
&lt;li&gt;备忘录模式&lt;/li&gt;
&lt;li&gt;空对象模式&lt;/li&gt;
&lt;li&gt;观察者模式&lt;/li&gt;
&lt;li&gt;状态模式&lt;/li&gt;
&lt;li&gt;策略模式&lt;/li&gt;
&lt;li&gt;模板方法模式&lt;/li&gt;
&lt;li&gt;访问者模式&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
